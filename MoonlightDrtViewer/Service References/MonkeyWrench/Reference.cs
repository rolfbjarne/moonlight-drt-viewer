//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50401.0
// 
namespace MoonlightDrtViewer.MonkeyWrench {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://monkeywrench.novell.com/", ConfigurationName="MonkeyWrench.WebServicesSoap")]
    public interface WebServicesSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetRoles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetRoles(string user, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetRoles(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/Login", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginLogin(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.LoginResponse EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/Logout", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginLogout(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        void EndLogout(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/CreateLanefile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginCreateLanefile(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string filename, System.AsyncCallback callback, object asyncState);
        
        void EndCreateLanefile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AttachFileToLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAttachFileToLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int lanefile_id, System.AsyncCallback callback, object asyncState);
        
        void EndAttachFileToLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeattachFileFromLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeattachFileFromLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int lanefile_id, System.AsyncCallback callback, object asyncState);
        
        void EndDeattachFileFromLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditCommandFilename", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditCommandFilename(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string filename, System.AsyncCallback callback, object asyncState);
        
        void EndEditCommandFilename(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditCommandSequence", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditCommandSequence(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, int sequence, System.AsyncCallback callback, object asyncState);
        
        void EndEditCommandSequence(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditCommandArguments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditCommandArguments(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string arguments, System.AsyncCallback callback, object asyncState);
        
        void EndEditCommandArguments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditCommandTimeout", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditCommandTimeout(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, int timeout, System.AsyncCallback callback, object asyncState);
        
        void EndEditCommandTimeout(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditCommandWorkingDirectory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditCommandWorkingDirectory(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string working_directory, System.AsyncCallback callback, object asyncState);
        
        void EndEditCommandWorkingDirectory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditCommandUploadFiles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditCommandUploadFiles(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string upload_files, System.AsyncCallback callback, object asyncState);
        
        void EndEditCommandUploadFiles(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/SwitchCommandNonFatal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginSwitchCommandNonFatal(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState);
        
        void EndSwitchCommandNonFatal(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/SwitchCommandAlwaysExecute", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginSwitchCommandAlwaysExecute(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState);
        
        void EndSwitchCommandAlwaysExecute(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/SwitchCommandInternal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginSwitchCommandInternal(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState);
        
        void EndSwitchCommandInternal(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeleteCommand", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeleteCommand(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteCommand(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddCommand", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddCommand(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string command, bool always_execute, bool nonfatal, int timeout, int sequence, System.AsyncCallback callback, object asyncState);
        
        void EndAddCommand(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/SwitchHostEnabledForLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginSwitchHostEnabledForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, System.AsyncCallback callback, object asyncState);
        
        void EndSwitchHostEnabledForLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/RemoveHostForLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginRemoveHostForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveHostForLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddHostToLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddHostToLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, System.AsyncCallback callback, object asyncState);
        
        void EndAddHostToLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddDependencyToLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddDependencyToLane(MoonlightDrtViewer.MonkeyWrench.AddDependencyToLaneRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.AddDependencyToLaneResponse EndAddDependencyToLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditLaneDependencyFilename", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditLaneDependencyFilename(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, string filename, System.AsyncCallback callback, object asyncState);
        
        void EndEditLaneDependencyFilename(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeleteLaneDependency", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeleteLaneDependency(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteLaneDependency(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditLaneDependencyDownloads", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditLaneDependencyDownloads(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, string downloads, System.AsyncCallback callback, object asyncState);
        
        void EndEditLaneDependencyDownloads(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/UnlinkDeletionDirective", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginUnlinkDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int directive_id, System.AsyncCallback callback, object asyncState);
        
        void EndUnlinkDeletionDirective(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeleteDeletionDirective", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeleteDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_directive_id, int file_directive_id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteDeletionDirective(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EnableDeletionDirective", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEnableDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_deletion_directive_id, bool enabled, System.AsyncCallback callback, object asyncState);
        
        void EndEnableDeletionDirective(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddFileDeletionDirective", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddFileDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string filename, string name, MoonlightDrtViewer.MonkeyWrench.DBMatchMode match_mode, int x, MoonlightDrtViewer.MonkeyWrench.DBDeleteCondition condition, System.AsyncCallback callback, object asyncState);
        
        int EndAddFileDeletionDirective(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddLaneDeletionDirective", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddLaneDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int file_deletion_directive_id, int lane_id, System.AsyncCallback callback, object asyncState);
        
        int EndAddLaneDeletionDirective(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/FindLaneDeletionDirective", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginFindLaneDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int file_deletion_directive_id, int lane_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.DBLaneDeletionDirectiveView EndFindLaneDeletionDirective(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetLaneResponse EndGetLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetWorkHostHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetWorkHostHistory(MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryResponse1 EndGetWorkHostHistory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetHostForEdit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetHostForEdit(MoonlightDrtViewer.MonkeyWrench.GetHostForEditRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetHostForEditResponse1 EndGetHostForEdit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddMasterHost", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddMasterHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, int masterhost_id, System.AsyncCallback callback, object asyncState);
        
        void EndAddMasterHost(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/RemoveMasterHost", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginRemoveMasterHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, int masterhost_id, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveMasterHost(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetLaneForEdit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetLaneForEdit(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string lane, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetLaneForEditResponse EndGetLaneForEdit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/FindHost", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginFindHost(MoonlightDrtViewer.MonkeyWrench.FindHostRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.FindHostResponse1 EndFindHost(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/FindRevisionForLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginFindRevisionForLane(MoonlightDrtViewer.MonkeyWrench.FindRevisionForLaneRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.FindRevisionForLaneResponse EndFindRevisionForLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/FindRevision", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginFindRevision(MoonlightDrtViewer.MonkeyWrench.FindRevisionRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse1 EndFindRevision(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/FindLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginFindLane(MoonlightDrtViewer.MonkeyWrench.FindLaneRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.FindLaneResponse1 EndFindLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBLane lane, System.AsyncCallback callback, object asyncState);
        
        void EndEditLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditHost", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBHost host, System.AsyncCallback callback, object asyncState);
        
        void EndEditHost(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditHostWithPassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditHostWithPassword(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBHost host, string password, System.AsyncCallback callback, object asyncState);
        
        void EndEditHostWithPassword(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetViewLaneData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetViewLaneData(MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse1 EndGetViewLaneData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetViewLaneData2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetViewLaneData2(MoonlightDrtViewer.MonkeyWrench.GetViewLaneData2Request request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetViewLaneData2Response EndGetViewLaneData2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetFrontPageData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetFrontPageData(MoonlightDrtViewer.MonkeyWrench.GetFrontPageDataRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetFrontPageDataResponse EndGetFrontPageData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetFrontPageData2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetFrontPageData2(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int limit, string[] lanes, int[] lane_ids, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.FrontPageResponse EndGetFrontPageData2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetLanes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetLanes(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetLanesResponse EndGetLanes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetHostLanes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetHostLanes(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetHostLanesResponse EndGetHostLanes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetHosts", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetHosts(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetHostsResponse EndGetHosts(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetRevisions", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetRevisions(MoonlightDrtViewer.MonkeyWrench.GetRevisionsRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetRevisionsResponse1 EndGetRevisions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetCommands", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetCommands(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetCommandsResponse EndGetCommands(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/CloneLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginCloneLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string new_name, bool copy_files, System.AsyncCallback callback, object asyncState);
        
        int EndCloneLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeleteLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeleteLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string lane, System.AsyncCallback callback, object asyncState);
        
        int EndAddLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeleteHost", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeleteHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteHost(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddHost", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, System.AsyncCallback callback, object asyncState);
        
        int EndAddHost(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/ClearRevision", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginClearRevision(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, System.AsyncCallback callback, object asyncState);
        
        void EndClearRevision(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/RescheduleRevision", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginRescheduleRevision(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, System.AsyncCallback callback, object asyncState);
        
        void EndRescheduleRevision(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/ClearAllWorkForHost", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginClearAllWorkForHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndClearAllWorkForHost(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/ClearAllWorkForLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginClearAllWorkForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndClearAllWorkForLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeleteAllWorkForHost", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeleteAllWorkForHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndDeleteAllWorkForHost(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeleteAllWorkForLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeleteAllWorkForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndDeleteAllWorkForLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeleteAllRevisionsForLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeleteAllRevisionsForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndDeleteAllRevisionsForLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AbortRevision", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAbortRevision(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, System.AsyncCallback callback, object asyncState);
        
        void EndAbortRevision(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/ClearWork", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginClearWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState);
        
        void EndClearWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AbortWork", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAbortWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState);
        
        void EndAbortWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/PauseWork", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginPauseWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState);
        
        void EndPauseWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/ResumeWork", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginResumeWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState);
        
        void EndResumeWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetViewTableData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetViewTableData(MoonlightDrtViewer.MonkeyWrench.GetViewTableDataRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetViewTableDataResponse1 EndGetViewTableData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetViewWorkTableData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetViewWorkTableData(MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse1 EndGetViewWorkTableData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetViewWorkTableData2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetViewWorkTableData2(MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableData2Request request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableData2Response EndGetViewWorkTableData2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetLaneFileForEdit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetLaneFileForEdit(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanefile_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetLaneFileForEditResponse EndGetLaneFileForEdit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditLaneFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditLaneFile(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBLanefile lanefile, System.AsyncCallback callback, object asyncState);
        
        void EndEditLaneFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetViewLaneFileHistoryData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetViewLaneFileHistoryData(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanefile_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetViewLaneFileHistoryDataResponse EndGetViewLaneFileHistoryData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetUsers(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetUsersResponse EndGetUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeleteUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeleteUser(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndDeleteUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddUserEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddUserEmail(MoonlightDrtViewer.MonkeyWrench.AddUserEmailRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.AddUserEmailResponse EndAddUserEmail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/RemoveUserEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginRemoveUserEmail(MoonlightDrtViewer.MonkeyWrench.RemoveUserEmailRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.RemoveUserEmailResponse EndRemoveUserEmail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditUser(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBPerson user, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndEditUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetUser(MoonlightDrtViewer.MonkeyWrench.GetUserRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetUserResponse1 EndGetUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetUploadPort", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetUploadPort(System.AsyncCallback callback, object asyncState);
        
        int EndGetUploadPort(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddEnvironmentVariable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddEnvironmentVariable(MoonlightDrtViewer.MonkeyWrench.AddEnvironmentVariableRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.AddEnvironmentVariableResponse EndAddEnvironmentVariable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditEnvironmentVariable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditEnvironmentVariable(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBEnvironmentVariable variable, System.AsyncCallback callback, object asyncState);
        
        void EndEditEnvironmentVariable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeleteEnvironmentVariable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeleteEnvironmentVariable(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int variable_id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteEnvironmentVariable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/UploadCompressedFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginUploadCompressedFile(MoonlightDrtViewer.MonkeyWrench.UploadCompressedFileRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.UploadCompressedFileResponse EndUploadCompressedFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/UploadFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginUploadFile(MoonlightDrtViewer.MonkeyWrench.UploadFileRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.UploadFileResponse EndUploadFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetWorkState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetWorkState(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.DBState EndGetWorkState(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetFilesForWork", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetFilesForWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int revisionwork_id, int command_id, string filename, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetFilesForWorkResponse EndGetFilesForWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/ReportBuildState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginReportBuildState(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.ReportBuildStateResponse EndReportBuildState(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetRevisionWorkForLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetRevisionWorkForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int revision_id, int host_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetRevisionWorkForLaneResponse EndGetRevisionWorkForLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/ReportBuildBotStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginReportBuildBotStatus(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.BuildBotStatus status, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.ReportBuildBotStatusResponse EndReportBuildBotStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetBuildBotStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetBuildBotStatus(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetBuildBotStatusResponse EndGetBuildBotStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetBuildInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetBuildInfo(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse EndGetBuildInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetBuildInfoMultiple", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetBuildInfoMultiple(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, bool multiple_work, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse EndGetBuildInfoMultiple(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/FindLatestWorkFileId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginFindLatestWorkFileId(MoonlightDrtViewer.MonkeyWrench.FindLatestWorkFileIdRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.FindLatestWorkFileIdResponse EndFindLatestWorkFileId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetTestResults", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetTestResults(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string[] revisions, string filename, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetTestResultsResponse EndGetTestResults(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditIdentity", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditIdentity(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBIrcIdentity irc_identity, MoonlightDrtViewer.MonkeyWrench.DBEmailIdentity email_identity, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndEditIdentity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/RemoveIdentity", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginRemoveIdentity(MoonlightDrtViewer.MonkeyWrench.RemoveIdentityRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.RemoveIdentityResponse EndRemoveIdentity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetIdentities", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetIdentities(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetIdentitiesResponse EndGetIdentities(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditNotification", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBNotification notification, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndEditNotification(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/RemoveNotification", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginRemoveNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndRemoveNotification(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetNotifications", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetNotifications(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetNotificationsResponse EndGetNotifications(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddLaneNotification", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddLaneNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int notification_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndAddLaneNotification(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/RemoveLaneNotification", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginRemoveLaneNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndRemoveLaneNotification(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddRelease", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddRelease(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBRelease release, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndAddRelease(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetReleases", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetReleases(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetReleasesResponse EndGetReleases(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeleteRelease", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeleteRelease(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndDeleteRelease(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/ExecuteScheduler", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginExecuteScheduler(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, bool forcefullupdate, System.AsyncCallback callback, object asyncState);
        
        void EndExecuteScheduler(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/ExecuteDeletionDirectives", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginExecuteDeletionDirectives(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        void EndExecuteDeletionDirectives(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetAdminInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetAdminInfo(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetAdminInfoResponse EndGetAdminInfo(System.IAsyncResult result);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class WebServiceLogin : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string userField;
        
        private string passwordField;
        
        private string cookieField;
        
        private string ip4Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string User {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
                this.RaisePropertyChanged("User");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
                this.RaisePropertyChanged("Password");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Cookie {
            get {
                return this.cookieField;
            }
            set {
                this.cookieField = value;
                this.RaisePropertyChanged("Cookie");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Ip4 {
            get {
                return this.ip4Field;
            }
            set {
                this.ip4Field = value;
                this.RaisePropertyChanged("Ip4");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class BuildBotStatus : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string hostField;
        
        private string assemblyVersionField;
        
        private string assemblyDescriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
                this.RaisePropertyChanged("Host");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string AssemblyVersion {
            get {
                return this.assemblyVersionField;
            }
            set {
                this.assemblyVersionField = value;
                this.RaisePropertyChanged("AssemblyVersion");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string AssemblyDescription {
            get {
                return this.assemblyDescriptionField;
            }
            set {
                this.assemblyDescriptionField = value;
                this.RaisePropertyChanged("AssemblyDescription");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class BuildInfoEntry : object, System.ComponentModel.INotifyPropertyChanged {
        
        private DBLane laneField;
        
        private DBHostLane hostLaneField;
        
        private DBRevision revisionField;
        
        private DBWorkFile[] filesToDownloadField;
        
        private DBLane[] dependentLaneOfFilesField;
        
        private DBLanefile[] laneFilesField;
        
        private DBWork workField;
        
        private DBCommand commandField;
        
        private DBEnvironmentVariable[] environmentVariablesField;
        
        private DBHost hostField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DBLane Lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
                this.RaisePropertyChanged("Lane");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DBHostLane HostLane {
            get {
                return this.hostLaneField;
            }
            set {
                this.hostLaneField = value;
                this.RaisePropertyChanged("HostLane");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public DBRevision Revision {
            get {
                return this.revisionField;
            }
            set {
                this.revisionField = value;
                this.RaisePropertyChanged("Revision");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        public DBWorkFile[] FilesToDownload {
            get {
                return this.filesToDownloadField;
            }
            set {
                this.filesToDownloadField = value;
                this.RaisePropertyChanged("FilesToDownload");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=4)]
        public DBLane[] DependentLaneOfFiles {
            get {
                return this.dependentLaneOfFilesField;
            }
            set {
                this.dependentLaneOfFilesField = value;
                this.RaisePropertyChanged("DependentLaneOfFiles");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=5)]
        public DBLanefile[] LaneFiles {
            get {
                return this.laneFilesField;
            }
            set {
                this.laneFilesField = value;
                this.RaisePropertyChanged("LaneFiles");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public DBWork Work {
            get {
                return this.workField;
            }
            set {
                this.workField = value;
                this.RaisePropertyChanged("Work");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public DBCommand Command {
            get {
                return this.commandField;
            }
            set {
                this.commandField = value;
                this.RaisePropertyChanged("Command");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=8)]
        public DBEnvironmentVariable[] EnvironmentVariables {
            get {
                return this.environmentVariablesField;
            }
            set {
                this.environmentVariablesField = value;
                this.RaisePropertyChanged("EnvironmentVariables");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public DBHost Host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
                this.RaisePropertyChanged("Host");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBLane : DBRecord {
        
        private string laneField;
        
        private string source_controlField;
        
        private string repositoryField;
        
        private string min_revisionField;
        
        private string max_revisionField;
        
        private System.Nullable<int> parent_lane_idField;
        
        private string commit_filterField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
                this.RaisePropertyChanged("lane");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string source_control {
            get {
                return this.source_controlField;
            }
            set {
                this.source_controlField = value;
                this.RaisePropertyChanged("source_control");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string repository {
            get {
                return this.repositoryField;
            }
            set {
                this.repositoryField = value;
                this.RaisePropertyChanged("repository");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string min_revision {
            get {
                return this.min_revisionField;
            }
            set {
                this.min_revisionField = value;
                this.RaisePropertyChanged("min_revision");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string max_revision {
            get {
                return this.max_revisionField;
            }
            set {
                this.max_revisionField = value;
                this.RaisePropertyChanged("max_revision");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=5)]
        public System.Nullable<int> parent_lane_id {
            get {
                return this.parent_lane_idField;
            }
            set {
                this.parent_lane_idField = value;
                this.RaisePropertyChanged("parent_lane_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string commit_filter {
            get {
                return this.commit_filterField;
            }
            set {
                this.commit_filterField = value;
                this.RaisePropertyChanged("commit_filter");
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBEmailIdentity))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBIrcIdentity))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBMasterHost))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBWorkFile))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBRelease))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBBuildBotStatus))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBFile))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBWork))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBHostLane))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBRevision))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBLaneNotification))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBNotification))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBFileDeletionDirective))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBLaneDependency))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBCommand))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBLanefile))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBEnvironmentVariable))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBPerson))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBRevisionWork))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBHost))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBView))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBTestResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBRevisionWorkView))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBRevisionWorkView2))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBWorkFileView))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBWorkView2))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBHostLaneView))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBLaneDeletionDirectiveView))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBLane))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBRecord : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("id");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBEmailIdentity : DBRecord {
        
        private string nameField;
        
        private string emailField;
        
        private string passwordField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
                this.RaisePropertyChanged("email");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
                this.RaisePropertyChanged("password");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBIrcIdentity : DBRecord {
        
        private string nameField;
        
        private string serversField;
        
        private string channelsField;
        
        private string nicksField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string servers {
            get {
                return this.serversField;
            }
            set {
                this.serversField = value;
                this.RaisePropertyChanged("servers");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string channels {
            get {
                return this.channelsField;
            }
            set {
                this.channelsField = value;
                this.RaisePropertyChanged("channels");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string nicks {
            get {
                return this.nicksField;
            }
            set {
                this.nicksField = value;
                this.RaisePropertyChanged("nicks");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBMasterHost : DBRecord {
        
        private int host_idField;
        
        private int master_host_idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int host_id {
            get {
                return this.host_idField;
            }
            set {
                this.host_idField = value;
                this.RaisePropertyChanged("host_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int master_host_id {
            get {
                return this.master_host_idField;
            }
            set {
                this.master_host_idField = value;
                this.RaisePropertyChanged("master_host_id");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBWorkFile : DBRecord {
        
        private int work_idField;
        
        private int file_idField;
        
        private bool hiddenField;
        
        private string filenameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int work_id {
            get {
                return this.work_idField;
            }
            set {
                this.work_idField = value;
                this.RaisePropertyChanged("work_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int file_id {
            get {
                return this.file_idField;
            }
            set {
                this.file_idField = value;
                this.RaisePropertyChanged("file_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool hidden {
            get {
                return this.hiddenField;
            }
            set {
                this.hiddenField = value;
                this.RaisePropertyChanged("hidden");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
                this.RaisePropertyChanged("filename");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBRelease : DBRecord {
        
        private string versionField;
        
        private string revisionField;
        
        private string descriptionField;
        
        private string filenameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
                this.RaisePropertyChanged("version");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string revision {
            get {
                return this.revisionField;
            }
            set {
                this.revisionField = value;
                this.RaisePropertyChanged("revision");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("description");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
                this.RaisePropertyChanged("filename");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBBuildBotStatus : DBRecord {
        
        private int host_idField;
        
        private string versionField;
        
        private string descriptionField;
        
        private System.DateTime report_dateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int host_id {
            get {
                return this.host_idField;
            }
            set {
                this.host_idField = value;
                this.RaisePropertyChanged("host_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
                this.RaisePropertyChanged("version");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("description");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime report_date {
            get {
                return this.report_dateField;
            }
            set {
                this.report_dateField = value;
                this.RaisePropertyChanged("report_date");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBFile : DBRecord {
        
        private string filenameField;
        
        private string md5Field;
        
        private System.Nullable<int> file_idField;
        
        private System.DateTime write_stampField;
        
        private string mimeField;
        
        private string compressed_mimeField;
        
        private int sizeField;
        
        private bool hiddenField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
                this.RaisePropertyChanged("filename");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string md5 {
            get {
                return this.md5Field;
            }
            set {
                this.md5Field = value;
                this.RaisePropertyChanged("md5");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public System.Nullable<int> file_id {
            get {
                return this.file_idField;
            }
            set {
                this.file_idField = value;
                this.RaisePropertyChanged("file_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime write_stamp {
            get {
                return this.write_stampField;
            }
            set {
                this.write_stampField = value;
                this.RaisePropertyChanged("write_stamp");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string mime {
            get {
                return this.mimeField;
            }
            set {
                this.mimeField = value;
                this.RaisePropertyChanged("mime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string compressed_mime {
            get {
                return this.compressed_mimeField;
            }
            set {
                this.compressed_mimeField = value;
                this.RaisePropertyChanged("compressed_mime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public int size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
                this.RaisePropertyChanged("size");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public bool hidden {
            get {
                return this.hiddenField;
            }
            set {
                this.hiddenField = value;
                this.RaisePropertyChanged("hidden");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBWork : DBRecord {
        
        private DBState stateField;
        
        private System.Nullable<int> host_idField;
        
        private int command_idField;
        
        private int stateField1;
        
        private System.DateTime starttimeField;
        
        private System.DateTime endtimeField;
        
        private int durationField;
        
        private string logfileField;
        
        private string summaryField;
        
        private int revisionwork_idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DBState State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
                this.RaisePropertyChanged("State");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=1)]
        public System.Nullable<int> host_id {
            get {
                return this.host_idField;
            }
            set {
                this.host_idField = value;
                this.RaisePropertyChanged("host_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int command_id {
            get {
                return this.command_idField;
            }
            set {
                this.command_idField = value;
                this.RaisePropertyChanged("command_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int state {
            get {
                return this.stateField1;
            }
            set {
                this.stateField1 = value;
                this.RaisePropertyChanged("state");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public System.DateTime starttime {
            get {
                return this.starttimeField;
            }
            set {
                this.starttimeField = value;
                this.RaisePropertyChanged("starttime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public System.DateTime endtime {
            get {
                return this.endtimeField;
            }
            set {
                this.endtimeField = value;
                this.RaisePropertyChanged("endtime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public int duration {
            get {
                return this.durationField;
            }
            set {
                this.durationField = value;
                this.RaisePropertyChanged("duration");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string logfile {
            get {
                return this.logfileField;
            }
            set {
                this.logfileField = value;
                this.RaisePropertyChanged("logfile");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string summary {
            get {
                return this.summaryField;
            }
            set {
                this.summaryField = value;
                this.RaisePropertyChanged("summary");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public int revisionwork_id {
            get {
                return this.revisionwork_idField;
            }
            set {
                this.revisionwork_idField = value;
                this.RaisePropertyChanged("revisionwork_id");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public enum DBState {
        
        /// <remarks/>
        NotDone,
        
        /// <remarks/>
        Executing,
        
        /// <remarks/>
        Failed,
        
        /// <remarks/>
        Success,
        
        /// <remarks/>
        Aborted,
        
        /// <remarks/>
        Timeout,
        
        /// <remarks/>
        Paused,
        
        /// <remarks/>
        Skipped,
        
        /// <remarks/>
        Issues,
        
        /// <remarks/>
        DependencyNotFulfilled,
        
        /// <remarks/>
        NoWorkYet,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBHostLane : DBRecord {
        
        private int host_idField;
        
        private int lane_idField;
        
        private bool enabledField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int host_id {
            get {
                return this.host_idField;
            }
            set {
                this.host_idField = value;
                this.RaisePropertyChanged("host_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
                this.RaisePropertyChanged("lane_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
                this.RaisePropertyChanged("enabled");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBRevision : DBRecord {
        
        private int lane_idField;
        
        private string revisionField;
        
        private string authorField;
        
        private System.DateTime dateField;
        
        private string logField;
        
        private System.Nullable<int> log_file_idField;
        
        private string diffField;
        
        private System.Nullable<int> diff_file_idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
                this.RaisePropertyChanged("lane_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string revision {
            get {
                return this.revisionField;
            }
            set {
                this.revisionField = value;
                this.RaisePropertyChanged("revision");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string author {
            get {
                return this.authorField;
            }
            set {
                this.authorField = value;
                this.RaisePropertyChanged("author");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
                this.RaisePropertyChanged("date");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string log {
            get {
                return this.logField;
            }
            set {
                this.logField = value;
                this.RaisePropertyChanged("log");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=5)]
        public System.Nullable<int> log_file_id {
            get {
                return this.log_file_idField;
            }
            set {
                this.log_file_idField = value;
                this.RaisePropertyChanged("log_file_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string diff {
            get {
                return this.diffField;
            }
            set {
                this.diffField = value;
                this.RaisePropertyChanged("diff");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=7)]
        public System.Nullable<int> diff_file_id {
            get {
                return this.diff_file_idField;
            }
            set {
                this.diff_file_idField = value;
                this.RaisePropertyChanged("diff_file_id");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBLaneNotification : DBRecord {
        
        private int lane_idField;
        
        private int notification_idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
                this.RaisePropertyChanged("lane_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int notification_id {
            get {
                return this.notification_idField;
            }
            set {
                this.notification_idField = value;
                this.RaisePropertyChanged("notification_id");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBNotification : DBRecord {
        
        private DBNotificationMode modeField;
        
        private DBNotificationType typeField;
        
        private string nameField;
        
        private System.Nullable<int> ircidentity_idField;
        
        private System.Nullable<int> emailidentity_idField;
        
        private int modeField1;
        
        private int typeField1;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DBNotificationMode Mode {
            get {
                return this.modeField;
            }
            set {
                this.modeField = value;
                this.RaisePropertyChanged("Mode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DBNotificationType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
                this.RaisePropertyChanged("Type");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public System.Nullable<int> ircidentity_id {
            get {
                return this.ircidentity_idField;
            }
            set {
                this.ircidentity_idField = value;
                this.RaisePropertyChanged("ircidentity_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=4)]
        public System.Nullable<int> emailidentity_id {
            get {
                return this.emailidentity_idField;
            }
            set {
                this.emailidentity_idField = value;
                this.RaisePropertyChanged("emailidentity_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int mode {
            get {
                return this.modeField1;
            }
            set {
                this.modeField1 = value;
                this.RaisePropertyChanged("mode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public int type {
            get {
                return this.typeField1;
            }
            set {
                this.typeField1 = value;
                this.RaisePropertyChanged("type");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public enum DBNotificationMode {
        
        /// <remarks/>
        Default,
        
        /// <remarks/>
        MoonlightDrt,
        
        /// <remarks/>
        NUnit,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public enum DBNotificationType {
        
        /// <remarks/>
        FatalFailuresOnly,
        
        /// <remarks/>
        NonFatalFailuresOnly,
        
        /// <remarks/>
        AllFailures,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBFileDeletionDirective : DBRecord {
        
        private string nameField;
        
        private string filenameField;
        
        private int match_modeField;
        
        private int conditionField;
        
        private int xField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
                this.RaisePropertyChanged("filename");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int match_mode {
            get {
                return this.match_modeField;
            }
            set {
                this.match_modeField = value;
                this.RaisePropertyChanged("match_mode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int condition {
            get {
                return this.conditionField;
            }
            set {
                this.conditionField = value;
                this.RaisePropertyChanged("condition");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int x {
            get {
                return this.xField;
            }
            set {
                this.xField = value;
                this.RaisePropertyChanged("x");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBLaneDependency : DBRecord {
        
        private DBLaneDependencyCondition conditionField;
        
        private int lane_idField;
        
        private int dependent_lane_idField;
        
        private System.Nullable<int> dependent_host_idField;
        
        private int conditionField1;
        
        private string filenameField;
        
        private string download_filesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DBLaneDependencyCondition Condition {
            get {
                return this.conditionField;
            }
            set {
                this.conditionField = value;
                this.RaisePropertyChanged("Condition");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
                this.RaisePropertyChanged("lane_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int dependent_lane_id {
            get {
                return this.dependent_lane_idField;
            }
            set {
                this.dependent_lane_idField = value;
                this.RaisePropertyChanged("dependent_lane_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public System.Nullable<int> dependent_host_id {
            get {
                return this.dependent_host_idField;
            }
            set {
                this.dependent_host_idField = value;
                this.RaisePropertyChanged("dependent_host_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int condition {
            get {
                return this.conditionField1;
            }
            set {
                this.conditionField1 = value;
                this.RaisePropertyChanged("condition");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
                this.RaisePropertyChanged("filename");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string download_files {
            get {
                return this.download_filesField;
            }
            set {
                this.download_filesField = value;
                this.RaisePropertyChanged("download_files");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public enum DBLaneDependencyCondition {
        
        /// <remarks/>
        Invalid,
        
        /// <remarks/>
        DependentLaneSuccess,
        
        /// <remarks/>
        DependentLaneSuccessWithFile,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBCommand : DBRecord {
        
        private System.Nullable<int> lane_idField;
        
        private string commandField;
        
        private string filenameField;
        
        private string argumentsField;
        
        private int sequenceField;
        
        private bool alwaysexecuteField;
        
        private bool nonfatalField;
        
        private bool internalField;
        
        private int timeoutField;
        
        private string working_directoryField;
        
        private string upload_filesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=0)]
        public System.Nullable<int> lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
                this.RaisePropertyChanged("lane_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string command {
            get {
                return this.commandField;
            }
            set {
                this.commandField = value;
                this.RaisePropertyChanged("command");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
                this.RaisePropertyChanged("filename");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string arguments {
            get {
                return this.argumentsField;
            }
            set {
                this.argumentsField = value;
                this.RaisePropertyChanged("arguments");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int sequence {
            get {
                return this.sequenceField;
            }
            set {
                this.sequenceField = value;
                this.RaisePropertyChanged("sequence");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public bool alwaysexecute {
            get {
                return this.alwaysexecuteField;
            }
            set {
                this.alwaysexecuteField = value;
                this.RaisePropertyChanged("alwaysexecute");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public bool nonfatal {
            get {
                return this.nonfatalField;
            }
            set {
                this.nonfatalField = value;
                this.RaisePropertyChanged("nonfatal");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public bool @internal {
            get {
                return this.internalField;
            }
            set {
                this.internalField = value;
                this.RaisePropertyChanged("internal");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public int timeout {
            get {
                return this.timeoutField;
            }
            set {
                this.timeoutField = value;
                this.RaisePropertyChanged("timeout");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string working_directory {
            get {
                return this.working_directoryField;
            }
            set {
                this.working_directoryField = value;
                this.RaisePropertyChanged("working_directory");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string upload_files {
            get {
                return this.upload_filesField;
            }
            set {
                this.upload_filesField = value;
                this.RaisePropertyChanged("upload_files");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBLanefile : DBRecord {
        
        private string nameField;
        
        private string contentsField;
        
        private string mimeField;
        
        private System.Nullable<int> original_idField;
        
        private System.Nullable<System.DateTime> changed_dateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string contents {
            get {
                return this.contentsField;
            }
            set {
                this.contentsField = value;
                this.RaisePropertyChanged("contents");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string mime {
            get {
                return this.mimeField;
            }
            set {
                this.mimeField = value;
                this.RaisePropertyChanged("mime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public System.Nullable<int> original_id {
            get {
                return this.original_idField;
            }
            set {
                this.original_idField = value;
                this.RaisePropertyChanged("original_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=4)]
        public System.Nullable<System.DateTime> changed_date {
            get {
                return this.changed_dateField;
            }
            set {
                this.changed_dateField = value;
                this.RaisePropertyChanged("changed_date");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBEnvironmentVariable : DBRecord {
        
        private System.Nullable<int> host_idField;
        
        private System.Nullable<int> lane_idField;
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=0)]
        public System.Nullable<int> host_id {
            get {
                return this.host_idField;
            }
            set {
                this.host_idField = value;
                this.RaisePropertyChanged("host_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=1)]
        public System.Nullable<int> lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
                this.RaisePropertyChanged("lane_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("value");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBPerson : DBRecord {
        
        private string[] emailsField;
        
        private string loginField;
        
        private string passwordField;
        
        private string fullnameField;
        
        private string rolesField;
        
        private string irc_nicknamesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public string[] Emails {
            get {
                return this.emailsField;
            }
            set {
                this.emailsField = value;
                this.RaisePropertyChanged("Emails");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string login {
            get {
                return this.loginField;
            }
            set {
                this.loginField = value;
                this.RaisePropertyChanged("login");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
                this.RaisePropertyChanged("password");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string fullname {
            get {
                return this.fullnameField;
            }
            set {
                this.fullnameField = value;
                this.RaisePropertyChanged("fullname");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string roles {
            get {
                return this.rolesField;
            }
            set {
                this.rolesField = value;
                this.RaisePropertyChanged("roles");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string irc_nicknames {
            get {
                return this.irc_nicknamesField;
            }
            set {
                this.irc_nicknamesField = value;
                this.RaisePropertyChanged("irc_nicknames");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBRevisionWork : DBRecord {
        
        private DBState stateField;
        
        private int lane_idField;
        
        private int host_idField;
        
        private System.Nullable<int> workhost_idField;
        
        private int revision_idField;
        
        private int stateField1;
        
        private System.DateTime lock_expiresField;
        
        private bool completedField;
        
        private System.DateTime endtimeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DBState State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
                this.RaisePropertyChanged("State");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
                this.RaisePropertyChanged("lane_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int host_id {
            get {
                return this.host_idField;
            }
            set {
                this.host_idField = value;
                this.RaisePropertyChanged("host_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public System.Nullable<int> workhost_id {
            get {
                return this.workhost_idField;
            }
            set {
                this.workhost_idField = value;
                this.RaisePropertyChanged("workhost_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int revision_id {
            get {
                return this.revision_idField;
            }
            set {
                this.revision_idField = value;
                this.RaisePropertyChanged("revision_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int state {
            get {
                return this.stateField1;
            }
            set {
                this.stateField1 = value;
                this.RaisePropertyChanged("state");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public System.DateTime lock_expires {
            get {
                return this.lock_expiresField;
            }
            set {
                this.lock_expiresField = value;
                this.RaisePropertyChanged("lock_expires");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public bool completed {
            get {
                return this.completedField;
            }
            set {
                this.completedField = value;
                this.RaisePropertyChanged("completed");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public System.DateTime endtime {
            get {
                return this.endtimeField;
            }
            set {
                this.endtimeField = value;
                this.RaisePropertyChanged("endtime");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBHost : DBRecord {
        
        private string hostField;
        
        private string descriptionField;
        
        private string architectureField;
        
        private int queuemanagementField;
        
        private bool enabledField;
        
        private System.Nullable<int> release_idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
                this.RaisePropertyChanged("host");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("description");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string architecture {
            get {
                return this.architectureField;
            }
            set {
                this.architectureField = value;
                this.RaisePropertyChanged("architecture");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int queuemanagement {
            get {
                return this.queuemanagementField;
            }
            set {
                this.queuemanagementField = value;
                this.RaisePropertyChanged("queuemanagement");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
                this.RaisePropertyChanged("enabled");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=5)]
        public System.Nullable<int> release_id {
            get {
                return this.release_idField;
            }
            set {
                this.release_idField = value;
                this.RaisePropertyChanged("release_id");
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBTestResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBRevisionWorkView))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBRevisionWorkView2))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBWorkFileView))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBWorkView2))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBHostLaneView))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBLaneDeletionDirectiveView))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBView : DBRecord {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBTestResult : DBView {
        
        private int workfile_idField;
        
        private string md5Field;
        
        private string filenameField;
        
        private int command_idField;
        
        private string revisionField;
        
        private int revisionwork_idField;
        
        private int lane_idField;
        
        private int host_idField;
        
        private int revision_idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int workfile_id {
            get {
                return this.workfile_idField;
            }
            set {
                this.workfile_idField = value;
                this.RaisePropertyChanged("workfile_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string md5 {
            get {
                return this.md5Field;
            }
            set {
                this.md5Field = value;
                this.RaisePropertyChanged("md5");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
                this.RaisePropertyChanged("filename");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int command_id {
            get {
                return this.command_idField;
            }
            set {
                this.command_idField = value;
                this.RaisePropertyChanged("command_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string revision {
            get {
                return this.revisionField;
            }
            set {
                this.revisionField = value;
                this.RaisePropertyChanged("revision");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int revisionwork_id {
            get {
                return this.revisionwork_idField;
            }
            set {
                this.revisionwork_idField = value;
                this.RaisePropertyChanged("revisionwork_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public int lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
                this.RaisePropertyChanged("lane_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public int host_id {
            get {
                return this.host_idField;
            }
            set {
                this.host_idField = value;
                this.RaisePropertyChanged("host_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public int revision_id {
            get {
                return this.revision_idField;
            }
            set {
                this.revision_idField = value;
                this.RaisePropertyChanged("revision_id");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBRevisionWorkView : DBView {
        
        private int command_idField;
        
        private int stateField;
        
        private System.DateTime starttimeField;
        
        private System.DateTime endtimeField;
        
        private int durationField;
        
        private string logfileField;
        
        private string summaryField;
        
        private string hostField;
        
        private string laneField;
        
        private string authorField;
        
        private string revisionField;
        
        private string commandField;
        
        private bool nonfatalField;
        
        private bool alwaysexecuteField;
        
        private int sequenceField;
        
        private bool internalField;
        
        private int lane_idField;
        
        private int host_idField;
        
        private int revision_idField;
        
        private int revisionwork_stateField;
        
        private string workhostField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int command_id {
            get {
                return this.command_idField;
            }
            set {
                this.command_idField = value;
                this.RaisePropertyChanged("command_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
                this.RaisePropertyChanged("state");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public System.DateTime starttime {
            get {
                return this.starttimeField;
            }
            set {
                this.starttimeField = value;
                this.RaisePropertyChanged("starttime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime endtime {
            get {
                return this.endtimeField;
            }
            set {
                this.endtimeField = value;
                this.RaisePropertyChanged("endtime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int duration {
            get {
                return this.durationField;
            }
            set {
                this.durationField = value;
                this.RaisePropertyChanged("duration");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string logfile {
            get {
                return this.logfileField;
            }
            set {
                this.logfileField = value;
                this.RaisePropertyChanged("logfile");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string summary {
            get {
                return this.summaryField;
            }
            set {
                this.summaryField = value;
                this.RaisePropertyChanged("summary");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
                this.RaisePropertyChanged("host");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
                this.RaisePropertyChanged("lane");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string author {
            get {
                return this.authorField;
            }
            set {
                this.authorField = value;
                this.RaisePropertyChanged("author");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string revision {
            get {
                return this.revisionField;
            }
            set {
                this.revisionField = value;
                this.RaisePropertyChanged("revision");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string command {
            get {
                return this.commandField;
            }
            set {
                this.commandField = value;
                this.RaisePropertyChanged("command");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public bool nonfatal {
            get {
                return this.nonfatalField;
            }
            set {
                this.nonfatalField = value;
                this.RaisePropertyChanged("nonfatal");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public bool alwaysexecute {
            get {
                return this.alwaysexecuteField;
            }
            set {
                this.alwaysexecuteField = value;
                this.RaisePropertyChanged("alwaysexecute");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public int sequence {
            get {
                return this.sequenceField;
            }
            set {
                this.sequenceField = value;
                this.RaisePropertyChanged("sequence");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=15)]
        public bool @internal {
            get {
                return this.internalField;
            }
            set {
                this.internalField = value;
                this.RaisePropertyChanged("internal");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=16)]
        public int lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
                this.RaisePropertyChanged("lane_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=17)]
        public int host_id {
            get {
                return this.host_idField;
            }
            set {
                this.host_idField = value;
                this.RaisePropertyChanged("host_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=18)]
        public int revision_id {
            get {
                return this.revision_idField;
            }
            set {
                this.revision_idField = value;
                this.RaisePropertyChanged("revision_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=19)]
        public int revisionwork_state {
            get {
                return this.revisionwork_stateField;
            }
            set {
                this.revisionwork_stateField = value;
                this.RaisePropertyChanged("revisionwork_state");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=20)]
        public string workhost {
            get {
                return this.workhostField;
            }
            set {
                this.workhostField = value;
                this.RaisePropertyChanged("workhost");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBRevisionWorkView2 : DBView {
        
        private DBState stateField;
        
        private int lane_idField;
        
        private int host_idField;
        
        private int revision_idField;
        
        private int stateField1;
        
        private bool completedField;
        
        private string revisionField;
        
        private System.DateTime dateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DBState State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
                this.RaisePropertyChanged("State");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
                this.RaisePropertyChanged("lane_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int host_id {
            get {
                return this.host_idField;
            }
            set {
                this.host_idField = value;
                this.RaisePropertyChanged("host_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int revision_id {
            get {
                return this.revision_idField;
            }
            set {
                this.revision_idField = value;
                this.RaisePropertyChanged("revision_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int state {
            get {
                return this.stateField1;
            }
            set {
                this.stateField1 = value;
                this.RaisePropertyChanged("state");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public bool completed {
            get {
                return this.completedField;
            }
            set {
                this.completedField = value;
                this.RaisePropertyChanged("completed");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string revision {
            get {
                return this.revisionField;
            }
            set {
                this.revisionField = value;
                this.RaisePropertyChanged("revision");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public System.DateTime date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
                this.RaisePropertyChanged("date");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBWorkFileView : DBView {
        
        private int work_idField;
        
        private int file_idField;
        
        private string filenameField;
        
        private bool hiddenField;
        
        private string mimeField;
        
        private string compressed_mimeField;
        
        private string md5Field;
        
        private bool internalField;
        
        private System.Nullable<int> file_file_idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int work_id {
            get {
                return this.work_idField;
            }
            set {
                this.work_idField = value;
                this.RaisePropertyChanged("work_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int file_id {
            get {
                return this.file_idField;
            }
            set {
                this.file_idField = value;
                this.RaisePropertyChanged("file_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
                this.RaisePropertyChanged("filename");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool hidden {
            get {
                return this.hiddenField;
            }
            set {
                this.hiddenField = value;
                this.RaisePropertyChanged("hidden");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string mime {
            get {
                return this.mimeField;
            }
            set {
                this.mimeField = value;
                this.RaisePropertyChanged("mime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string compressed_mime {
            get {
                return this.compressed_mimeField;
            }
            set {
                this.compressed_mimeField = value;
                this.RaisePropertyChanged("compressed_mime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string md5 {
            get {
                return this.md5Field;
            }
            set {
                this.md5Field = value;
                this.RaisePropertyChanged("md5");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public bool @internal {
            get {
                return this.internalField;
            }
            set {
                this.internalField = value;
                this.RaisePropertyChanged("internal");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=8)]
        public System.Nullable<int> file_file_id {
            get {
                return this.file_file_idField;
            }
            set {
                this.file_file_idField = value;
                this.RaisePropertyChanged("file_file_id");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBWorkView2 : DBView {
        
        private string laneField;
        
        private int command_idField;
        
        private int stateField;
        
        private System.DateTime starttimeField;
        
        private System.DateTime endtimeField;
        
        private int durationField;
        
        private string logfileField;
        
        private string summaryField;
        
        private System.Nullable<int> workhost_idField;
        
        private bool nonfatalField;
        
        private bool alwaysexecuteField;
        
        private int sequenceField;
        
        private bool internalField;
        
        private string commandField;
        
        private int revisionwork_idField;
        
        private int masterhost_idField;
        
        private int lane_idField;
        
        private int revision_idField;
        
        private string masterhostField;
        
        private string workhostField;
        
        private string authorField;
        
        private string revisionField;
        
        private System.DateTime dateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
                this.RaisePropertyChanged("lane");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int command_id {
            get {
                return this.command_idField;
            }
            set {
                this.command_idField = value;
                this.RaisePropertyChanged("command_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
                this.RaisePropertyChanged("state");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime starttime {
            get {
                return this.starttimeField;
            }
            set {
                this.starttimeField = value;
                this.RaisePropertyChanged("starttime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public System.DateTime endtime {
            get {
                return this.endtimeField;
            }
            set {
                this.endtimeField = value;
                this.RaisePropertyChanged("endtime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int duration {
            get {
                return this.durationField;
            }
            set {
                this.durationField = value;
                this.RaisePropertyChanged("duration");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string logfile {
            get {
                return this.logfileField;
            }
            set {
                this.logfileField = value;
                this.RaisePropertyChanged("logfile");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string summary {
            get {
                return this.summaryField;
            }
            set {
                this.summaryField = value;
                this.RaisePropertyChanged("summary");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=8)]
        public System.Nullable<int> workhost_id {
            get {
                return this.workhost_idField;
            }
            set {
                this.workhost_idField = value;
                this.RaisePropertyChanged("workhost_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public bool nonfatal {
            get {
                return this.nonfatalField;
            }
            set {
                this.nonfatalField = value;
                this.RaisePropertyChanged("nonfatal");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public bool alwaysexecute {
            get {
                return this.alwaysexecuteField;
            }
            set {
                this.alwaysexecuteField = value;
                this.RaisePropertyChanged("alwaysexecute");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public int sequence {
            get {
                return this.sequenceField;
            }
            set {
                this.sequenceField = value;
                this.RaisePropertyChanged("sequence");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public bool @internal {
            get {
                return this.internalField;
            }
            set {
                this.internalField = value;
                this.RaisePropertyChanged("internal");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public string command {
            get {
                return this.commandField;
            }
            set {
                this.commandField = value;
                this.RaisePropertyChanged("command");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public int revisionwork_id {
            get {
                return this.revisionwork_idField;
            }
            set {
                this.revisionwork_idField = value;
                this.RaisePropertyChanged("revisionwork_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=15)]
        public int masterhost_id {
            get {
                return this.masterhost_idField;
            }
            set {
                this.masterhost_idField = value;
                this.RaisePropertyChanged("masterhost_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=16)]
        public int lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
                this.RaisePropertyChanged("lane_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=17)]
        public int revision_id {
            get {
                return this.revision_idField;
            }
            set {
                this.revision_idField = value;
                this.RaisePropertyChanged("revision_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=18)]
        public string masterhost {
            get {
                return this.masterhostField;
            }
            set {
                this.masterhostField = value;
                this.RaisePropertyChanged("masterhost");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=19)]
        public string workhost {
            get {
                return this.workhostField;
            }
            set {
                this.workhostField = value;
                this.RaisePropertyChanged("workhost");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=20)]
        public string author {
            get {
                return this.authorField;
            }
            set {
                this.authorField = value;
                this.RaisePropertyChanged("author");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=21)]
        public string revision {
            get {
                return this.revisionField;
            }
            set {
                this.revisionField = value;
                this.RaisePropertyChanged("revision");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=22)]
        public System.DateTime date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
                this.RaisePropertyChanged("date");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBHostLaneView : DBView {
        
        private int lane_idField;
        
        private int host_idField;
        
        private bool enabledField;
        
        private string laneField;
        
        private string hostField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
                this.RaisePropertyChanged("lane_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int host_id {
            get {
                return this.host_idField;
            }
            set {
                this.host_idField = value;
                this.RaisePropertyChanged("host_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
                this.RaisePropertyChanged("enabled");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
                this.RaisePropertyChanged("lane");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
                this.RaisePropertyChanged("host");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class DBLaneDeletionDirectiveView : DBView {
        
        private int lane_idField;
        
        private int file_deletion_directive_idField;
        
        private bool enabledField;
        
        private string nameField;
        
        private string filenameField;
        
        private int match_modeField;
        
        private int conditionField;
        
        private int xField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int lane_id {
            get {
                return this.lane_idField;
            }
            set {
                this.lane_idField = value;
                this.RaisePropertyChanged("lane_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int file_deletion_directive_id {
            get {
                return this.file_deletion_directive_idField;
            }
            set {
                this.file_deletion_directive_idField = value;
                this.RaisePropertyChanged("file_deletion_directive_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
                this.RaisePropertyChanged("enabled");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
                this.RaisePropertyChanged("filename");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int match_mode {
            get {
                return this.match_modeField;
            }
            set {
                this.match_modeField = value;
                this.RaisePropertyChanged("match_mode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public int condition {
            get {
                return this.conditionField;
            }
            set {
                this.conditionField = value;
                this.RaisePropertyChanged("condition");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public int x {
            get {
                return this.xField;
            }
            set {
                this.xField = value;
                this.RaisePropertyChanged("x");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class WebServiceException : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string messageField;
        
        private string stackTraceField;
        
        private string typeField;
        
        private string asStringField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
                this.RaisePropertyChanged("Message");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string StackTrace {
            get {
                return this.stackTraceField;
            }
            set {
                this.stackTraceField = value;
                this.RaisePropertyChanged("StackTrace");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
                this.RaisePropertyChanged("Type");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string AsString {
            get {
                return this.asStringField;
            }
            set {
                this.asStringField = value;
                this.RaisePropertyChanged("AsString");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetAdminInfoResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetReleasesResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetNotificationsResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetIdentitiesResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetTestResultsResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetBuildInfoResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetBuildBotStatusResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ReportBuildBotStatusResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetRevisionWorkForLaneResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ReportBuildStateResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetFilesForWorkResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetUserResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetUsersResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetViewLaneFileHistoryDataResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetLaneFileForEditResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetViewWorkTableDataResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetViewTableDataResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetCommandsResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetRevisionsResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetHostsResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetHostLanesResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetLanesResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FrontPageResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetViewLaneDataResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FindLaneResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FindRevisionResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FindHostResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetLaneForEditResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetHostForEditResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetWorkHostHistoryResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GetLaneResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LoginResponse))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class WebServiceResponse : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string[] userRolesField;
        
        private string userNameField;
        
        private WebServiceException exceptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public string[] UserRoles {
            get {
                return this.userRolesField;
            }
            set {
                this.userRolesField = value;
                this.RaisePropertyChanged("UserRoles");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
                this.RaisePropertyChanged("UserName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public WebServiceException Exception {
            get {
                return this.exceptionField;
            }
            set {
                this.exceptionField = value;
                this.RaisePropertyChanged("Exception");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetAdminInfoResponse : WebServiceResponse {
        
        private bool isSchedulerExecutingField;
        
        private bool isDeletionDirectivesExecutingField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool IsSchedulerExecuting {
            get {
                return this.isSchedulerExecutingField;
            }
            set {
                this.isSchedulerExecutingField = value;
                this.RaisePropertyChanged("IsSchedulerExecuting");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool IsDeletionDirectivesExecuting {
            get {
                return this.isDeletionDirectivesExecutingField;
            }
            set {
                this.isDeletionDirectivesExecutingField = value;
                this.RaisePropertyChanged("IsDeletionDirectivesExecuting");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetReleasesResponse : WebServiceResponse {
        
        private DBRelease[] releasesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public DBRelease[] Releases {
            get {
                return this.releasesField;
            }
            set {
                this.releasesField = value;
                this.RaisePropertyChanged("Releases");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetNotificationsResponse : WebServiceResponse {
        
        private DBNotification[] notificationsField;
        
        private DBIrcIdentity[] ircIdentitiesField;
        
        private DBEmailIdentity[] emailIdentitiesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public DBNotification[] Notifications {
            get {
                return this.notificationsField;
            }
            set {
                this.notificationsField = value;
                this.RaisePropertyChanged("Notifications");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public DBIrcIdentity[] IrcIdentities {
            get {
                return this.ircIdentitiesField;
            }
            set {
                this.ircIdentitiesField = value;
                this.RaisePropertyChanged("IrcIdentities");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public DBEmailIdentity[] EmailIdentities {
            get {
                return this.emailIdentitiesField;
            }
            set {
                this.emailIdentitiesField = value;
                this.RaisePropertyChanged("EmailIdentities");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetIdentitiesResponse : WebServiceResponse {
        
        private DBIrcIdentity[] ircIdentitiesField;
        
        private DBEmailIdentity[] emailIdentitiesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public DBIrcIdentity[] IrcIdentities {
            get {
                return this.ircIdentitiesField;
            }
            set {
                this.ircIdentitiesField = value;
                this.RaisePropertyChanged("IrcIdentities");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public DBEmailIdentity[] EmailIdentities {
            get {
                return this.emailIdentitiesField;
            }
            set {
                this.emailIdentitiesField = value;
                this.RaisePropertyChanged("EmailIdentities");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetTestResultsResponse : WebServiceResponse {
        
        private DBTestResult[] resultsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public DBTestResult[] Results {
            get {
                return this.resultsField;
            }
            set {
                this.resultsField = value;
                this.RaisePropertyChanged("Results");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetBuildInfoResponse : WebServiceResponse {
        
        private DBHost hostField;
        
        private BuildInfoEntry[][] workField;
        
        private DBMasterHost[] masterHostsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DBHost Host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
                this.RaisePropertyChanged("Host");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfBuildInfoEntry")]
        [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public BuildInfoEntry[][] Work {
            get {
                return this.workField;
            }
            set {
                this.workField = value;
                this.RaisePropertyChanged("Work");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public DBMasterHost[] MasterHosts {
            get {
                return this.masterHostsField;
            }
            set {
                this.masterHostsField = value;
                this.RaisePropertyChanged("MasterHosts");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetBuildBotStatusResponse : WebServiceResponse {
        
        private DBBuildBotStatus[] statusField;
        
        private DBHost[] hostsField;
        
        private DBRelease[] releasesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public DBBuildBotStatus[] Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
                this.RaisePropertyChanged("Status");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public DBHost[] Hosts {
            get {
                return this.hostsField;
            }
            set {
                this.hostsField = value;
                this.RaisePropertyChanged("Hosts");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public DBRelease[] Releases {
            get {
                return this.releasesField;
            }
            set {
                this.releasesField = value;
                this.RaisePropertyChanged("Releases");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class ReportBuildBotStatusResponse : WebServiceResponse {
        
        private string configuredVersionField;
        
        private string configuredRevisionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfiguredVersion {
            get {
                return this.configuredVersionField;
            }
            set {
                this.configuredVersionField = value;
                this.RaisePropertyChanged("ConfiguredVersion");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ConfiguredRevision {
            get {
                return this.configuredRevisionField;
            }
            set {
                this.configuredRevisionField = value;
                this.RaisePropertyChanged("ConfiguredRevision");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetRevisionWorkForLaneResponse : WebServiceResponse {
        
        private DBRevisionWork[] revisionWorkField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public DBRevisionWork[] RevisionWork {
            get {
                return this.revisionWorkField;
            }
            set {
                this.revisionWorkField = value;
                this.RaisePropertyChanged("RevisionWork");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class ReportBuildStateResponse : WebServiceResponse {
        
        private DBWork workField;
        
        private bool revisionWorkCompletedField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DBWork Work {
            get {
                return this.workField;
            }
            set {
                this.workField = value;
                this.RaisePropertyChanged("Work");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool RevisionWorkCompleted {
            get {
                return this.revisionWorkCompletedField;
            }
            set {
                this.revisionWorkCompletedField = value;
                this.RaisePropertyChanged("RevisionWorkCompleted");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetFilesForWorkResponse : WebServiceResponse {
        
        private int[] commandsField;
        
        private DBFile[][] filesField;
        
        private int[][] workFileIdsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public int[] Commands {
            get {
                return this.commandsField;
            }
            set {
                this.commandsField = value;
                this.RaisePropertyChanged("Commands");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfDBFile")]
        [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public DBFile[][] Files {
            get {
                return this.filesField;
            }
            set {
                this.filesField = value;
                this.RaisePropertyChanged("Files");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfInt")]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false, NestingLevel=1)]
        public int[][] WorkFileIds {
            get {
                return this.workFileIdsField;
            }
            set {
                this.workFileIdsField = value;
                this.RaisePropertyChanged("WorkFileIds");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetUserResponse : WebServiceResponse {
        
        private DBPerson userField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DBPerson User {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
                this.RaisePropertyChanged("User");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetUsersResponse : WebServiceResponse {
        
        private DBPerson[] usersField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public DBPerson[] Users {
            get {
                return this.usersField;
            }
            set {
                this.usersField = value;
                this.RaisePropertyChanged("Users");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetViewLaneFileHistoryDataResponse : WebServiceResponse {
        
        private DBLanefile[] lanefilesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public DBLanefile[] Lanefiles {
            get {
                return this.lanefilesField;
            }
            set {
                this.lanefilesField = value;
                this.RaisePropertyChanged("Lanefiles");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetLaneFileForEditResponse : WebServiceResponse {
        
        private DBLanefile lanefileField;
        
        private DBLane[] lanesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DBLanefile Lanefile {
            get {
                return this.lanefileField;
            }
            set {
                this.lanefileField = value;
                this.RaisePropertyChanged("Lanefile");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public DBLane[] Lanes {
            get {
                return this.lanesField;
            }
            set {
                this.lanesField = value;
                this.RaisePropertyChanged("Lanes");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetViewWorkTableDataResponse : WebServiceResponse {
        
        private DBLane laneField;
        
        private DBHost hostField;
        
        private DBCommand commandField;
        
        private DBWorkView2[] workViewsField;
        
        private DBWorkFileView[][] workFileViewsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DBLane Lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
                this.RaisePropertyChanged("Lane");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DBHost Host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
                this.RaisePropertyChanged("Host");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public DBCommand Command {
            get {
                return this.commandField;
            }
            set {
                this.commandField = value;
                this.RaisePropertyChanged("Command");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        public DBWorkView2[] WorkViews {
            get {
                return this.workViewsField;
            }
            set {
                this.workViewsField = value;
                this.RaisePropertyChanged("WorkViews");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=4)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfDBWorkFileView")]
        [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public DBWorkFileView[][] WorkFileViews {
            get {
                return this.workFileViewsField;
            }
            set {
                this.workFileViewsField = value;
                this.RaisePropertyChanged("WorkFileViews");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetViewTableDataResponse : WebServiceResponse {
        
        private int pageField;
        
        private int pageSizeField;
        
        private int countField;
        
        private DBLane laneField;
        
        private DBHost hostField;
        
        private DBRevisionWorkView[] revisionWorkViewsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Page {
            get {
                return this.pageField;
            }
            set {
                this.pageField = value;
                this.RaisePropertyChanged("Page");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int PageSize {
            get {
                return this.pageSizeField;
            }
            set {
                this.pageSizeField = value;
                this.RaisePropertyChanged("PageSize");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
                this.RaisePropertyChanged("Count");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public DBLane Lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
                this.RaisePropertyChanged("Lane");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public DBHost Host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
                this.RaisePropertyChanged("Host");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=5)]
        public DBRevisionWorkView[] RevisionWorkViews {
            get {
                return this.revisionWorkViewsField;
            }
            set {
                this.revisionWorkViewsField = value;
                this.RaisePropertyChanged("RevisionWorkViews");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetCommandsResponse : WebServiceResponse {
        
        private DBCommand[] commandsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public DBCommand[] Commands {
            get {
                return this.commandsField;
            }
            set {
                this.commandsField = value;
                this.RaisePropertyChanged("Commands");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetRevisionsResponse : WebServiceResponse {
        
        private DBRevision[] revisionsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public DBRevision[] Revisions {
            get {
                return this.revisionsField;
            }
            set {
                this.revisionsField = value;
                this.RaisePropertyChanged("Revisions");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetHostsResponse : WebServiceResponse {
        
        private DBHost[] hostsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public DBHost[] Hosts {
            get {
                return this.hostsField;
            }
            set {
                this.hostsField = value;
                this.RaisePropertyChanged("Hosts");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetHostLanesResponse : WebServiceResponse {
        
        private DBHostLane[] hostLanesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public DBHostLane[] HostLanes {
            get {
                return this.hostLanesField;
            }
            set {
                this.hostLanesField = value;
                this.RaisePropertyChanged("HostLanes");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetLanesResponse : WebServiceResponse {
        
        private DBLane[] lanesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public DBLane[] Lanes {
            get {
                return this.lanesField;
            }
            set {
                this.lanesField = value;
                this.RaisePropertyChanged("Lanes");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class FrontPageResponse : WebServiceResponse {
        
        private DBLane laneField;
        
        private DBLane[] selectedLanesField;
        
        private DBLane[] lanesField;
        
        private DBHost[] hostsField;
        
        private DBHostLane[] hostLanesField;
        
        private int[] revisionWorkHostLaneRelationField;
        
        private DBRevisionWorkView2[][] revisionWorkViewsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DBLane Lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
                this.RaisePropertyChanged("Lane");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public DBLane[] SelectedLanes {
            get {
                return this.selectedLanesField;
            }
            set {
                this.selectedLanesField = value;
                this.RaisePropertyChanged("SelectedLanes");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public DBLane[] Lanes {
            get {
                return this.lanesField;
            }
            set {
                this.lanesField = value;
                this.RaisePropertyChanged("Lanes");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        public DBHost[] Hosts {
            get {
                return this.hostsField;
            }
            set {
                this.hostsField = value;
                this.RaisePropertyChanged("Hosts");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=4)]
        public DBHostLane[] HostLanes {
            get {
                return this.hostLanesField;
            }
            set {
                this.hostLanesField = value;
                this.RaisePropertyChanged("HostLanes");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=5)]
        public int[] RevisionWorkHostLaneRelation {
            get {
                return this.revisionWorkHostLaneRelationField;
            }
            set {
                this.revisionWorkHostLaneRelationField = value;
                this.RaisePropertyChanged("RevisionWorkHostLaneRelation");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=6)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfDBRevisionWorkView2")]
        [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public DBRevisionWorkView2[][] RevisionWorkViews {
            get {
                return this.revisionWorkViewsField;
            }
            set {
                this.revisionWorkViewsField = value;
                this.RaisePropertyChanged("RevisionWorkViews");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetViewLaneDataResponse : WebServiceResponse {
        
        private System.DateTime nowField;
        
        private DBLane laneField;
        
        private DBHost hostField;
        
        private DBHost workHostField;
        
        private DBRevision revisionField;
        
        private DBRevisionWork revisionWorkField;
        
        private DBWorkView2[] workViewsField;
        
        private DBWorkFileView[][] workFileViewsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public System.DateTime Now {
            get {
                return this.nowField;
            }
            set {
                this.nowField = value;
                this.RaisePropertyChanged("Now");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DBLane Lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
                this.RaisePropertyChanged("Lane");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public DBHost Host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
                this.RaisePropertyChanged("Host");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public DBHost WorkHost {
            get {
                return this.workHostField;
            }
            set {
                this.workHostField = value;
                this.RaisePropertyChanged("WorkHost");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public DBRevision Revision {
            get {
                return this.revisionField;
            }
            set {
                this.revisionField = value;
                this.RaisePropertyChanged("Revision");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public DBRevisionWork RevisionWork {
            get {
                return this.revisionWorkField;
            }
            set {
                this.revisionWorkField = value;
                this.RaisePropertyChanged("RevisionWork");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=6)]
        public DBWorkView2[] WorkViews {
            get {
                return this.workViewsField;
            }
            set {
                this.workViewsField = value;
                this.RaisePropertyChanged("WorkViews");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=7)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfDBWorkFileView")]
        [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public DBWorkFileView[][] WorkFileViews {
            get {
                return this.workFileViewsField;
            }
            set {
                this.workFileViewsField = value;
                this.RaisePropertyChanged("WorkFileViews");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class FindLaneResponse : WebServiceResponse {
        
        private DBLane laneField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DBLane lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
                this.RaisePropertyChanged("lane");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class FindRevisionResponse : WebServiceResponse {
        
        private DBRevision revisionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DBRevision Revision {
            get {
                return this.revisionField;
            }
            set {
                this.revisionField = value;
                this.RaisePropertyChanged("Revision");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class FindHostResponse : WebServiceResponse {
        
        private DBHost hostField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DBHost Host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
                this.RaisePropertyChanged("Host");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetLaneForEditResponse : WebServiceResponse {
        
        private DBLane laneField;
        
        private DBLanefile[] filesField;
        
        private DBLanefile[] existingFilesField;
        
        private DBCommand[] commandsField;
        
        private DBHostLaneView[] hostLaneViewsField;
        
        private DBHost[] hostsField;
        
        private DBLane[] lanesField;
        
        private DBLaneDependency[] dependenciesField;
        
        private DBLaneDeletionDirectiveView[] laneDeletionDirectivesField;
        
        private DBFileDeletionDirective[] fileDeletionDirectivesField;
        
        private DBEnvironmentVariable[] variablesField;
        
        private DBNotification[] notificationsField;
        
        private DBLaneNotification[] laneNotificationsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DBLane Lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
                this.RaisePropertyChanged("Lane");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public DBLanefile[] Files {
            get {
                return this.filesField;
            }
            set {
                this.filesField = value;
                this.RaisePropertyChanged("Files");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public DBLanefile[] ExistingFiles {
            get {
                return this.existingFilesField;
            }
            set {
                this.existingFilesField = value;
                this.RaisePropertyChanged("ExistingFiles");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        public DBCommand[] Commands {
            get {
                return this.commandsField;
            }
            set {
                this.commandsField = value;
                this.RaisePropertyChanged("Commands");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=4)]
        public DBHostLaneView[] HostLaneViews {
            get {
                return this.hostLaneViewsField;
            }
            set {
                this.hostLaneViewsField = value;
                this.RaisePropertyChanged("HostLaneViews");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=5)]
        public DBHost[] Hosts {
            get {
                return this.hostsField;
            }
            set {
                this.hostsField = value;
                this.RaisePropertyChanged("Hosts");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=6)]
        public DBLane[] Lanes {
            get {
                return this.lanesField;
            }
            set {
                this.lanesField = value;
                this.RaisePropertyChanged("Lanes");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=7)]
        public DBLaneDependency[] Dependencies {
            get {
                return this.dependenciesField;
            }
            set {
                this.dependenciesField = value;
                this.RaisePropertyChanged("Dependencies");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=8)]
        public DBLaneDeletionDirectiveView[] LaneDeletionDirectives {
            get {
                return this.laneDeletionDirectivesField;
            }
            set {
                this.laneDeletionDirectivesField = value;
                this.RaisePropertyChanged("LaneDeletionDirectives");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=9)]
        public DBFileDeletionDirective[] FileDeletionDirectives {
            get {
                return this.fileDeletionDirectivesField;
            }
            set {
                this.fileDeletionDirectivesField = value;
                this.RaisePropertyChanged("FileDeletionDirectives");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=10)]
        public DBEnvironmentVariable[] Variables {
            get {
                return this.variablesField;
            }
            set {
                this.variablesField = value;
                this.RaisePropertyChanged("Variables");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=11)]
        public DBNotification[] Notifications {
            get {
                return this.notificationsField;
            }
            set {
                this.notificationsField = value;
                this.RaisePropertyChanged("Notifications");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=12)]
        public DBLaneNotification[] LaneNotifications {
            get {
                return this.laneNotificationsField;
            }
            set {
                this.laneNotificationsField = value;
                this.RaisePropertyChanged("LaneNotifications");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetHostForEditResponse : WebServiceResponse {
        
        private DBHost hostField;
        
        private DBPerson personField;
        
        private DBHostLaneView[] hostLaneViewsField;
        
        private DBLane[] lanesField;
        
        private DBEnvironmentVariable[] variablesField;
        
        private DBHost[] masterHostsField;
        
        private DBHost[] slaveHostsField;
        
        private DBHost[] hostsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DBHost Host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
                this.RaisePropertyChanged("Host");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DBPerson Person {
            get {
                return this.personField;
            }
            set {
                this.personField = value;
                this.RaisePropertyChanged("Person");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public DBHostLaneView[] HostLaneViews {
            get {
                return this.hostLaneViewsField;
            }
            set {
                this.hostLaneViewsField = value;
                this.RaisePropertyChanged("HostLaneViews");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        public DBLane[] Lanes {
            get {
                return this.lanesField;
            }
            set {
                this.lanesField = value;
                this.RaisePropertyChanged("Lanes");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=4)]
        public DBEnvironmentVariable[] Variables {
            get {
                return this.variablesField;
            }
            set {
                this.variablesField = value;
                this.RaisePropertyChanged("Variables");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=5)]
        public DBHost[] MasterHosts {
            get {
                return this.masterHostsField;
            }
            set {
                this.masterHostsField = value;
                this.RaisePropertyChanged("MasterHosts");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=6)]
        public DBHost[] SlaveHosts {
            get {
                return this.slaveHostsField;
            }
            set {
                this.slaveHostsField = value;
                this.RaisePropertyChanged("SlaveHosts");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=7)]
        public DBHost[] Hosts {
            get {
                return this.hostsField;
            }
            set {
                this.hostsField = value;
                this.RaisePropertyChanged("Hosts");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetWorkHostHistoryResponse : WebServiceResponse {
        
        private DBHost hostField;
        
        private DBRevisionWork[] revisionWorksField;
        
        private string[] lanesField;
        
        private string[] revisionsField;
        
        private System.DateTime[] startTimeField;
        
        private string[] hostsField;
        
        private int[] durationsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DBHost Host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
                this.RaisePropertyChanged("Host");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public DBRevisionWork[] RevisionWorks {
            get {
                return this.revisionWorksField;
            }
            set {
                this.revisionWorksField = value;
                this.RaisePropertyChanged("RevisionWorks");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public string[] Lanes {
            get {
                return this.lanesField;
            }
            set {
                this.lanesField = value;
                this.RaisePropertyChanged("Lanes");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        public string[] Revisions {
            get {
                return this.revisionsField;
            }
            set {
                this.revisionsField = value;
                this.RaisePropertyChanged("Revisions");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=4)]
        public System.DateTime[] StartTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
                this.RaisePropertyChanged("StartTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=5)]
        public string[] Hosts {
            get {
                return this.hostsField;
            }
            set {
                this.hostsField = value;
                this.RaisePropertyChanged("Hosts");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=6)]
        public int[] Durations {
            get {
                return this.durationsField;
            }
            set {
                this.durationsField = value;
                this.RaisePropertyChanged("Durations");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class GetLaneResponse : WebServiceResponse {
        
        private DBLane laneField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DBLane lane {
            get {
                return this.laneField;
            }
            set {
                this.laneField = value;
                this.RaisePropertyChanged("lane");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public partial class LoginResponse : WebServiceResponse {
        
        private string userField;
        
        private string cookieField;
        
        private string fullNameField;
        
        private int idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string User {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
                this.RaisePropertyChanged("User");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Cookie {
            get {
                return this.cookieField;
            }
            set {
                this.cookieField = value;
                this.RaisePropertyChanged("Cookie");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string FullName {
            get {
                return this.fullNameField;
            }
            set {
                this.fullNameField = value;
                this.RaisePropertyChanged("FullName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("ID");
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddDependencyToLane", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class AddDependencyToLaneRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=1)]
        public int lane_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=2)]
        public int dependent_lane_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> host_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=4)]
        public MoonlightDrtViewer.MonkeyWrench.DBLaneDependencyCondition condition;
        
        public AddDependencyToLaneRequest() {
        }
        
        public AddDependencyToLaneRequest(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int dependent_lane_id, System.Nullable<int> host_id, MoonlightDrtViewer.MonkeyWrench.DBLaneDependencyCondition condition) {
            this.login = login;
            this.lane_id = lane_id;
            this.dependent_lane_id = dependent_lane_id;
            this.host_id = host_id;
            this.condition = condition;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddDependencyToLaneResponse", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class AddDependencyToLaneResponse {
        
        public AddDependencyToLaneResponse() {
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public enum DBMatchMode {
        
        /// <remarks/>
        ShellGlobs,
        
        /// <remarks/>
        RegExp,
        
        /// <remarks/>
        Exact,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://monkeywrench.novell.com/")]
    public enum DBDeleteCondition {
        
        /// <remarks/>
        Never,
        
        /// <remarks/>
        AfterXDays,
        
        /// <remarks/>
        AfterXBuiltRevisions,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetWorkHostHistory", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class GetWorkHostHistoryRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> host_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=2)]
        public string host;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=3)]
        public int limit;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=4)]
        public int offset;
        
        public GetWorkHostHistoryRequest() {
        }
        
        public GetWorkHostHistoryRequest(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> host_id, string host, int limit, int offset) {
            this.login = login;
            this.host_id = host_id;
            this.host = host;
            this.limit = limit;
            this.offset = offset;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetWorkHostHistoryResponse", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class GetWorkHostHistoryResponse1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryResponse GetWorkHostHistoryResult;
        
        public GetWorkHostHistoryResponse1() {
        }
        
        public GetWorkHostHistoryResponse1(MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryResponse GetWorkHostHistoryResult) {
            this.GetWorkHostHistoryResult = GetWorkHostHistoryResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetHostForEdit", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class GetHostForEditRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> host_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=2)]
        public string host;
        
        public GetHostForEditRequest() {
        }
        
        public GetHostForEditRequest(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> host_id, string host) {
            this.login = login;
            this.host_id = host_id;
            this.host = host;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetHostForEditResponse", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class GetHostForEditResponse1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.GetHostForEditResponse GetHostForEditResult;
        
        public GetHostForEditResponse1() {
        }
        
        public GetHostForEditResponse1(MoonlightDrtViewer.MonkeyWrench.GetHostForEditResponse GetHostForEditResult) {
            this.GetHostForEditResult = GetHostForEditResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindHost", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class FindHostRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> host_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=2)]
        public string host;
        
        public FindHostRequest() {
        }
        
        public FindHostRequest(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> host_id, string host) {
            this.login = login;
            this.host_id = host_id;
            this.host = host;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindHostResponse", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class FindHostResponse1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.FindHostResponse FindHostResult;
        
        public FindHostResponse1() {
        }
        
        public FindHostResponse1(MoonlightDrtViewer.MonkeyWrench.FindHostResponse FindHostResult) {
            this.FindHostResult = FindHostResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindRevisionForLane", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class FindRevisionForLaneRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> revision_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=2)]
        public string revision;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> lane_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=4)]
        public string lane;
        
        public FindRevisionForLaneRequest() {
        }
        
        public FindRevisionForLaneRequest(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> revision_id, string revision, System.Nullable<int> lane_id, string lane) {
            this.login = login;
            this.revision_id = revision_id;
            this.revision = revision;
            this.lane_id = lane_id;
            this.lane = lane;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindRevisionForLaneResponse", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class FindRevisionForLaneResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse FindRevisionForLaneResult;
        
        public FindRevisionForLaneResponse() {
        }
        
        public FindRevisionForLaneResponse(MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse FindRevisionForLaneResult) {
            this.FindRevisionForLaneResult = FindRevisionForLaneResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindRevision", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class FindRevisionRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> revision_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=2)]
        public string revision;
        
        public FindRevisionRequest() {
        }
        
        public FindRevisionRequest(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> revision_id, string revision) {
            this.login = login;
            this.revision_id = revision_id;
            this.revision = revision;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindRevisionResponse", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class FindRevisionResponse1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse FindRevisionResult;
        
        public FindRevisionResponse1() {
        }
        
        public FindRevisionResponse1(MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse FindRevisionResult) {
            this.FindRevisionResult = FindRevisionResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindLane", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class FindLaneRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> lane_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=2)]
        public string lane;
        
        public FindLaneRequest() {
        }
        
        public FindLaneRequest(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane) {
            this.login = login;
            this.lane_id = lane_id;
            this.lane = lane;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindLaneResponse", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class FindLaneResponse1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.FindLaneResponse FindLaneResult;
        
        public FindLaneResponse1() {
        }
        
        public FindLaneResponse1(MoonlightDrtViewer.MonkeyWrench.FindLaneResponse FindLaneResult) {
            this.FindLaneResult = FindLaneResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetViewLaneData", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class GetViewLaneDataRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> lane_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=2)]
        public string lane;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> host_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=4)]
        public string host;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> revision_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=6)]
        public string revision;
        
        public GetViewLaneDataRequest() {
        }
        
        public GetViewLaneDataRequest(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> revision_id, string revision) {
            this.login = login;
            this.lane_id = lane_id;
            this.lane = lane;
            this.host_id = host_id;
            this.host = host;
            this.revision_id = revision_id;
            this.revision = revision;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetViewLaneDataResponse", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class GetViewLaneDataResponse1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse GetViewLaneDataResult;
        
        public GetViewLaneDataResponse1() {
        }
        
        public GetViewLaneDataResponse1(MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse GetViewLaneDataResult) {
            this.GetViewLaneDataResult = GetViewLaneDataResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetViewLaneData2", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class GetViewLaneData2Request {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> lane_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=2)]
        public string lane;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> host_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=4)]
        public string host;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> revision_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=6)]
        public string revision;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=7)]
        public bool include_hidden_files;
        
        public GetViewLaneData2Request() {
        }
        
        public GetViewLaneData2Request(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> revision_id, string revision, bool include_hidden_files) {
            this.login = login;
            this.lane_id = lane_id;
            this.lane = lane;
            this.host_id = host_id;
            this.host = host;
            this.revision_id = revision_id;
            this.revision = revision;
            this.include_hidden_files = include_hidden_files;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetViewLaneData2Response", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class GetViewLaneData2Response {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse GetViewLaneData2Result;
        
        public GetViewLaneData2Response() {
        }
        
        public GetViewLaneData2Response(MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse GetViewLaneData2Result) {
            this.GetViewLaneData2Result = GetViewLaneData2Result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFrontPageData", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class GetFrontPageDataRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=1)]
        public int limit;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=2)]
        public string lane;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> lane_id;
        
        public GetFrontPageDataRequest() {
        }
        
        public GetFrontPageDataRequest(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int limit, string lane, System.Nullable<int> lane_id) {
            this.login = login;
            this.limit = limit;
            this.lane = lane;
            this.lane_id = lane_id;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFrontPageDataResponse", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class GetFrontPageDataResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.FrontPageResponse GetFrontPageDataResult;
        
        public GetFrontPageDataResponse() {
        }
        
        public GetFrontPageDataResponse(MoonlightDrtViewer.MonkeyWrench.FrontPageResponse GetFrontPageDataResult) {
            this.GetFrontPageDataResult = GetFrontPageDataResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRevisions", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class GetRevisionsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> lane_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=2)]
        public string lane;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=3)]
        public int limit;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=4)]
        public int offset;
        
        public GetRevisionsRequest() {
        }
        
        public GetRevisionsRequest(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, int limit, int offset) {
            this.login = login;
            this.lane_id = lane_id;
            this.lane = lane;
            this.limit = limit;
            this.offset = offset;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRevisionsResponse", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class GetRevisionsResponse1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.GetRevisionsResponse GetRevisionsResult;
        
        public GetRevisionsResponse1() {
        }
        
        public GetRevisionsResponse1(MoonlightDrtViewer.MonkeyWrench.GetRevisionsResponse GetRevisionsResult) {
            this.GetRevisionsResult = GetRevisionsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetViewTableData", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class GetViewTableDataRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> lane_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=2)]
        public string lane;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> host_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=4)]
        public string host;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=5)]
        public int page;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=6)]
        public int page_size;
        
        public GetViewTableDataRequest() {
        }
        
        public GetViewTableDataRequest(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, int page, int page_size) {
            this.login = login;
            this.lane_id = lane_id;
            this.lane = lane;
            this.host_id = host_id;
            this.host = host;
            this.page = page;
            this.page_size = page_size;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetViewTableDataResponse", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class GetViewTableDataResponse1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.GetViewTableDataResponse GetViewTableDataResult;
        
        public GetViewTableDataResponse1() {
        }
        
        public GetViewTableDataResponse1(MoonlightDrtViewer.MonkeyWrench.GetViewTableDataResponse GetViewTableDataResult) {
            this.GetViewTableDataResult = GetViewTableDataResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetViewWorkTableData", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class GetViewWorkTableDataRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> lane_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=2)]
        public string lane;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> host_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=4)]
        public string host;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> command_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=6)]
        public string command;
        
        public GetViewWorkTableDataRequest() {
        }
        
        public GetViewWorkTableDataRequest(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> command_id, string command) {
            this.login = login;
            this.lane_id = lane_id;
            this.lane = lane;
            this.host_id = host_id;
            this.host = host;
            this.command_id = command_id;
            this.command = command;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetViewWorkTableDataResponse", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class GetViewWorkTableDataResponse1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse GetViewWorkTableDataResult;
        
        public GetViewWorkTableDataResponse1() {
        }
        
        public GetViewWorkTableDataResponse1(MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse GetViewWorkTableDataResult) {
            this.GetViewWorkTableDataResult = GetViewWorkTableDataResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetViewWorkTableData2", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class GetViewWorkTableData2Request {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> lane_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=2)]
        public string lane;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> host_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=4)]
        public string host;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> command_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=6)]
        public string command;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=7)]
        public int offset;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=8)]
        public int limit;
        
        public GetViewWorkTableData2Request() {
        }
        
        public GetViewWorkTableData2Request(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> command_id, string command, int offset, int limit) {
            this.login = login;
            this.lane_id = lane_id;
            this.lane = lane;
            this.host_id = host_id;
            this.host = host;
            this.command_id = command_id;
            this.command = command;
            this.offset = offset;
            this.limit = limit;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetViewWorkTableData2Response", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class GetViewWorkTableData2Response {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse GetViewWorkTableData2Result;
        
        public GetViewWorkTableData2Response() {
        }
        
        public GetViewWorkTableData2Response(MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse GetViewWorkTableData2Result) {
            this.GetViewWorkTableData2Result = GetViewWorkTableData2Result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddUserEmail", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class AddUserEmailRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=2)]
        public string username;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=3)]
        public string email;
        
        public AddUserEmailRequest() {
        }
        
        public AddUserEmailRequest(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> id, string username, string email) {
            this.login = login;
            this.id = id;
            this.username = username;
            this.email = email;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddUserEmailResponse", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class AddUserEmailResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse AddUserEmailResult;
        
        public AddUserEmailResponse() {
        }
        
        public AddUserEmailResponse(MoonlightDrtViewer.MonkeyWrench.WebServiceResponse AddUserEmailResult) {
            this.AddUserEmailResult = AddUserEmailResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoveUserEmail", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class RemoveUserEmailRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=2)]
        public string username;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=3)]
        public string email;
        
        public RemoveUserEmailRequest() {
        }
        
        public RemoveUserEmailRequest(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> id, string username, string email) {
            this.login = login;
            this.id = id;
            this.username = username;
            this.email = email;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoveUserEmailResponse", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class RemoveUserEmailResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse RemoveUserEmailResult;
        
        public RemoveUserEmailResponse() {
        }
        
        public RemoveUserEmailResponse(MoonlightDrtViewer.MonkeyWrench.WebServiceResponse RemoveUserEmailResult) {
            this.RemoveUserEmailResult = RemoveUserEmailResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUser", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class GetUserRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=2)]
        public string username;
        
        public GetUserRequest() {
        }
        
        public GetUserRequest(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> id, string username) {
            this.login = login;
            this.id = id;
            this.username = username;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUserResponse", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class GetUserResponse1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.GetUserResponse GetUserResult;
        
        public GetUserResponse1() {
        }
        
        public GetUserResponse1(MoonlightDrtViewer.MonkeyWrench.GetUserResponse GetUserResult) {
            this.GetUserResult = GetUserResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddEnvironmentVariable", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class AddEnvironmentVariableRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> lane_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> host_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=3)]
        public string name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=4)]
        public string value;
        
        public AddEnvironmentVariableRequest() {
        }
        
        public AddEnvironmentVariableRequest(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, System.Nullable<int> host_id, string name, string value) {
            this.login = login;
            this.lane_id = lane_id;
            this.host_id = host_id;
            this.name = name;
            this.value = value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddEnvironmentVariableResponse", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class AddEnvironmentVariableResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public int AddEnvironmentVariableResult;
        
        public AddEnvironmentVariableResponse() {
        }
        
        public AddEnvironmentVariableResponse(int AddEnvironmentVariableResult) {
            this.AddEnvironmentVariableResult = AddEnvironmentVariableResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadCompressedFile", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class UploadCompressedFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=1)]
        public MoonlightDrtViewer.MonkeyWrench.DBWork work;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=2)]
        public string filename;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] contents;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=4)]
        public bool hidden;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=5)]
        public string compressed_mime;
        
        public UploadCompressedFileRequest() {
        }
        
        public UploadCompressedFileRequest(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, string filename, byte[] contents, bool hidden, string compressed_mime) {
            this.login = login;
            this.work = work;
            this.filename = filename;
            this.contents = contents;
            this.hidden = hidden;
            this.compressed_mime = compressed_mime;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadCompressedFileResponse", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class UploadCompressedFileResponse {
        
        public UploadCompressedFileResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFile", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class UploadFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=1)]
        public MoonlightDrtViewer.MonkeyWrench.DBWork work;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=2)]
        public string filename;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] contents;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=4)]
        public bool hidden;
        
        public UploadFileRequest() {
        }
        
        public UploadFileRequest(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, string filename, byte[] contents, bool hidden) {
            this.login = login;
            this.work = work;
            this.filename = filename;
            this.contents = contents;
            this.hidden = hidden;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileResponse", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class UploadFileResponse {
        
        public UploadFileResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindLatestWorkFileId", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class FindLatestWorkFileIdRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> lane_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=2)]
        public string lane;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=3)]
        public string filename;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=4)]
        public bool completed;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=5)]
        public bool successful;
        
        public FindLatestWorkFileIdRequest() {
        }
        
        public FindLatestWorkFileIdRequest(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, string filename, bool completed, bool successful) {
            this.login = login;
            this.lane_id = lane_id;
            this.lane = lane;
            this.filename = filename;
            this.completed = completed;
            this.successful = successful;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindLatestWorkFileIdResponse", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class FindLatestWorkFileIdResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> FindLatestWorkFileIdResult;
        
        public FindLatestWorkFileIdResponse() {
        }
        
        public FindLatestWorkFileIdResponse(System.Nullable<int> FindLatestWorkFileIdResult) {
            this.FindLatestWorkFileIdResult = FindLatestWorkFileIdResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoveIdentity", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class RemoveIdentityRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> irc_identity;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> email_identity;
        
        public RemoveIdentityRequest() {
        }
        
        public RemoveIdentityRequest(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> irc_identity, System.Nullable<int> email_identity) {
            this.login = login;
            this.irc_identity = irc_identity;
            this.email_identity = email_identity;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoveIdentityResponse", WrapperNamespace="http://monkeywrench.novell.com/", IsWrapped=true)]
    public partial class RemoveIdentityResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://monkeywrench.novell.com/", Order=0)]
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse RemoveIdentityResult;
        
        public RemoveIdentityResponse() {
        }
        
        public RemoveIdentityResponse(MoonlightDrtViewer.MonkeyWrench.WebServiceResponse RemoveIdentityResult) {
            this.RemoveIdentityResult = RemoveIdentityResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WebServicesSoapChannel : MoonlightDrtViewer.MonkeyWrench.WebServicesSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.LoginResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.LoginResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddFileDeletionDirectiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddFileDeletionDirectiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddLaneDeletionDirectiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddLaneDeletionDirectiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindLaneDeletionDirectiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindLaneDeletionDirectiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.DBLaneDeletionDirectiveView Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.DBLaneDeletionDirectiveView)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLaneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLaneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetLaneResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetLaneResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWorkHostHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWorkHostHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHostForEditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHostForEditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetHostForEditResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetHostForEditResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLaneForEditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLaneForEditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetLaneForEditResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetLaneForEditResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindHostCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindHostCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.FindHostResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.FindHostResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindRevisionForLaneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindRevisionForLaneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindRevisionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindRevisionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindLaneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindLaneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.FindLaneResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.FindLaneResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetViewLaneDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetViewLaneDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetViewLaneData2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetViewLaneData2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFrontPageDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFrontPageDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.FrontPageResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.FrontPageResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFrontPageData2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFrontPageData2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.FrontPageResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.FrontPageResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLanesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLanesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetLanesResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetLanesResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHostLanesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHostLanesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetHostLanesResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetHostLanesResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHostsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHostsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetHostsResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetHostsResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRevisionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRevisionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetRevisionsResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetRevisionsResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCommandsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCommandsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetCommandsResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetCommandsResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CloneLaneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CloneLaneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddLaneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddLaneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddHostCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddHostCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClearAllWorkForHostCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ClearAllWorkForHostCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClearAllWorkForLaneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ClearAllWorkForLaneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteAllWorkForHostCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteAllWorkForHostCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteAllWorkForLaneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteAllWorkForLaneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteAllRevisionsForLaneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteAllRevisionsForLaneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetViewTableDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetViewTableDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetViewTableDataResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetViewTableDataResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetViewWorkTableDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetViewWorkTableDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetViewWorkTableData2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetViewWorkTableData2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLaneFileForEditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLaneFileForEditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetLaneFileForEditResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetLaneFileForEditResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetViewLaneFileHistoryDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetViewLaneFileHistoryDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetViewLaneFileHistoryDataResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetViewLaneFileHistoryDataResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetUsersResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetUsersResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddUserEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddUserEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveUserEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveUserEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetUserResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetUserResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUploadPortCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUploadPortCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddEnvironmentVariableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddEnvironmentVariableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWorkStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWorkStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.DBState Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.DBState)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFilesForWorkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFilesForWorkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetFilesForWorkResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetFilesForWorkResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReportBuildStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReportBuildStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.ReportBuildStateResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.ReportBuildStateResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRevisionWorkForLaneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRevisionWorkForLaneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetRevisionWorkForLaneResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetRevisionWorkForLaneResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReportBuildBotStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReportBuildBotStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.ReportBuildBotStatusResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.ReportBuildBotStatusResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBuildBotStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBuildBotStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetBuildBotStatusResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetBuildBotStatusResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBuildInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBuildInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBuildInfoMultipleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBuildInfoMultipleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindLatestWorkFileIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindLatestWorkFileIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Nullable<int> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Nullable<int>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTestResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTestResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetTestResultsResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetTestResultsResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditIdentityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditIdentityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveIdentityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveIdentityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetIdentitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetIdentitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetIdentitiesResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetIdentitiesResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNotificationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNotificationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetNotificationsResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetNotificationsResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddLaneNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddLaneNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveLaneNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveLaneNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddReleaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddReleaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetReleasesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetReleasesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetReleasesResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetReleasesResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteReleaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteReleaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAdminInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAdminInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetAdminInfoResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetAdminInfoResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebServicesSoapClient : System.ServiceModel.ClientBase<MoonlightDrtViewer.MonkeyWrench.WebServicesSoap>, MoonlightDrtViewer.MonkeyWrench.WebServicesSoap {
        
        private BeginOperationDelegate onBeginGetRolesDelegate;
        
        private EndOperationDelegate onEndGetRolesDelegate;
        
        private System.Threading.SendOrPostCallback onGetRolesCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogoutDelegate;
        
        private EndOperationDelegate onEndLogoutDelegate;
        
        private System.Threading.SendOrPostCallback onLogoutCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateLanefileDelegate;
        
        private EndOperationDelegate onEndCreateLanefileDelegate;
        
        private System.Threading.SendOrPostCallback onCreateLanefileCompletedDelegate;
        
        private BeginOperationDelegate onBeginAttachFileToLaneDelegate;
        
        private EndOperationDelegate onEndAttachFileToLaneDelegate;
        
        private System.Threading.SendOrPostCallback onAttachFileToLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeattachFileFromLaneDelegate;
        
        private EndOperationDelegate onEndDeattachFileFromLaneDelegate;
        
        private System.Threading.SendOrPostCallback onDeattachFileFromLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditCommandFilenameDelegate;
        
        private EndOperationDelegate onEndEditCommandFilenameDelegate;
        
        private System.Threading.SendOrPostCallback onEditCommandFilenameCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditCommandSequenceDelegate;
        
        private EndOperationDelegate onEndEditCommandSequenceDelegate;
        
        private System.Threading.SendOrPostCallback onEditCommandSequenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditCommandArgumentsDelegate;
        
        private EndOperationDelegate onEndEditCommandArgumentsDelegate;
        
        private System.Threading.SendOrPostCallback onEditCommandArgumentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditCommandTimeoutDelegate;
        
        private EndOperationDelegate onEndEditCommandTimeoutDelegate;
        
        private System.Threading.SendOrPostCallback onEditCommandTimeoutCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditCommandWorkingDirectoryDelegate;
        
        private EndOperationDelegate onEndEditCommandWorkingDirectoryDelegate;
        
        private System.Threading.SendOrPostCallback onEditCommandWorkingDirectoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditCommandUploadFilesDelegate;
        
        private EndOperationDelegate onEndEditCommandUploadFilesDelegate;
        
        private System.Threading.SendOrPostCallback onEditCommandUploadFilesCompletedDelegate;
        
        private BeginOperationDelegate onBeginSwitchCommandNonFatalDelegate;
        
        private EndOperationDelegate onEndSwitchCommandNonFatalDelegate;
        
        private System.Threading.SendOrPostCallback onSwitchCommandNonFatalCompletedDelegate;
        
        private BeginOperationDelegate onBeginSwitchCommandAlwaysExecuteDelegate;
        
        private EndOperationDelegate onEndSwitchCommandAlwaysExecuteDelegate;
        
        private System.Threading.SendOrPostCallback onSwitchCommandAlwaysExecuteCompletedDelegate;
        
        private BeginOperationDelegate onBeginSwitchCommandInternalDelegate;
        
        private EndOperationDelegate onEndSwitchCommandInternalDelegate;
        
        private System.Threading.SendOrPostCallback onSwitchCommandInternalCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteCommandDelegate;
        
        private EndOperationDelegate onEndDeleteCommandDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteCommandCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddCommandDelegate;
        
        private EndOperationDelegate onEndAddCommandDelegate;
        
        private System.Threading.SendOrPostCallback onAddCommandCompletedDelegate;
        
        private BeginOperationDelegate onBeginSwitchHostEnabledForLaneDelegate;
        
        private EndOperationDelegate onEndSwitchHostEnabledForLaneDelegate;
        
        private System.Threading.SendOrPostCallback onSwitchHostEnabledForLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveHostForLaneDelegate;
        
        private EndOperationDelegate onEndRemoveHostForLaneDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveHostForLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddHostToLaneDelegate;
        
        private EndOperationDelegate onEndAddHostToLaneDelegate;
        
        private System.Threading.SendOrPostCallback onAddHostToLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddDependencyToLaneDelegate;
        
        private EndOperationDelegate onEndAddDependencyToLaneDelegate;
        
        private System.Threading.SendOrPostCallback onAddDependencyToLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditLaneDependencyFilenameDelegate;
        
        private EndOperationDelegate onEndEditLaneDependencyFilenameDelegate;
        
        private System.Threading.SendOrPostCallback onEditLaneDependencyFilenameCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteLaneDependencyDelegate;
        
        private EndOperationDelegate onEndDeleteLaneDependencyDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteLaneDependencyCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditLaneDependencyDownloadsDelegate;
        
        private EndOperationDelegate onEndEditLaneDependencyDownloadsDelegate;
        
        private System.Threading.SendOrPostCallback onEditLaneDependencyDownloadsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUnlinkDeletionDirectiveDelegate;
        
        private EndOperationDelegate onEndUnlinkDeletionDirectiveDelegate;
        
        private System.Threading.SendOrPostCallback onUnlinkDeletionDirectiveCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteDeletionDirectiveDelegate;
        
        private EndOperationDelegate onEndDeleteDeletionDirectiveDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteDeletionDirectiveCompletedDelegate;
        
        private BeginOperationDelegate onBeginEnableDeletionDirectiveDelegate;
        
        private EndOperationDelegate onEndEnableDeletionDirectiveDelegate;
        
        private System.Threading.SendOrPostCallback onEnableDeletionDirectiveCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddFileDeletionDirectiveDelegate;
        
        private EndOperationDelegate onEndAddFileDeletionDirectiveDelegate;
        
        private System.Threading.SendOrPostCallback onAddFileDeletionDirectiveCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddLaneDeletionDirectiveDelegate;
        
        private EndOperationDelegate onEndAddLaneDeletionDirectiveDelegate;
        
        private System.Threading.SendOrPostCallback onAddLaneDeletionDirectiveCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindLaneDeletionDirectiveDelegate;
        
        private EndOperationDelegate onEndFindLaneDeletionDirectiveDelegate;
        
        private System.Threading.SendOrPostCallback onFindLaneDeletionDirectiveCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLaneDelegate;
        
        private EndOperationDelegate onEndGetLaneDelegate;
        
        private System.Threading.SendOrPostCallback onGetLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWorkHostHistoryDelegate;
        
        private EndOperationDelegate onEndGetWorkHostHistoryDelegate;
        
        private System.Threading.SendOrPostCallback onGetWorkHostHistoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHostForEditDelegate;
        
        private EndOperationDelegate onEndGetHostForEditDelegate;
        
        private System.Threading.SendOrPostCallback onGetHostForEditCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddMasterHostDelegate;
        
        private EndOperationDelegate onEndAddMasterHostDelegate;
        
        private System.Threading.SendOrPostCallback onAddMasterHostCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveMasterHostDelegate;
        
        private EndOperationDelegate onEndRemoveMasterHostDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveMasterHostCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLaneForEditDelegate;
        
        private EndOperationDelegate onEndGetLaneForEditDelegate;
        
        private System.Threading.SendOrPostCallback onGetLaneForEditCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindHostDelegate;
        
        private EndOperationDelegate onEndFindHostDelegate;
        
        private System.Threading.SendOrPostCallback onFindHostCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindRevisionForLaneDelegate;
        
        private EndOperationDelegate onEndFindRevisionForLaneDelegate;
        
        private System.Threading.SendOrPostCallback onFindRevisionForLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindRevisionDelegate;
        
        private EndOperationDelegate onEndFindRevisionDelegate;
        
        private System.Threading.SendOrPostCallback onFindRevisionCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindLaneDelegate;
        
        private EndOperationDelegate onEndFindLaneDelegate;
        
        private System.Threading.SendOrPostCallback onFindLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditLaneDelegate;
        
        private EndOperationDelegate onEndEditLaneDelegate;
        
        private System.Threading.SendOrPostCallback onEditLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditHostDelegate;
        
        private EndOperationDelegate onEndEditHostDelegate;
        
        private System.Threading.SendOrPostCallback onEditHostCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditHostWithPasswordDelegate;
        
        private EndOperationDelegate onEndEditHostWithPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onEditHostWithPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetViewLaneDataDelegate;
        
        private EndOperationDelegate onEndGetViewLaneDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetViewLaneDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetViewLaneData2Delegate;
        
        private EndOperationDelegate onEndGetViewLaneData2Delegate;
        
        private System.Threading.SendOrPostCallback onGetViewLaneData2CompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFrontPageDataDelegate;
        
        private EndOperationDelegate onEndGetFrontPageDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetFrontPageDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFrontPageData2Delegate;
        
        private EndOperationDelegate onEndGetFrontPageData2Delegate;
        
        private System.Threading.SendOrPostCallback onGetFrontPageData2CompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLanesDelegate;
        
        private EndOperationDelegate onEndGetLanesDelegate;
        
        private System.Threading.SendOrPostCallback onGetLanesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHostLanesDelegate;
        
        private EndOperationDelegate onEndGetHostLanesDelegate;
        
        private System.Threading.SendOrPostCallback onGetHostLanesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHostsDelegate;
        
        private EndOperationDelegate onEndGetHostsDelegate;
        
        private System.Threading.SendOrPostCallback onGetHostsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRevisionsDelegate;
        
        private EndOperationDelegate onEndGetRevisionsDelegate;
        
        private System.Threading.SendOrPostCallback onGetRevisionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCommandsDelegate;
        
        private EndOperationDelegate onEndGetCommandsDelegate;
        
        private System.Threading.SendOrPostCallback onGetCommandsCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloneLaneDelegate;
        
        private EndOperationDelegate onEndCloneLaneDelegate;
        
        private System.Threading.SendOrPostCallback onCloneLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteLaneDelegate;
        
        private EndOperationDelegate onEndDeleteLaneDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddLaneDelegate;
        
        private EndOperationDelegate onEndAddLaneDelegate;
        
        private System.Threading.SendOrPostCallback onAddLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteHostDelegate;
        
        private EndOperationDelegate onEndDeleteHostDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteHostCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddHostDelegate;
        
        private EndOperationDelegate onEndAddHostDelegate;
        
        private System.Threading.SendOrPostCallback onAddHostCompletedDelegate;
        
        private BeginOperationDelegate onBeginClearRevisionDelegate;
        
        private EndOperationDelegate onEndClearRevisionDelegate;
        
        private System.Threading.SendOrPostCallback onClearRevisionCompletedDelegate;
        
        private BeginOperationDelegate onBeginRescheduleRevisionDelegate;
        
        private EndOperationDelegate onEndRescheduleRevisionDelegate;
        
        private System.Threading.SendOrPostCallback onRescheduleRevisionCompletedDelegate;
        
        private BeginOperationDelegate onBeginClearAllWorkForHostDelegate;
        
        private EndOperationDelegate onEndClearAllWorkForHostDelegate;
        
        private System.Threading.SendOrPostCallback onClearAllWorkForHostCompletedDelegate;
        
        private BeginOperationDelegate onBeginClearAllWorkForLaneDelegate;
        
        private EndOperationDelegate onEndClearAllWorkForLaneDelegate;
        
        private System.Threading.SendOrPostCallback onClearAllWorkForLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteAllWorkForHostDelegate;
        
        private EndOperationDelegate onEndDeleteAllWorkForHostDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteAllWorkForHostCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteAllWorkForLaneDelegate;
        
        private EndOperationDelegate onEndDeleteAllWorkForLaneDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteAllWorkForLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteAllRevisionsForLaneDelegate;
        
        private EndOperationDelegate onEndDeleteAllRevisionsForLaneDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteAllRevisionsForLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginAbortRevisionDelegate;
        
        private EndOperationDelegate onEndAbortRevisionDelegate;
        
        private System.Threading.SendOrPostCallback onAbortRevisionCompletedDelegate;
        
        private BeginOperationDelegate onBeginClearWorkDelegate;
        
        private EndOperationDelegate onEndClearWorkDelegate;
        
        private System.Threading.SendOrPostCallback onClearWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginAbortWorkDelegate;
        
        private EndOperationDelegate onEndAbortWorkDelegate;
        
        private System.Threading.SendOrPostCallback onAbortWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginPauseWorkDelegate;
        
        private EndOperationDelegate onEndPauseWorkDelegate;
        
        private System.Threading.SendOrPostCallback onPauseWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginResumeWorkDelegate;
        
        private EndOperationDelegate onEndResumeWorkDelegate;
        
        private System.Threading.SendOrPostCallback onResumeWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetViewTableDataDelegate;
        
        private EndOperationDelegate onEndGetViewTableDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetViewTableDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetViewWorkTableDataDelegate;
        
        private EndOperationDelegate onEndGetViewWorkTableDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetViewWorkTableDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetViewWorkTableData2Delegate;
        
        private EndOperationDelegate onEndGetViewWorkTableData2Delegate;
        
        private System.Threading.SendOrPostCallback onGetViewWorkTableData2CompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLaneFileForEditDelegate;
        
        private EndOperationDelegate onEndGetLaneFileForEditDelegate;
        
        private System.Threading.SendOrPostCallback onGetLaneFileForEditCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditLaneFileDelegate;
        
        private EndOperationDelegate onEndEditLaneFileDelegate;
        
        private System.Threading.SendOrPostCallback onEditLaneFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetViewLaneFileHistoryDataDelegate;
        
        private EndOperationDelegate onEndGetViewLaneFileHistoryDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetViewLaneFileHistoryDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUsersDelegate;
        
        private EndOperationDelegate onEndGetUsersDelegate;
        
        private System.Threading.SendOrPostCallback onGetUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteUserDelegate;
        
        private EndOperationDelegate onEndDeleteUserDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddUserEmailDelegate;
        
        private EndOperationDelegate onEndAddUserEmailDelegate;
        
        private System.Threading.SendOrPostCallback onAddUserEmailCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveUserEmailDelegate;
        
        private EndOperationDelegate onEndRemoveUserEmailDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveUserEmailCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditUserDelegate;
        
        private EndOperationDelegate onEndEditUserDelegate;
        
        private System.Threading.SendOrPostCallback onEditUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserDelegate;
        
        private EndOperationDelegate onEndGetUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUploadPortDelegate;
        
        private EndOperationDelegate onEndGetUploadPortDelegate;
        
        private System.Threading.SendOrPostCallback onGetUploadPortCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddEnvironmentVariableDelegate;
        
        private EndOperationDelegate onEndAddEnvironmentVariableDelegate;
        
        private System.Threading.SendOrPostCallback onAddEnvironmentVariableCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditEnvironmentVariableDelegate;
        
        private EndOperationDelegate onEndEditEnvironmentVariableDelegate;
        
        private System.Threading.SendOrPostCallback onEditEnvironmentVariableCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteEnvironmentVariableDelegate;
        
        private EndOperationDelegate onEndDeleteEnvironmentVariableDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteEnvironmentVariableCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadCompressedFileDelegate;
        
        private EndOperationDelegate onEndUploadCompressedFileDelegate;
        
        private System.Threading.SendOrPostCallback onUploadCompressedFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadFileDelegate;
        
        private EndOperationDelegate onEndUploadFileDelegate;
        
        private System.Threading.SendOrPostCallback onUploadFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWorkStateDelegate;
        
        private EndOperationDelegate onEndGetWorkStateDelegate;
        
        private System.Threading.SendOrPostCallback onGetWorkStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFilesForWorkDelegate;
        
        private EndOperationDelegate onEndGetFilesForWorkDelegate;
        
        private System.Threading.SendOrPostCallback onGetFilesForWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginReportBuildStateDelegate;
        
        private EndOperationDelegate onEndReportBuildStateDelegate;
        
        private System.Threading.SendOrPostCallback onReportBuildStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRevisionWorkForLaneDelegate;
        
        private EndOperationDelegate onEndGetRevisionWorkForLaneDelegate;
        
        private System.Threading.SendOrPostCallback onGetRevisionWorkForLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginReportBuildBotStatusDelegate;
        
        private EndOperationDelegate onEndReportBuildBotStatusDelegate;
        
        private System.Threading.SendOrPostCallback onReportBuildBotStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBuildBotStatusDelegate;
        
        private EndOperationDelegate onEndGetBuildBotStatusDelegate;
        
        private System.Threading.SendOrPostCallback onGetBuildBotStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBuildInfoDelegate;
        
        private EndOperationDelegate onEndGetBuildInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetBuildInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBuildInfoMultipleDelegate;
        
        private EndOperationDelegate onEndGetBuildInfoMultipleDelegate;
        
        private System.Threading.SendOrPostCallback onGetBuildInfoMultipleCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindLatestWorkFileIdDelegate;
        
        private EndOperationDelegate onEndFindLatestWorkFileIdDelegate;
        
        private System.Threading.SendOrPostCallback onFindLatestWorkFileIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTestResultsDelegate;
        
        private EndOperationDelegate onEndGetTestResultsDelegate;
        
        private System.Threading.SendOrPostCallback onGetTestResultsCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditIdentityDelegate;
        
        private EndOperationDelegate onEndEditIdentityDelegate;
        
        private System.Threading.SendOrPostCallback onEditIdentityCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveIdentityDelegate;
        
        private EndOperationDelegate onEndRemoveIdentityDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveIdentityCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetIdentitiesDelegate;
        
        private EndOperationDelegate onEndGetIdentitiesDelegate;
        
        private System.Threading.SendOrPostCallback onGetIdentitiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditNotificationDelegate;
        
        private EndOperationDelegate onEndEditNotificationDelegate;
        
        private System.Threading.SendOrPostCallback onEditNotificationCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveNotificationDelegate;
        
        private EndOperationDelegate onEndRemoveNotificationDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveNotificationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNotificationsDelegate;
        
        private EndOperationDelegate onEndGetNotificationsDelegate;
        
        private System.Threading.SendOrPostCallback onGetNotificationsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddLaneNotificationDelegate;
        
        private EndOperationDelegate onEndAddLaneNotificationDelegate;
        
        private System.Threading.SendOrPostCallback onAddLaneNotificationCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveLaneNotificationDelegate;
        
        private EndOperationDelegate onEndRemoveLaneNotificationDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveLaneNotificationCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddReleaseDelegate;
        
        private EndOperationDelegate onEndAddReleaseDelegate;
        
        private System.Threading.SendOrPostCallback onAddReleaseCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetReleasesDelegate;
        
        private EndOperationDelegate onEndGetReleasesDelegate;
        
        private System.Threading.SendOrPostCallback onGetReleasesCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteReleaseDelegate;
        
        private EndOperationDelegate onEndDeleteReleaseDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteReleaseCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecuteSchedulerDelegate;
        
        private EndOperationDelegate onEndExecuteSchedulerDelegate;
        
        private System.Threading.SendOrPostCallback onExecuteSchedulerCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecuteDeletionDirectivesDelegate;
        
        private EndOperationDelegate onEndExecuteDeletionDirectivesDelegate;
        
        private System.Threading.SendOrPostCallback onExecuteDeletionDirectivesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAdminInfoDelegate;
        
        private EndOperationDelegate onEndGetAdminInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetAdminInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public WebServicesSoapClient() {
        }
        
        public WebServicesSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebServicesSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServicesSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServicesSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetRolesCompletedEventArgs> GetRolesCompleted;
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LogoutCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreateLanefileCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AttachFileToLaneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeattachFileFromLaneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditCommandFilenameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditCommandSequenceCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditCommandArgumentsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditCommandTimeoutCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditCommandWorkingDirectoryCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditCommandUploadFilesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SwitchCommandNonFatalCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SwitchCommandAlwaysExecuteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SwitchCommandInternalCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteCommandCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddCommandCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SwitchHostEnabledForLaneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveHostForLaneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddHostToLaneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddDependencyToLaneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditLaneDependencyFilenameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteLaneDependencyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditLaneDependencyDownloadsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UnlinkDeletionDirectiveCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteDeletionDirectiveCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EnableDeletionDirectiveCompleted;
        
        public event System.EventHandler<AddFileDeletionDirectiveCompletedEventArgs> AddFileDeletionDirectiveCompleted;
        
        public event System.EventHandler<AddLaneDeletionDirectiveCompletedEventArgs> AddLaneDeletionDirectiveCompleted;
        
        public event System.EventHandler<FindLaneDeletionDirectiveCompletedEventArgs> FindLaneDeletionDirectiveCompleted;
        
        public event System.EventHandler<GetLaneCompletedEventArgs> GetLaneCompleted;
        
        public event System.EventHandler<GetWorkHostHistoryCompletedEventArgs> GetWorkHostHistoryCompleted;
        
        public event System.EventHandler<GetHostForEditCompletedEventArgs> GetHostForEditCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddMasterHostCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveMasterHostCompleted;
        
        public event System.EventHandler<GetLaneForEditCompletedEventArgs> GetLaneForEditCompleted;
        
        public event System.EventHandler<FindHostCompletedEventArgs> FindHostCompleted;
        
        public event System.EventHandler<FindRevisionForLaneCompletedEventArgs> FindRevisionForLaneCompleted;
        
        public event System.EventHandler<FindRevisionCompletedEventArgs> FindRevisionCompleted;
        
        public event System.EventHandler<FindLaneCompletedEventArgs> FindLaneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditLaneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditHostCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditHostWithPasswordCompleted;
        
        public event System.EventHandler<GetViewLaneDataCompletedEventArgs> GetViewLaneDataCompleted;
        
        public event System.EventHandler<GetViewLaneData2CompletedEventArgs> GetViewLaneData2Completed;
        
        public event System.EventHandler<GetFrontPageDataCompletedEventArgs> GetFrontPageDataCompleted;
        
        public event System.EventHandler<GetFrontPageData2CompletedEventArgs> GetFrontPageData2Completed;
        
        public event System.EventHandler<GetLanesCompletedEventArgs> GetLanesCompleted;
        
        public event System.EventHandler<GetHostLanesCompletedEventArgs> GetHostLanesCompleted;
        
        public event System.EventHandler<GetHostsCompletedEventArgs> GetHostsCompleted;
        
        public event System.EventHandler<GetRevisionsCompletedEventArgs> GetRevisionsCompleted;
        
        public event System.EventHandler<GetCommandsCompletedEventArgs> GetCommandsCompleted;
        
        public event System.EventHandler<CloneLaneCompletedEventArgs> CloneLaneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteLaneCompleted;
        
        public event System.EventHandler<AddLaneCompletedEventArgs> AddLaneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteHostCompleted;
        
        public event System.EventHandler<AddHostCompletedEventArgs> AddHostCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ClearRevisionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RescheduleRevisionCompleted;
        
        public event System.EventHandler<ClearAllWorkForHostCompletedEventArgs> ClearAllWorkForHostCompleted;
        
        public event System.EventHandler<ClearAllWorkForLaneCompletedEventArgs> ClearAllWorkForLaneCompleted;
        
        public event System.EventHandler<DeleteAllWorkForHostCompletedEventArgs> DeleteAllWorkForHostCompleted;
        
        public event System.EventHandler<DeleteAllWorkForLaneCompletedEventArgs> DeleteAllWorkForLaneCompleted;
        
        public event System.EventHandler<DeleteAllRevisionsForLaneCompletedEventArgs> DeleteAllRevisionsForLaneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AbortRevisionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ClearWorkCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AbortWorkCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PauseWorkCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ResumeWorkCompleted;
        
        public event System.EventHandler<GetViewTableDataCompletedEventArgs> GetViewTableDataCompleted;
        
        public event System.EventHandler<GetViewWorkTableDataCompletedEventArgs> GetViewWorkTableDataCompleted;
        
        public event System.EventHandler<GetViewWorkTableData2CompletedEventArgs> GetViewWorkTableData2Completed;
        
        public event System.EventHandler<GetLaneFileForEditCompletedEventArgs> GetLaneFileForEditCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditLaneFileCompleted;
        
        public event System.EventHandler<GetViewLaneFileHistoryDataCompletedEventArgs> GetViewLaneFileHistoryDataCompleted;
        
        public event System.EventHandler<GetUsersCompletedEventArgs> GetUsersCompleted;
        
        public event System.EventHandler<DeleteUserCompletedEventArgs> DeleteUserCompleted;
        
        public event System.EventHandler<AddUserEmailCompletedEventArgs> AddUserEmailCompleted;
        
        public event System.EventHandler<RemoveUserEmailCompletedEventArgs> RemoveUserEmailCompleted;
        
        public event System.EventHandler<EditUserCompletedEventArgs> EditUserCompleted;
        
        public event System.EventHandler<GetUserCompletedEventArgs> GetUserCompleted;
        
        public event System.EventHandler<GetUploadPortCompletedEventArgs> GetUploadPortCompleted;
        
        public event System.EventHandler<AddEnvironmentVariableCompletedEventArgs> AddEnvironmentVariableCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditEnvironmentVariableCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteEnvironmentVariableCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UploadCompressedFileCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UploadFileCompleted;
        
        public event System.EventHandler<GetWorkStateCompletedEventArgs> GetWorkStateCompleted;
        
        public event System.EventHandler<GetFilesForWorkCompletedEventArgs> GetFilesForWorkCompleted;
        
        public event System.EventHandler<ReportBuildStateCompletedEventArgs> ReportBuildStateCompleted;
        
        public event System.EventHandler<GetRevisionWorkForLaneCompletedEventArgs> GetRevisionWorkForLaneCompleted;
        
        public event System.EventHandler<ReportBuildBotStatusCompletedEventArgs> ReportBuildBotStatusCompleted;
        
        public event System.EventHandler<GetBuildBotStatusCompletedEventArgs> GetBuildBotStatusCompleted;
        
        public event System.EventHandler<GetBuildInfoCompletedEventArgs> GetBuildInfoCompleted;
        
        public event System.EventHandler<GetBuildInfoMultipleCompletedEventArgs> GetBuildInfoMultipleCompleted;
        
        public event System.EventHandler<FindLatestWorkFileIdCompletedEventArgs> FindLatestWorkFileIdCompleted;
        
        public event System.EventHandler<GetTestResultsCompletedEventArgs> GetTestResultsCompleted;
        
        public event System.EventHandler<EditIdentityCompletedEventArgs> EditIdentityCompleted;
        
        public event System.EventHandler<RemoveIdentityCompletedEventArgs> RemoveIdentityCompleted;
        
        public event System.EventHandler<GetIdentitiesCompletedEventArgs> GetIdentitiesCompleted;
        
        public event System.EventHandler<EditNotificationCompletedEventArgs> EditNotificationCompleted;
        
        public event System.EventHandler<RemoveNotificationCompletedEventArgs> RemoveNotificationCompleted;
        
        public event System.EventHandler<GetNotificationsCompletedEventArgs> GetNotificationsCompleted;
        
        public event System.EventHandler<AddLaneNotificationCompletedEventArgs> AddLaneNotificationCompleted;
        
        public event System.EventHandler<RemoveLaneNotificationCompletedEventArgs> RemoveLaneNotificationCompleted;
        
        public event System.EventHandler<AddReleaseCompletedEventArgs> AddReleaseCompleted;
        
        public event System.EventHandler<GetReleasesCompletedEventArgs> GetReleasesCompleted;
        
        public event System.EventHandler<DeleteReleaseCompletedEventArgs> DeleteReleaseCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ExecuteSchedulerCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ExecuteDeletionDirectivesCompleted;
        
        public event System.EventHandler<GetAdminInfoCompletedEventArgs> GetAdminInfoCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetRoles(string user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRoles(user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string[] MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetRoles(System.IAsyncResult result) {
            return base.Channel.EndGetRoles(result);
        }
        
        private System.IAsyncResult OnBeginGetRoles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string user = ((string)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetRoles(user, callback, asyncState);
        }
        
        private object[] OnEndGetRoles(System.IAsyncResult result) {
            string[] retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetRoles(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRolesCompleted(object state) {
            if ((this.GetRolesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRolesCompleted(this, new GetRolesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRolesAsync(string user) {
            this.GetRolesAsync(user, null);
        }
        
        public void GetRolesAsync(string user, object userState) {
            if ((this.onBeginGetRolesDelegate == null)) {
                this.onBeginGetRolesDelegate = new BeginOperationDelegate(this.OnBeginGetRoles);
            }
            if ((this.onEndGetRolesDelegate == null)) {
                this.onEndGetRolesDelegate = new EndOperationDelegate(this.OnEndGetRoles);
            }
            if ((this.onGetRolesCompletedDelegate == null)) {
                this.onGetRolesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRolesCompleted);
            }
            base.InvokeAsync(this.onBeginGetRolesDelegate, new object[] {
                        user}, this.onEndGetRolesDelegate, this.onGetRolesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginLogin(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.LoginResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginLogin(login, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.LoginResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.LoginAsync(login, null);
        }
        
        public void LoginAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        login}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginLogout(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogout(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndLogout(System.IAsyncResult result) {
            base.Channel.EndLogout(result);
        }
        
        private System.IAsyncResult OnBeginLogout(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginLogout(login, callback, asyncState);
        }
        
        private object[] OnEndLogout(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndLogout(result);
            return null;
        }
        
        private void OnLogoutCompleted(object state) {
            if ((this.LogoutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogoutAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.LogoutAsync(login, null);
        }
        
        public void LogoutAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginLogoutDelegate == null)) {
                this.onBeginLogoutDelegate = new BeginOperationDelegate(this.OnBeginLogout);
            }
            if ((this.onEndLogoutDelegate == null)) {
                this.onEndLogoutDelegate = new EndOperationDelegate(this.OnEndLogout);
            }
            if ((this.onLogoutCompletedDelegate == null)) {
                this.onLogoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogoutCompleted);
            }
            base.InvokeAsync(this.onBeginLogoutDelegate, new object[] {
                        login}, this.onEndLogoutDelegate, this.onLogoutCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginCreateLanefile(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string filename, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateLanefile(login, lane_id, filename, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndCreateLanefile(System.IAsyncResult result) {
            base.Channel.EndCreateLanefile(result);
        }
        
        private System.IAsyncResult OnBeginCreateLanefile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            string filename = ((string)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginCreateLanefile(login, lane_id, filename, callback, asyncState);
        }
        
        private object[] OnEndCreateLanefile(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndCreateLanefile(result);
            return null;
        }
        
        private void OnCreateLanefileCompleted(object state) {
            if ((this.CreateLanefileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateLanefileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateLanefileAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string filename) {
            this.CreateLanefileAsync(login, lane_id, filename, null);
        }
        
        public void CreateLanefileAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string filename, object userState) {
            if ((this.onBeginCreateLanefileDelegate == null)) {
                this.onBeginCreateLanefileDelegate = new BeginOperationDelegate(this.OnBeginCreateLanefile);
            }
            if ((this.onEndCreateLanefileDelegate == null)) {
                this.onEndCreateLanefileDelegate = new EndOperationDelegate(this.OnEndCreateLanefile);
            }
            if ((this.onCreateLanefileCompletedDelegate == null)) {
                this.onCreateLanefileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateLanefileCompleted);
            }
            base.InvokeAsync(this.onBeginCreateLanefileDelegate, new object[] {
                        login,
                        lane_id,
                        filename}, this.onEndCreateLanefileDelegate, this.onCreateLanefileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginAttachFileToLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int lanefile_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAttachFileToLane(login, lane_id, lanefile_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndAttachFileToLane(System.IAsyncResult result) {
            base.Channel.EndAttachFileToLane(result);
        }
        
        private System.IAsyncResult OnBeginAttachFileToLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            int lanefile_id = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginAttachFileToLane(login, lane_id, lanefile_id, callback, asyncState);
        }
        
        private object[] OnEndAttachFileToLane(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndAttachFileToLane(result);
            return null;
        }
        
        private void OnAttachFileToLaneCompleted(object state) {
            if ((this.AttachFileToLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AttachFileToLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AttachFileToLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int lanefile_id) {
            this.AttachFileToLaneAsync(login, lane_id, lanefile_id, null);
        }
        
        public void AttachFileToLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int lanefile_id, object userState) {
            if ((this.onBeginAttachFileToLaneDelegate == null)) {
                this.onBeginAttachFileToLaneDelegate = new BeginOperationDelegate(this.OnBeginAttachFileToLane);
            }
            if ((this.onEndAttachFileToLaneDelegate == null)) {
                this.onEndAttachFileToLaneDelegate = new EndOperationDelegate(this.OnEndAttachFileToLane);
            }
            if ((this.onAttachFileToLaneCompletedDelegate == null)) {
                this.onAttachFileToLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAttachFileToLaneCompleted);
            }
            base.InvokeAsync(this.onBeginAttachFileToLaneDelegate, new object[] {
                        login,
                        lane_id,
                        lanefile_id}, this.onEndAttachFileToLaneDelegate, this.onAttachFileToLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginDeattachFileFromLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int lanefile_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeattachFileFromLane(login, lane_id, lanefile_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndDeattachFileFromLane(System.IAsyncResult result) {
            base.Channel.EndDeattachFileFromLane(result);
        }
        
        private System.IAsyncResult OnBeginDeattachFileFromLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            int lanefile_id = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginDeattachFileFromLane(login, lane_id, lanefile_id, callback, asyncState);
        }
        
        private object[] OnEndDeattachFileFromLane(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndDeattachFileFromLane(result);
            return null;
        }
        
        private void OnDeattachFileFromLaneCompleted(object state) {
            if ((this.DeattachFileFromLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeattachFileFromLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeattachFileFromLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int lanefile_id) {
            this.DeattachFileFromLaneAsync(login, lane_id, lanefile_id, null);
        }
        
        public void DeattachFileFromLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int lanefile_id, object userState) {
            if ((this.onBeginDeattachFileFromLaneDelegate == null)) {
                this.onBeginDeattachFileFromLaneDelegate = new BeginOperationDelegate(this.OnBeginDeattachFileFromLane);
            }
            if ((this.onEndDeattachFileFromLaneDelegate == null)) {
                this.onEndDeattachFileFromLaneDelegate = new EndOperationDelegate(this.OnEndDeattachFileFromLane);
            }
            if ((this.onDeattachFileFromLaneCompletedDelegate == null)) {
                this.onDeattachFileFromLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeattachFileFromLaneCompleted);
            }
            base.InvokeAsync(this.onBeginDeattachFileFromLaneDelegate, new object[] {
                        login,
                        lane_id,
                        lanefile_id}, this.onEndDeattachFileFromLaneDelegate, this.onDeattachFileFromLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginEditCommandFilename(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string filename, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditCommandFilename(login, command_id, filename, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndEditCommandFilename(System.IAsyncResult result) {
            base.Channel.EndEditCommandFilename(result);
        }
        
        private System.IAsyncResult OnBeginEditCommandFilename(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int command_id = ((int)(inValues[1]));
            string filename = ((string)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginEditCommandFilename(login, command_id, filename, callback, asyncState);
        }
        
        private object[] OnEndEditCommandFilename(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndEditCommandFilename(result);
            return null;
        }
        
        private void OnEditCommandFilenameCompleted(object state) {
            if ((this.EditCommandFilenameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditCommandFilenameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditCommandFilenameAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string filename) {
            this.EditCommandFilenameAsync(login, command_id, filename, null);
        }
        
        public void EditCommandFilenameAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string filename, object userState) {
            if ((this.onBeginEditCommandFilenameDelegate == null)) {
                this.onBeginEditCommandFilenameDelegate = new BeginOperationDelegate(this.OnBeginEditCommandFilename);
            }
            if ((this.onEndEditCommandFilenameDelegate == null)) {
                this.onEndEditCommandFilenameDelegate = new EndOperationDelegate(this.OnEndEditCommandFilename);
            }
            if ((this.onEditCommandFilenameCompletedDelegate == null)) {
                this.onEditCommandFilenameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditCommandFilenameCompleted);
            }
            base.InvokeAsync(this.onBeginEditCommandFilenameDelegate, new object[] {
                        login,
                        command_id,
                        filename}, this.onEndEditCommandFilenameDelegate, this.onEditCommandFilenameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginEditCommandSequence(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, int sequence, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditCommandSequence(login, command_id, sequence, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndEditCommandSequence(System.IAsyncResult result) {
            base.Channel.EndEditCommandSequence(result);
        }
        
        private System.IAsyncResult OnBeginEditCommandSequence(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int command_id = ((int)(inValues[1]));
            int sequence = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginEditCommandSequence(login, command_id, sequence, callback, asyncState);
        }
        
        private object[] OnEndEditCommandSequence(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndEditCommandSequence(result);
            return null;
        }
        
        private void OnEditCommandSequenceCompleted(object state) {
            if ((this.EditCommandSequenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditCommandSequenceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditCommandSequenceAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, int sequence) {
            this.EditCommandSequenceAsync(login, command_id, sequence, null);
        }
        
        public void EditCommandSequenceAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, int sequence, object userState) {
            if ((this.onBeginEditCommandSequenceDelegate == null)) {
                this.onBeginEditCommandSequenceDelegate = new BeginOperationDelegate(this.OnBeginEditCommandSequence);
            }
            if ((this.onEndEditCommandSequenceDelegate == null)) {
                this.onEndEditCommandSequenceDelegate = new EndOperationDelegate(this.OnEndEditCommandSequence);
            }
            if ((this.onEditCommandSequenceCompletedDelegate == null)) {
                this.onEditCommandSequenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditCommandSequenceCompleted);
            }
            base.InvokeAsync(this.onBeginEditCommandSequenceDelegate, new object[] {
                        login,
                        command_id,
                        sequence}, this.onEndEditCommandSequenceDelegate, this.onEditCommandSequenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginEditCommandArguments(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string arguments, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditCommandArguments(login, command_id, arguments, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndEditCommandArguments(System.IAsyncResult result) {
            base.Channel.EndEditCommandArguments(result);
        }
        
        private System.IAsyncResult OnBeginEditCommandArguments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int command_id = ((int)(inValues[1]));
            string arguments = ((string)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginEditCommandArguments(login, command_id, arguments, callback, asyncState);
        }
        
        private object[] OnEndEditCommandArguments(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndEditCommandArguments(result);
            return null;
        }
        
        private void OnEditCommandArgumentsCompleted(object state) {
            if ((this.EditCommandArgumentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditCommandArgumentsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditCommandArgumentsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string arguments) {
            this.EditCommandArgumentsAsync(login, command_id, arguments, null);
        }
        
        public void EditCommandArgumentsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string arguments, object userState) {
            if ((this.onBeginEditCommandArgumentsDelegate == null)) {
                this.onBeginEditCommandArgumentsDelegate = new BeginOperationDelegate(this.OnBeginEditCommandArguments);
            }
            if ((this.onEndEditCommandArgumentsDelegate == null)) {
                this.onEndEditCommandArgumentsDelegate = new EndOperationDelegate(this.OnEndEditCommandArguments);
            }
            if ((this.onEditCommandArgumentsCompletedDelegate == null)) {
                this.onEditCommandArgumentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditCommandArgumentsCompleted);
            }
            base.InvokeAsync(this.onBeginEditCommandArgumentsDelegate, new object[] {
                        login,
                        command_id,
                        arguments}, this.onEndEditCommandArgumentsDelegate, this.onEditCommandArgumentsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginEditCommandTimeout(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, int timeout, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditCommandTimeout(login, command_id, timeout, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndEditCommandTimeout(System.IAsyncResult result) {
            base.Channel.EndEditCommandTimeout(result);
        }
        
        private System.IAsyncResult OnBeginEditCommandTimeout(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int command_id = ((int)(inValues[1]));
            int timeout = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginEditCommandTimeout(login, command_id, timeout, callback, asyncState);
        }
        
        private object[] OnEndEditCommandTimeout(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndEditCommandTimeout(result);
            return null;
        }
        
        private void OnEditCommandTimeoutCompleted(object state) {
            if ((this.EditCommandTimeoutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditCommandTimeoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditCommandTimeoutAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, int timeout) {
            this.EditCommandTimeoutAsync(login, command_id, timeout, null);
        }
        
        public void EditCommandTimeoutAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, int timeout, object userState) {
            if ((this.onBeginEditCommandTimeoutDelegate == null)) {
                this.onBeginEditCommandTimeoutDelegate = new BeginOperationDelegate(this.OnBeginEditCommandTimeout);
            }
            if ((this.onEndEditCommandTimeoutDelegate == null)) {
                this.onEndEditCommandTimeoutDelegate = new EndOperationDelegate(this.OnEndEditCommandTimeout);
            }
            if ((this.onEditCommandTimeoutCompletedDelegate == null)) {
                this.onEditCommandTimeoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditCommandTimeoutCompleted);
            }
            base.InvokeAsync(this.onBeginEditCommandTimeoutDelegate, new object[] {
                        login,
                        command_id,
                        timeout}, this.onEndEditCommandTimeoutDelegate, this.onEditCommandTimeoutCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginEditCommandWorkingDirectory(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string working_directory, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditCommandWorkingDirectory(login, command_id, working_directory, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndEditCommandWorkingDirectory(System.IAsyncResult result) {
            base.Channel.EndEditCommandWorkingDirectory(result);
        }
        
        private System.IAsyncResult OnBeginEditCommandWorkingDirectory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int command_id = ((int)(inValues[1]));
            string working_directory = ((string)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginEditCommandWorkingDirectory(login, command_id, working_directory, callback, asyncState);
        }
        
        private object[] OnEndEditCommandWorkingDirectory(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndEditCommandWorkingDirectory(result);
            return null;
        }
        
        private void OnEditCommandWorkingDirectoryCompleted(object state) {
            if ((this.EditCommandWorkingDirectoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditCommandWorkingDirectoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditCommandWorkingDirectoryAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string working_directory) {
            this.EditCommandWorkingDirectoryAsync(login, command_id, working_directory, null);
        }
        
        public void EditCommandWorkingDirectoryAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string working_directory, object userState) {
            if ((this.onBeginEditCommandWorkingDirectoryDelegate == null)) {
                this.onBeginEditCommandWorkingDirectoryDelegate = new BeginOperationDelegate(this.OnBeginEditCommandWorkingDirectory);
            }
            if ((this.onEndEditCommandWorkingDirectoryDelegate == null)) {
                this.onEndEditCommandWorkingDirectoryDelegate = new EndOperationDelegate(this.OnEndEditCommandWorkingDirectory);
            }
            if ((this.onEditCommandWorkingDirectoryCompletedDelegate == null)) {
                this.onEditCommandWorkingDirectoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditCommandWorkingDirectoryCompleted);
            }
            base.InvokeAsync(this.onBeginEditCommandWorkingDirectoryDelegate, new object[] {
                        login,
                        command_id,
                        working_directory}, this.onEndEditCommandWorkingDirectoryDelegate, this.onEditCommandWorkingDirectoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginEditCommandUploadFiles(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string upload_files, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditCommandUploadFiles(login, command_id, upload_files, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndEditCommandUploadFiles(System.IAsyncResult result) {
            base.Channel.EndEditCommandUploadFiles(result);
        }
        
        private System.IAsyncResult OnBeginEditCommandUploadFiles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int command_id = ((int)(inValues[1]));
            string upload_files = ((string)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginEditCommandUploadFiles(login, command_id, upload_files, callback, asyncState);
        }
        
        private object[] OnEndEditCommandUploadFiles(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndEditCommandUploadFiles(result);
            return null;
        }
        
        private void OnEditCommandUploadFilesCompleted(object state) {
            if ((this.EditCommandUploadFilesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditCommandUploadFilesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditCommandUploadFilesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string upload_files) {
            this.EditCommandUploadFilesAsync(login, command_id, upload_files, null);
        }
        
        public void EditCommandUploadFilesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string upload_files, object userState) {
            if ((this.onBeginEditCommandUploadFilesDelegate == null)) {
                this.onBeginEditCommandUploadFilesDelegate = new BeginOperationDelegate(this.OnBeginEditCommandUploadFiles);
            }
            if ((this.onEndEditCommandUploadFilesDelegate == null)) {
                this.onEndEditCommandUploadFilesDelegate = new EndOperationDelegate(this.OnEndEditCommandUploadFiles);
            }
            if ((this.onEditCommandUploadFilesCompletedDelegate == null)) {
                this.onEditCommandUploadFilesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditCommandUploadFilesCompleted);
            }
            base.InvokeAsync(this.onBeginEditCommandUploadFilesDelegate, new object[] {
                        login,
                        command_id,
                        upload_files}, this.onEndEditCommandUploadFilesDelegate, this.onEditCommandUploadFilesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginSwitchCommandNonFatal(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSwitchCommandNonFatal(login, command_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndSwitchCommandNonFatal(System.IAsyncResult result) {
            base.Channel.EndSwitchCommandNonFatal(result);
        }
        
        private System.IAsyncResult OnBeginSwitchCommandNonFatal(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int command_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginSwitchCommandNonFatal(login, command_id, callback, asyncState);
        }
        
        private object[] OnEndSwitchCommandNonFatal(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndSwitchCommandNonFatal(result);
            return null;
        }
        
        private void OnSwitchCommandNonFatalCompleted(object state) {
            if ((this.SwitchCommandNonFatalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SwitchCommandNonFatalCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SwitchCommandNonFatalAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id) {
            this.SwitchCommandNonFatalAsync(login, command_id, null);
        }
        
        public void SwitchCommandNonFatalAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, object userState) {
            if ((this.onBeginSwitchCommandNonFatalDelegate == null)) {
                this.onBeginSwitchCommandNonFatalDelegate = new BeginOperationDelegate(this.OnBeginSwitchCommandNonFatal);
            }
            if ((this.onEndSwitchCommandNonFatalDelegate == null)) {
                this.onEndSwitchCommandNonFatalDelegate = new EndOperationDelegate(this.OnEndSwitchCommandNonFatal);
            }
            if ((this.onSwitchCommandNonFatalCompletedDelegate == null)) {
                this.onSwitchCommandNonFatalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSwitchCommandNonFatalCompleted);
            }
            base.InvokeAsync(this.onBeginSwitchCommandNonFatalDelegate, new object[] {
                        login,
                        command_id}, this.onEndSwitchCommandNonFatalDelegate, this.onSwitchCommandNonFatalCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginSwitchCommandAlwaysExecute(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSwitchCommandAlwaysExecute(login, command_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndSwitchCommandAlwaysExecute(System.IAsyncResult result) {
            base.Channel.EndSwitchCommandAlwaysExecute(result);
        }
        
        private System.IAsyncResult OnBeginSwitchCommandAlwaysExecute(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int command_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginSwitchCommandAlwaysExecute(login, command_id, callback, asyncState);
        }
        
        private object[] OnEndSwitchCommandAlwaysExecute(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndSwitchCommandAlwaysExecute(result);
            return null;
        }
        
        private void OnSwitchCommandAlwaysExecuteCompleted(object state) {
            if ((this.SwitchCommandAlwaysExecuteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SwitchCommandAlwaysExecuteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SwitchCommandAlwaysExecuteAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id) {
            this.SwitchCommandAlwaysExecuteAsync(login, command_id, null);
        }
        
        public void SwitchCommandAlwaysExecuteAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, object userState) {
            if ((this.onBeginSwitchCommandAlwaysExecuteDelegate == null)) {
                this.onBeginSwitchCommandAlwaysExecuteDelegate = new BeginOperationDelegate(this.OnBeginSwitchCommandAlwaysExecute);
            }
            if ((this.onEndSwitchCommandAlwaysExecuteDelegate == null)) {
                this.onEndSwitchCommandAlwaysExecuteDelegate = new EndOperationDelegate(this.OnEndSwitchCommandAlwaysExecute);
            }
            if ((this.onSwitchCommandAlwaysExecuteCompletedDelegate == null)) {
                this.onSwitchCommandAlwaysExecuteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSwitchCommandAlwaysExecuteCompleted);
            }
            base.InvokeAsync(this.onBeginSwitchCommandAlwaysExecuteDelegate, new object[] {
                        login,
                        command_id}, this.onEndSwitchCommandAlwaysExecuteDelegate, this.onSwitchCommandAlwaysExecuteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginSwitchCommandInternal(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSwitchCommandInternal(login, command_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndSwitchCommandInternal(System.IAsyncResult result) {
            base.Channel.EndSwitchCommandInternal(result);
        }
        
        private System.IAsyncResult OnBeginSwitchCommandInternal(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int command_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginSwitchCommandInternal(login, command_id, callback, asyncState);
        }
        
        private object[] OnEndSwitchCommandInternal(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndSwitchCommandInternal(result);
            return null;
        }
        
        private void OnSwitchCommandInternalCompleted(object state) {
            if ((this.SwitchCommandInternalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SwitchCommandInternalCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SwitchCommandInternalAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id) {
            this.SwitchCommandInternalAsync(login, command_id, null);
        }
        
        public void SwitchCommandInternalAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, object userState) {
            if ((this.onBeginSwitchCommandInternalDelegate == null)) {
                this.onBeginSwitchCommandInternalDelegate = new BeginOperationDelegate(this.OnBeginSwitchCommandInternal);
            }
            if ((this.onEndSwitchCommandInternalDelegate == null)) {
                this.onEndSwitchCommandInternalDelegate = new EndOperationDelegate(this.OnEndSwitchCommandInternal);
            }
            if ((this.onSwitchCommandInternalCompletedDelegate == null)) {
                this.onSwitchCommandInternalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSwitchCommandInternalCompleted);
            }
            base.InvokeAsync(this.onBeginSwitchCommandInternalDelegate, new object[] {
                        login,
                        command_id}, this.onEndSwitchCommandInternalDelegate, this.onSwitchCommandInternalCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginDeleteCommand(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteCommand(login, command_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndDeleteCommand(System.IAsyncResult result) {
            base.Channel.EndDeleteCommand(result);
        }
        
        private System.IAsyncResult OnBeginDeleteCommand(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int command_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginDeleteCommand(login, command_id, callback, asyncState);
        }
        
        private object[] OnEndDeleteCommand(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndDeleteCommand(result);
            return null;
        }
        
        private void OnDeleteCommandCompleted(object state) {
            if ((this.DeleteCommandCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteCommandCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteCommandAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id) {
            this.DeleteCommandAsync(login, command_id, null);
        }
        
        public void DeleteCommandAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, object userState) {
            if ((this.onBeginDeleteCommandDelegate == null)) {
                this.onBeginDeleteCommandDelegate = new BeginOperationDelegate(this.OnBeginDeleteCommand);
            }
            if ((this.onEndDeleteCommandDelegate == null)) {
                this.onEndDeleteCommandDelegate = new EndOperationDelegate(this.OnEndDeleteCommand);
            }
            if ((this.onDeleteCommandCompletedDelegate == null)) {
                this.onDeleteCommandCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteCommandCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteCommandDelegate, new object[] {
                        login,
                        command_id}, this.onEndDeleteCommandDelegate, this.onDeleteCommandCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginAddCommand(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string command, bool always_execute, bool nonfatal, int timeout, int sequence, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddCommand(login, lane_id, command, always_execute, nonfatal, timeout, sequence, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndAddCommand(System.IAsyncResult result) {
            base.Channel.EndAddCommand(result);
        }
        
        private System.IAsyncResult OnBeginAddCommand(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            string command = ((string)(inValues[2]));
            bool always_execute = ((bool)(inValues[3]));
            bool nonfatal = ((bool)(inValues[4]));
            int timeout = ((int)(inValues[5]));
            int sequence = ((int)(inValues[6]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginAddCommand(login, lane_id, command, always_execute, nonfatal, timeout, sequence, callback, asyncState);
        }
        
        private object[] OnEndAddCommand(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndAddCommand(result);
            return null;
        }
        
        private void OnAddCommandCompleted(object state) {
            if ((this.AddCommandCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddCommandCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddCommandAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string command, bool always_execute, bool nonfatal, int timeout, int sequence) {
            this.AddCommandAsync(login, lane_id, command, always_execute, nonfatal, timeout, sequence, null);
        }
        
        public void AddCommandAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string command, bool always_execute, bool nonfatal, int timeout, int sequence, object userState) {
            if ((this.onBeginAddCommandDelegate == null)) {
                this.onBeginAddCommandDelegate = new BeginOperationDelegate(this.OnBeginAddCommand);
            }
            if ((this.onEndAddCommandDelegate == null)) {
                this.onEndAddCommandDelegate = new EndOperationDelegate(this.OnEndAddCommand);
            }
            if ((this.onAddCommandCompletedDelegate == null)) {
                this.onAddCommandCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddCommandCompleted);
            }
            base.InvokeAsync(this.onBeginAddCommandDelegate, new object[] {
                        login,
                        lane_id,
                        command,
                        always_execute,
                        nonfatal,
                        timeout,
                        sequence}, this.onEndAddCommandDelegate, this.onAddCommandCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginSwitchHostEnabledForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSwitchHostEnabledForLane(login, lane_id, host_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndSwitchHostEnabledForLane(System.IAsyncResult result) {
            base.Channel.EndSwitchHostEnabledForLane(result);
        }
        
        private System.IAsyncResult OnBeginSwitchHostEnabledForLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            int host_id = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginSwitchHostEnabledForLane(login, lane_id, host_id, callback, asyncState);
        }
        
        private object[] OnEndSwitchHostEnabledForLane(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndSwitchHostEnabledForLane(result);
            return null;
        }
        
        private void OnSwitchHostEnabledForLaneCompleted(object state) {
            if ((this.SwitchHostEnabledForLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SwitchHostEnabledForLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SwitchHostEnabledForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id) {
            this.SwitchHostEnabledForLaneAsync(login, lane_id, host_id, null);
        }
        
        public void SwitchHostEnabledForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, object userState) {
            if ((this.onBeginSwitchHostEnabledForLaneDelegate == null)) {
                this.onBeginSwitchHostEnabledForLaneDelegate = new BeginOperationDelegate(this.OnBeginSwitchHostEnabledForLane);
            }
            if ((this.onEndSwitchHostEnabledForLaneDelegate == null)) {
                this.onEndSwitchHostEnabledForLaneDelegate = new EndOperationDelegate(this.OnEndSwitchHostEnabledForLane);
            }
            if ((this.onSwitchHostEnabledForLaneCompletedDelegate == null)) {
                this.onSwitchHostEnabledForLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSwitchHostEnabledForLaneCompleted);
            }
            base.InvokeAsync(this.onBeginSwitchHostEnabledForLaneDelegate, new object[] {
                        login,
                        lane_id,
                        host_id}, this.onEndSwitchHostEnabledForLaneDelegate, this.onSwitchHostEnabledForLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginRemoveHostForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveHostForLane(login, lane_id, host_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndRemoveHostForLane(System.IAsyncResult result) {
            base.Channel.EndRemoveHostForLane(result);
        }
        
        private System.IAsyncResult OnBeginRemoveHostForLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            int host_id = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginRemoveHostForLane(login, lane_id, host_id, callback, asyncState);
        }
        
        private object[] OnEndRemoveHostForLane(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndRemoveHostForLane(result);
            return null;
        }
        
        private void OnRemoveHostForLaneCompleted(object state) {
            if ((this.RemoveHostForLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveHostForLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveHostForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id) {
            this.RemoveHostForLaneAsync(login, lane_id, host_id, null);
        }
        
        public void RemoveHostForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, object userState) {
            if ((this.onBeginRemoveHostForLaneDelegate == null)) {
                this.onBeginRemoveHostForLaneDelegate = new BeginOperationDelegate(this.OnBeginRemoveHostForLane);
            }
            if ((this.onEndRemoveHostForLaneDelegate == null)) {
                this.onEndRemoveHostForLaneDelegate = new EndOperationDelegate(this.OnEndRemoveHostForLane);
            }
            if ((this.onRemoveHostForLaneCompletedDelegate == null)) {
                this.onRemoveHostForLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveHostForLaneCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveHostForLaneDelegate, new object[] {
                        login,
                        lane_id,
                        host_id}, this.onEndRemoveHostForLaneDelegate, this.onRemoveHostForLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginAddHostToLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddHostToLane(login, lane_id, host_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndAddHostToLane(System.IAsyncResult result) {
            base.Channel.EndAddHostToLane(result);
        }
        
        private System.IAsyncResult OnBeginAddHostToLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            int host_id = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginAddHostToLane(login, lane_id, host_id, callback, asyncState);
        }
        
        private object[] OnEndAddHostToLane(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndAddHostToLane(result);
            return null;
        }
        
        private void OnAddHostToLaneCompleted(object state) {
            if ((this.AddHostToLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddHostToLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddHostToLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id) {
            this.AddHostToLaneAsync(login, lane_id, host_id, null);
        }
        
        public void AddHostToLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, object userState) {
            if ((this.onBeginAddHostToLaneDelegate == null)) {
                this.onBeginAddHostToLaneDelegate = new BeginOperationDelegate(this.OnBeginAddHostToLane);
            }
            if ((this.onEndAddHostToLaneDelegate == null)) {
                this.onEndAddHostToLaneDelegate = new EndOperationDelegate(this.OnEndAddHostToLane);
            }
            if ((this.onAddHostToLaneCompletedDelegate == null)) {
                this.onAddHostToLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddHostToLaneCompleted);
            }
            base.InvokeAsync(this.onBeginAddHostToLaneDelegate, new object[] {
                        login,
                        lane_id,
                        host_id}, this.onEndAddHostToLaneDelegate, this.onAddHostToLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginAddDependencyToLane(MoonlightDrtViewer.MonkeyWrench.AddDependencyToLaneRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddDependencyToLane(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginAddDependencyToLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int dependent_lane_id, System.Nullable<int> host_id, MoonlightDrtViewer.MonkeyWrench.DBLaneDependencyCondition condition, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.AddDependencyToLaneRequest inValue = new MoonlightDrtViewer.MonkeyWrench.AddDependencyToLaneRequest();
            inValue.login = login;
            inValue.lane_id = lane_id;
            inValue.dependent_lane_id = dependent_lane_id;
            inValue.host_id = host_id;
            inValue.condition = condition;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginAddDependencyToLane(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.AddDependencyToLaneResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndAddDependencyToLane(System.IAsyncResult result) {
            return base.Channel.EndAddDependencyToLane(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private void EndAddDependencyToLane(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.AddDependencyToLaneResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndAddDependencyToLane(result);
        }
        
        private System.IAsyncResult OnBeginAddDependencyToLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            int dependent_lane_id = ((int)(inValues[2]));
            System.Nullable<int> host_id = ((System.Nullable<int>)(inValues[3]));
            MoonlightDrtViewer.MonkeyWrench.DBLaneDependencyCondition condition = ((MoonlightDrtViewer.MonkeyWrench.DBLaneDependencyCondition)(inValues[4]));
            return this.BeginAddDependencyToLane(login, lane_id, dependent_lane_id, host_id, condition, callback, asyncState);
        }
        
        private object[] OnEndAddDependencyToLane(System.IAsyncResult result) {
            this.EndAddDependencyToLane(result);
            return null;
        }
        
        private void OnAddDependencyToLaneCompleted(object state) {
            if ((this.AddDependencyToLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddDependencyToLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddDependencyToLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int dependent_lane_id, System.Nullable<int> host_id, MoonlightDrtViewer.MonkeyWrench.DBLaneDependencyCondition condition) {
            this.AddDependencyToLaneAsync(login, lane_id, dependent_lane_id, host_id, condition, null);
        }
        
        public void AddDependencyToLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int dependent_lane_id, System.Nullable<int> host_id, MoonlightDrtViewer.MonkeyWrench.DBLaneDependencyCondition condition, object userState) {
            if ((this.onBeginAddDependencyToLaneDelegate == null)) {
                this.onBeginAddDependencyToLaneDelegate = new BeginOperationDelegate(this.OnBeginAddDependencyToLane);
            }
            if ((this.onEndAddDependencyToLaneDelegate == null)) {
                this.onEndAddDependencyToLaneDelegate = new EndOperationDelegate(this.OnEndAddDependencyToLane);
            }
            if ((this.onAddDependencyToLaneCompletedDelegate == null)) {
                this.onAddDependencyToLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddDependencyToLaneCompleted);
            }
            base.InvokeAsync(this.onBeginAddDependencyToLaneDelegate, new object[] {
                        login,
                        lane_id,
                        dependent_lane_id,
                        host_id,
                        condition}, this.onEndAddDependencyToLaneDelegate, this.onAddDependencyToLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginEditLaneDependencyFilename(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, string filename, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditLaneDependencyFilename(login, lanedependency_id, filename, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndEditLaneDependencyFilename(System.IAsyncResult result) {
            base.Channel.EndEditLaneDependencyFilename(result);
        }
        
        private System.IAsyncResult OnBeginEditLaneDependencyFilename(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lanedependency_id = ((int)(inValues[1]));
            string filename = ((string)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginEditLaneDependencyFilename(login, lanedependency_id, filename, callback, asyncState);
        }
        
        private object[] OnEndEditLaneDependencyFilename(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndEditLaneDependencyFilename(result);
            return null;
        }
        
        private void OnEditLaneDependencyFilenameCompleted(object state) {
            if ((this.EditLaneDependencyFilenameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditLaneDependencyFilenameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditLaneDependencyFilenameAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, string filename) {
            this.EditLaneDependencyFilenameAsync(login, lanedependency_id, filename, null);
        }
        
        public void EditLaneDependencyFilenameAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, string filename, object userState) {
            if ((this.onBeginEditLaneDependencyFilenameDelegate == null)) {
                this.onBeginEditLaneDependencyFilenameDelegate = new BeginOperationDelegate(this.OnBeginEditLaneDependencyFilename);
            }
            if ((this.onEndEditLaneDependencyFilenameDelegate == null)) {
                this.onEndEditLaneDependencyFilenameDelegate = new EndOperationDelegate(this.OnEndEditLaneDependencyFilename);
            }
            if ((this.onEditLaneDependencyFilenameCompletedDelegate == null)) {
                this.onEditLaneDependencyFilenameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditLaneDependencyFilenameCompleted);
            }
            base.InvokeAsync(this.onBeginEditLaneDependencyFilenameDelegate, new object[] {
                        login,
                        lanedependency_id,
                        filename}, this.onEndEditLaneDependencyFilenameDelegate, this.onEditLaneDependencyFilenameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginDeleteLaneDependency(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteLaneDependency(login, lanedependency_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndDeleteLaneDependency(System.IAsyncResult result) {
            base.Channel.EndDeleteLaneDependency(result);
        }
        
        private System.IAsyncResult OnBeginDeleteLaneDependency(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lanedependency_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginDeleteLaneDependency(login, lanedependency_id, callback, asyncState);
        }
        
        private object[] OnEndDeleteLaneDependency(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndDeleteLaneDependency(result);
            return null;
        }
        
        private void OnDeleteLaneDependencyCompleted(object state) {
            if ((this.DeleteLaneDependencyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteLaneDependencyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteLaneDependencyAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id) {
            this.DeleteLaneDependencyAsync(login, lanedependency_id, null);
        }
        
        public void DeleteLaneDependencyAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, object userState) {
            if ((this.onBeginDeleteLaneDependencyDelegate == null)) {
                this.onBeginDeleteLaneDependencyDelegate = new BeginOperationDelegate(this.OnBeginDeleteLaneDependency);
            }
            if ((this.onEndDeleteLaneDependencyDelegate == null)) {
                this.onEndDeleteLaneDependencyDelegate = new EndOperationDelegate(this.OnEndDeleteLaneDependency);
            }
            if ((this.onDeleteLaneDependencyCompletedDelegate == null)) {
                this.onDeleteLaneDependencyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteLaneDependencyCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteLaneDependencyDelegate, new object[] {
                        login,
                        lanedependency_id}, this.onEndDeleteLaneDependencyDelegate, this.onDeleteLaneDependencyCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginEditLaneDependencyDownloads(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, string downloads, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditLaneDependencyDownloads(login, lanedependency_id, downloads, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndEditLaneDependencyDownloads(System.IAsyncResult result) {
            base.Channel.EndEditLaneDependencyDownloads(result);
        }
        
        private System.IAsyncResult OnBeginEditLaneDependencyDownloads(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lanedependency_id = ((int)(inValues[1]));
            string downloads = ((string)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginEditLaneDependencyDownloads(login, lanedependency_id, downloads, callback, asyncState);
        }
        
        private object[] OnEndEditLaneDependencyDownloads(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndEditLaneDependencyDownloads(result);
            return null;
        }
        
        private void OnEditLaneDependencyDownloadsCompleted(object state) {
            if ((this.EditLaneDependencyDownloadsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditLaneDependencyDownloadsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditLaneDependencyDownloadsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, string downloads) {
            this.EditLaneDependencyDownloadsAsync(login, lanedependency_id, downloads, null);
        }
        
        public void EditLaneDependencyDownloadsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, string downloads, object userState) {
            if ((this.onBeginEditLaneDependencyDownloadsDelegate == null)) {
                this.onBeginEditLaneDependencyDownloadsDelegate = new BeginOperationDelegate(this.OnBeginEditLaneDependencyDownloads);
            }
            if ((this.onEndEditLaneDependencyDownloadsDelegate == null)) {
                this.onEndEditLaneDependencyDownloadsDelegate = new EndOperationDelegate(this.OnEndEditLaneDependencyDownloads);
            }
            if ((this.onEditLaneDependencyDownloadsCompletedDelegate == null)) {
                this.onEditLaneDependencyDownloadsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditLaneDependencyDownloadsCompleted);
            }
            base.InvokeAsync(this.onBeginEditLaneDependencyDownloadsDelegate, new object[] {
                        login,
                        lanedependency_id,
                        downloads}, this.onEndEditLaneDependencyDownloadsDelegate, this.onEditLaneDependencyDownloadsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginUnlinkDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int directive_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUnlinkDeletionDirective(login, directive_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndUnlinkDeletionDirective(System.IAsyncResult result) {
            base.Channel.EndUnlinkDeletionDirective(result);
        }
        
        private System.IAsyncResult OnBeginUnlinkDeletionDirective(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int directive_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginUnlinkDeletionDirective(login, directive_id, callback, asyncState);
        }
        
        private object[] OnEndUnlinkDeletionDirective(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndUnlinkDeletionDirective(result);
            return null;
        }
        
        private void OnUnlinkDeletionDirectiveCompleted(object state) {
            if ((this.UnlinkDeletionDirectiveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UnlinkDeletionDirectiveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UnlinkDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int directive_id) {
            this.UnlinkDeletionDirectiveAsync(login, directive_id, null);
        }
        
        public void UnlinkDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int directive_id, object userState) {
            if ((this.onBeginUnlinkDeletionDirectiveDelegate == null)) {
                this.onBeginUnlinkDeletionDirectiveDelegate = new BeginOperationDelegate(this.OnBeginUnlinkDeletionDirective);
            }
            if ((this.onEndUnlinkDeletionDirectiveDelegate == null)) {
                this.onEndUnlinkDeletionDirectiveDelegate = new EndOperationDelegate(this.OnEndUnlinkDeletionDirective);
            }
            if ((this.onUnlinkDeletionDirectiveCompletedDelegate == null)) {
                this.onUnlinkDeletionDirectiveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnlinkDeletionDirectiveCompleted);
            }
            base.InvokeAsync(this.onBeginUnlinkDeletionDirectiveDelegate, new object[] {
                        login,
                        directive_id}, this.onEndUnlinkDeletionDirectiveDelegate, this.onUnlinkDeletionDirectiveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginDeleteDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_directive_id, int file_directive_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteDeletionDirective(login, lane_directive_id, file_directive_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndDeleteDeletionDirective(System.IAsyncResult result) {
            base.Channel.EndDeleteDeletionDirective(result);
        }
        
        private System.IAsyncResult OnBeginDeleteDeletionDirective(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_directive_id = ((int)(inValues[1]));
            int file_directive_id = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginDeleteDeletionDirective(login, lane_directive_id, file_directive_id, callback, asyncState);
        }
        
        private object[] OnEndDeleteDeletionDirective(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndDeleteDeletionDirective(result);
            return null;
        }
        
        private void OnDeleteDeletionDirectiveCompleted(object state) {
            if ((this.DeleteDeletionDirectiveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteDeletionDirectiveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_directive_id, int file_directive_id) {
            this.DeleteDeletionDirectiveAsync(login, lane_directive_id, file_directive_id, null);
        }
        
        public void DeleteDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_directive_id, int file_directive_id, object userState) {
            if ((this.onBeginDeleteDeletionDirectiveDelegate == null)) {
                this.onBeginDeleteDeletionDirectiveDelegate = new BeginOperationDelegate(this.OnBeginDeleteDeletionDirective);
            }
            if ((this.onEndDeleteDeletionDirectiveDelegate == null)) {
                this.onEndDeleteDeletionDirectiveDelegate = new EndOperationDelegate(this.OnEndDeleteDeletionDirective);
            }
            if ((this.onDeleteDeletionDirectiveCompletedDelegate == null)) {
                this.onDeleteDeletionDirectiveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteDeletionDirectiveCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteDeletionDirectiveDelegate, new object[] {
                        login,
                        lane_directive_id,
                        file_directive_id}, this.onEndDeleteDeletionDirectiveDelegate, this.onDeleteDeletionDirectiveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginEnableDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_deletion_directive_id, bool enabled, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEnableDeletionDirective(login, lane_deletion_directive_id, enabled, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndEnableDeletionDirective(System.IAsyncResult result) {
            base.Channel.EndEnableDeletionDirective(result);
        }
        
        private System.IAsyncResult OnBeginEnableDeletionDirective(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_deletion_directive_id = ((int)(inValues[1]));
            bool enabled = ((bool)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginEnableDeletionDirective(login, lane_deletion_directive_id, enabled, callback, asyncState);
        }
        
        private object[] OnEndEnableDeletionDirective(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndEnableDeletionDirective(result);
            return null;
        }
        
        private void OnEnableDeletionDirectiveCompleted(object state) {
            if ((this.EnableDeletionDirectiveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EnableDeletionDirectiveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EnableDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_deletion_directive_id, bool enabled) {
            this.EnableDeletionDirectiveAsync(login, lane_deletion_directive_id, enabled, null);
        }
        
        public void EnableDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_deletion_directive_id, bool enabled, object userState) {
            if ((this.onBeginEnableDeletionDirectiveDelegate == null)) {
                this.onBeginEnableDeletionDirectiveDelegate = new BeginOperationDelegate(this.OnBeginEnableDeletionDirective);
            }
            if ((this.onEndEnableDeletionDirectiveDelegate == null)) {
                this.onEndEnableDeletionDirectiveDelegate = new EndOperationDelegate(this.OnEndEnableDeletionDirective);
            }
            if ((this.onEnableDeletionDirectiveCompletedDelegate == null)) {
                this.onEnableDeletionDirectiveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEnableDeletionDirectiveCompleted);
            }
            base.InvokeAsync(this.onBeginEnableDeletionDirectiveDelegate, new object[] {
                        login,
                        lane_deletion_directive_id,
                        enabled}, this.onEndEnableDeletionDirectiveDelegate, this.onEnableDeletionDirectiveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginAddFileDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string filename, string name, MoonlightDrtViewer.MonkeyWrench.DBMatchMode match_mode, int x, MoonlightDrtViewer.MonkeyWrench.DBDeleteCondition condition, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddFileDeletionDirective(login, filename, name, match_mode, x, condition, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndAddFileDeletionDirective(System.IAsyncResult result) {
            return base.Channel.EndAddFileDeletionDirective(result);
        }
        
        private System.IAsyncResult OnBeginAddFileDeletionDirective(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            string filename = ((string)(inValues[1]));
            string name = ((string)(inValues[2]));
            MoonlightDrtViewer.MonkeyWrench.DBMatchMode match_mode = ((MoonlightDrtViewer.MonkeyWrench.DBMatchMode)(inValues[3]));
            int x = ((int)(inValues[4]));
            MoonlightDrtViewer.MonkeyWrench.DBDeleteCondition condition = ((MoonlightDrtViewer.MonkeyWrench.DBDeleteCondition)(inValues[5]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginAddFileDeletionDirective(login, filename, name, match_mode, x, condition, callback, asyncState);
        }
        
        private object[] OnEndAddFileDeletionDirective(System.IAsyncResult result) {
            int retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndAddFileDeletionDirective(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddFileDeletionDirectiveCompleted(object state) {
            if ((this.AddFileDeletionDirectiveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddFileDeletionDirectiveCompleted(this, new AddFileDeletionDirectiveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddFileDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string filename, string name, MoonlightDrtViewer.MonkeyWrench.DBMatchMode match_mode, int x, MoonlightDrtViewer.MonkeyWrench.DBDeleteCondition condition) {
            this.AddFileDeletionDirectiveAsync(login, filename, name, match_mode, x, condition, null);
        }
        
        public void AddFileDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string filename, string name, MoonlightDrtViewer.MonkeyWrench.DBMatchMode match_mode, int x, MoonlightDrtViewer.MonkeyWrench.DBDeleteCondition condition, object userState) {
            if ((this.onBeginAddFileDeletionDirectiveDelegate == null)) {
                this.onBeginAddFileDeletionDirectiveDelegate = new BeginOperationDelegate(this.OnBeginAddFileDeletionDirective);
            }
            if ((this.onEndAddFileDeletionDirectiveDelegate == null)) {
                this.onEndAddFileDeletionDirectiveDelegate = new EndOperationDelegate(this.OnEndAddFileDeletionDirective);
            }
            if ((this.onAddFileDeletionDirectiveCompletedDelegate == null)) {
                this.onAddFileDeletionDirectiveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddFileDeletionDirectiveCompleted);
            }
            base.InvokeAsync(this.onBeginAddFileDeletionDirectiveDelegate, new object[] {
                        login,
                        filename,
                        name,
                        match_mode,
                        x,
                        condition}, this.onEndAddFileDeletionDirectiveDelegate, this.onAddFileDeletionDirectiveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginAddLaneDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int file_deletion_directive_id, int lane_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddLaneDeletionDirective(login, file_deletion_directive_id, lane_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndAddLaneDeletionDirective(System.IAsyncResult result) {
            return base.Channel.EndAddLaneDeletionDirective(result);
        }
        
        private System.IAsyncResult OnBeginAddLaneDeletionDirective(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int file_deletion_directive_id = ((int)(inValues[1]));
            int lane_id = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginAddLaneDeletionDirective(login, file_deletion_directive_id, lane_id, callback, asyncState);
        }
        
        private object[] OnEndAddLaneDeletionDirective(System.IAsyncResult result) {
            int retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndAddLaneDeletionDirective(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddLaneDeletionDirectiveCompleted(object state) {
            if ((this.AddLaneDeletionDirectiveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddLaneDeletionDirectiveCompleted(this, new AddLaneDeletionDirectiveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddLaneDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int file_deletion_directive_id, int lane_id) {
            this.AddLaneDeletionDirectiveAsync(login, file_deletion_directive_id, lane_id, null);
        }
        
        public void AddLaneDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int file_deletion_directive_id, int lane_id, object userState) {
            if ((this.onBeginAddLaneDeletionDirectiveDelegate == null)) {
                this.onBeginAddLaneDeletionDirectiveDelegate = new BeginOperationDelegate(this.OnBeginAddLaneDeletionDirective);
            }
            if ((this.onEndAddLaneDeletionDirectiveDelegate == null)) {
                this.onEndAddLaneDeletionDirectiveDelegate = new EndOperationDelegate(this.OnEndAddLaneDeletionDirective);
            }
            if ((this.onAddLaneDeletionDirectiveCompletedDelegate == null)) {
                this.onAddLaneDeletionDirectiveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddLaneDeletionDirectiveCompleted);
            }
            base.InvokeAsync(this.onBeginAddLaneDeletionDirectiveDelegate, new object[] {
                        login,
                        file_deletion_directive_id,
                        lane_id}, this.onEndAddLaneDeletionDirectiveDelegate, this.onAddLaneDeletionDirectiveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginFindLaneDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int file_deletion_directive_id, int lane_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindLaneDeletionDirective(login, file_deletion_directive_id, lane_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.DBLaneDeletionDirectiveView MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndFindLaneDeletionDirective(System.IAsyncResult result) {
            return base.Channel.EndFindLaneDeletionDirective(result);
        }
        
        private System.IAsyncResult OnBeginFindLaneDeletionDirective(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int file_deletion_directive_id = ((int)(inValues[1]));
            int lane_id = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginFindLaneDeletionDirective(login, file_deletion_directive_id, lane_id, callback, asyncState);
        }
        
        private object[] OnEndFindLaneDeletionDirective(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.DBLaneDeletionDirectiveView retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndFindLaneDeletionDirective(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindLaneDeletionDirectiveCompleted(object state) {
            if ((this.FindLaneDeletionDirectiveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindLaneDeletionDirectiveCompleted(this, new FindLaneDeletionDirectiveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindLaneDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int file_deletion_directive_id, int lane_id) {
            this.FindLaneDeletionDirectiveAsync(login, file_deletion_directive_id, lane_id, null);
        }
        
        public void FindLaneDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int file_deletion_directive_id, int lane_id, object userState) {
            if ((this.onBeginFindLaneDeletionDirectiveDelegate == null)) {
                this.onBeginFindLaneDeletionDirectiveDelegate = new BeginOperationDelegate(this.OnBeginFindLaneDeletionDirective);
            }
            if ((this.onEndFindLaneDeletionDirectiveDelegate == null)) {
                this.onEndFindLaneDeletionDirectiveDelegate = new EndOperationDelegate(this.OnEndFindLaneDeletionDirective);
            }
            if ((this.onFindLaneDeletionDirectiveCompletedDelegate == null)) {
                this.onFindLaneDeletionDirectiveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindLaneDeletionDirectiveCompleted);
            }
            base.InvokeAsync(this.onBeginFindLaneDeletionDirectiveDelegate, new object[] {
                        login,
                        file_deletion_directive_id,
                        lane_id}, this.onEndFindLaneDeletionDirectiveDelegate, this.onFindLaneDeletionDirectiveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLane(login, lane_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetLaneResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetLane(System.IAsyncResult result) {
            return base.Channel.EndGetLane(result);
        }
        
        private System.IAsyncResult OnBeginGetLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetLane(login, lane_id, callback, asyncState);
        }
        
        private object[] OnEndGetLane(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetLaneResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetLane(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLaneCompleted(object state) {
            if ((this.GetLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLaneCompleted(this, new GetLaneCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id) {
            this.GetLaneAsync(login, lane_id, null);
        }
        
        public void GetLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, object userState) {
            if ((this.onBeginGetLaneDelegate == null)) {
                this.onBeginGetLaneDelegate = new BeginOperationDelegate(this.OnBeginGetLane);
            }
            if ((this.onEndGetLaneDelegate == null)) {
                this.onEndGetLaneDelegate = new EndOperationDelegate(this.OnEndGetLane);
            }
            if ((this.onGetLaneCompletedDelegate == null)) {
                this.onGetLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLaneCompleted);
            }
            base.InvokeAsync(this.onBeginGetLaneDelegate, new object[] {
                        login,
                        lane_id}, this.onEndGetLaneDelegate, this.onGetLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetWorkHostHistory(MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWorkHostHistory(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetWorkHostHistory(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> host_id, string host, int limit, int offset, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryRequest inValue = new MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryRequest();
            inValue.login = login;
            inValue.host_id = host_id;
            inValue.host = host;
            inValue.limit = limit;
            inValue.offset = offset;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetWorkHostHistory(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryResponse1 MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetWorkHostHistory(System.IAsyncResult result) {
            return base.Channel.EndGetWorkHostHistory(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryResponse EndGetWorkHostHistory(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryResponse1 retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetWorkHostHistory(result);
            return retVal.GetWorkHostHistoryResult;
        }
        
        private System.IAsyncResult OnBeginGetWorkHostHistory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> host_id = ((System.Nullable<int>)(inValues[1]));
            string host = ((string)(inValues[2]));
            int limit = ((int)(inValues[3]));
            int offset = ((int)(inValues[4]));
            return this.BeginGetWorkHostHistory(login, host_id, host, limit, offset, callback, asyncState);
        }
        
        private object[] OnEndGetWorkHostHistory(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryResponse retVal = this.EndGetWorkHostHistory(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWorkHostHistoryCompleted(object state) {
            if ((this.GetWorkHostHistoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWorkHostHistoryCompleted(this, new GetWorkHostHistoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWorkHostHistoryAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> host_id, string host, int limit, int offset) {
            this.GetWorkHostHistoryAsync(login, host_id, host, limit, offset, null);
        }
        
        public void GetWorkHostHistoryAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> host_id, string host, int limit, int offset, object userState) {
            if ((this.onBeginGetWorkHostHistoryDelegate == null)) {
                this.onBeginGetWorkHostHistoryDelegate = new BeginOperationDelegate(this.OnBeginGetWorkHostHistory);
            }
            if ((this.onEndGetWorkHostHistoryDelegate == null)) {
                this.onEndGetWorkHostHistoryDelegate = new EndOperationDelegate(this.OnEndGetWorkHostHistory);
            }
            if ((this.onGetWorkHostHistoryCompletedDelegate == null)) {
                this.onGetWorkHostHistoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWorkHostHistoryCompleted);
            }
            base.InvokeAsync(this.onBeginGetWorkHostHistoryDelegate, new object[] {
                        login,
                        host_id,
                        host,
                        limit,
                        offset}, this.onEndGetWorkHostHistoryDelegate, this.onGetWorkHostHistoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetHostForEdit(MoonlightDrtViewer.MonkeyWrench.GetHostForEditRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHostForEdit(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetHostForEdit(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> host_id, string host, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.GetHostForEditRequest inValue = new MoonlightDrtViewer.MonkeyWrench.GetHostForEditRequest();
            inValue.login = login;
            inValue.host_id = host_id;
            inValue.host = host;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetHostForEdit(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetHostForEditResponse1 MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetHostForEdit(System.IAsyncResult result) {
            return base.Channel.EndGetHostForEdit(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.GetHostForEditResponse EndGetHostForEdit(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetHostForEditResponse1 retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetHostForEdit(result);
            return retVal.GetHostForEditResult;
        }
        
        private System.IAsyncResult OnBeginGetHostForEdit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> host_id = ((System.Nullable<int>)(inValues[1]));
            string host = ((string)(inValues[2]));
            return this.BeginGetHostForEdit(login, host_id, host, callback, asyncState);
        }
        
        private object[] OnEndGetHostForEdit(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetHostForEditResponse retVal = this.EndGetHostForEdit(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHostForEditCompleted(object state) {
            if ((this.GetHostForEditCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHostForEditCompleted(this, new GetHostForEditCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHostForEditAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> host_id, string host) {
            this.GetHostForEditAsync(login, host_id, host, null);
        }
        
        public void GetHostForEditAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> host_id, string host, object userState) {
            if ((this.onBeginGetHostForEditDelegate == null)) {
                this.onBeginGetHostForEditDelegate = new BeginOperationDelegate(this.OnBeginGetHostForEdit);
            }
            if ((this.onEndGetHostForEditDelegate == null)) {
                this.onEndGetHostForEditDelegate = new EndOperationDelegate(this.OnEndGetHostForEdit);
            }
            if ((this.onGetHostForEditCompletedDelegate == null)) {
                this.onGetHostForEditCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHostForEditCompleted);
            }
            base.InvokeAsync(this.onBeginGetHostForEditDelegate, new object[] {
                        login,
                        host_id,
                        host}, this.onEndGetHostForEditDelegate, this.onGetHostForEditCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginAddMasterHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, int masterhost_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddMasterHost(login, host_id, masterhost_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndAddMasterHost(System.IAsyncResult result) {
            base.Channel.EndAddMasterHost(result);
        }
        
        private System.IAsyncResult OnBeginAddMasterHost(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int host_id = ((int)(inValues[1]));
            int masterhost_id = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginAddMasterHost(login, host_id, masterhost_id, callback, asyncState);
        }
        
        private object[] OnEndAddMasterHost(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndAddMasterHost(result);
            return null;
        }
        
        private void OnAddMasterHostCompleted(object state) {
            if ((this.AddMasterHostCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddMasterHostCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddMasterHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, int masterhost_id) {
            this.AddMasterHostAsync(login, host_id, masterhost_id, null);
        }
        
        public void AddMasterHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, int masterhost_id, object userState) {
            if ((this.onBeginAddMasterHostDelegate == null)) {
                this.onBeginAddMasterHostDelegate = new BeginOperationDelegate(this.OnBeginAddMasterHost);
            }
            if ((this.onEndAddMasterHostDelegate == null)) {
                this.onEndAddMasterHostDelegate = new EndOperationDelegate(this.OnEndAddMasterHost);
            }
            if ((this.onAddMasterHostCompletedDelegate == null)) {
                this.onAddMasterHostCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddMasterHostCompleted);
            }
            base.InvokeAsync(this.onBeginAddMasterHostDelegate, new object[] {
                        login,
                        host_id,
                        masterhost_id}, this.onEndAddMasterHostDelegate, this.onAddMasterHostCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginRemoveMasterHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, int masterhost_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveMasterHost(login, host_id, masterhost_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndRemoveMasterHost(System.IAsyncResult result) {
            base.Channel.EndRemoveMasterHost(result);
        }
        
        private System.IAsyncResult OnBeginRemoveMasterHost(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int host_id = ((int)(inValues[1]));
            int masterhost_id = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginRemoveMasterHost(login, host_id, masterhost_id, callback, asyncState);
        }
        
        private object[] OnEndRemoveMasterHost(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndRemoveMasterHost(result);
            return null;
        }
        
        private void OnRemoveMasterHostCompleted(object state) {
            if ((this.RemoveMasterHostCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveMasterHostCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveMasterHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, int masterhost_id) {
            this.RemoveMasterHostAsync(login, host_id, masterhost_id, null);
        }
        
        public void RemoveMasterHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, int masterhost_id, object userState) {
            if ((this.onBeginRemoveMasterHostDelegate == null)) {
                this.onBeginRemoveMasterHostDelegate = new BeginOperationDelegate(this.OnBeginRemoveMasterHost);
            }
            if ((this.onEndRemoveMasterHostDelegate == null)) {
                this.onEndRemoveMasterHostDelegate = new EndOperationDelegate(this.OnEndRemoveMasterHost);
            }
            if ((this.onRemoveMasterHostCompletedDelegate == null)) {
                this.onRemoveMasterHostCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveMasterHostCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveMasterHostDelegate, new object[] {
                        login,
                        host_id,
                        masterhost_id}, this.onEndRemoveMasterHostDelegate, this.onRemoveMasterHostCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetLaneForEdit(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string lane, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLaneForEdit(login, lane_id, lane, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetLaneForEditResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetLaneForEdit(System.IAsyncResult result) {
            return base.Channel.EndGetLaneForEdit(result);
        }
        
        private System.IAsyncResult OnBeginGetLaneForEdit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            string lane = ((string)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetLaneForEdit(login, lane_id, lane, callback, asyncState);
        }
        
        private object[] OnEndGetLaneForEdit(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetLaneForEditResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetLaneForEdit(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLaneForEditCompleted(object state) {
            if ((this.GetLaneForEditCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLaneForEditCompleted(this, new GetLaneForEditCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLaneForEditAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string lane) {
            this.GetLaneForEditAsync(login, lane_id, lane, null);
        }
        
        public void GetLaneForEditAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string lane, object userState) {
            if ((this.onBeginGetLaneForEditDelegate == null)) {
                this.onBeginGetLaneForEditDelegate = new BeginOperationDelegate(this.OnBeginGetLaneForEdit);
            }
            if ((this.onEndGetLaneForEditDelegate == null)) {
                this.onEndGetLaneForEditDelegate = new EndOperationDelegate(this.OnEndGetLaneForEdit);
            }
            if ((this.onGetLaneForEditCompletedDelegate == null)) {
                this.onGetLaneForEditCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLaneForEditCompleted);
            }
            base.InvokeAsync(this.onBeginGetLaneForEditDelegate, new object[] {
                        login,
                        lane_id,
                        lane}, this.onEndGetLaneForEditDelegate, this.onGetLaneForEditCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginFindHost(MoonlightDrtViewer.MonkeyWrench.FindHostRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindHost(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginFindHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> host_id, string host, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.FindHostRequest inValue = new MoonlightDrtViewer.MonkeyWrench.FindHostRequest();
            inValue.login = login;
            inValue.host_id = host_id;
            inValue.host = host;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginFindHost(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.FindHostResponse1 MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndFindHost(System.IAsyncResult result) {
            return base.Channel.EndFindHost(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.FindHostResponse EndFindHost(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.FindHostResponse1 retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndFindHost(result);
            return retVal.FindHostResult;
        }
        
        private System.IAsyncResult OnBeginFindHost(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> host_id = ((System.Nullable<int>)(inValues[1]));
            string host = ((string)(inValues[2]));
            return this.BeginFindHost(login, host_id, host, callback, asyncState);
        }
        
        private object[] OnEndFindHost(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.FindHostResponse retVal = this.EndFindHost(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindHostCompleted(object state) {
            if ((this.FindHostCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindHostCompleted(this, new FindHostCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> host_id, string host) {
            this.FindHostAsync(login, host_id, host, null);
        }
        
        public void FindHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> host_id, string host, object userState) {
            if ((this.onBeginFindHostDelegate == null)) {
                this.onBeginFindHostDelegate = new BeginOperationDelegate(this.OnBeginFindHost);
            }
            if ((this.onEndFindHostDelegate == null)) {
                this.onEndFindHostDelegate = new EndOperationDelegate(this.OnEndFindHost);
            }
            if ((this.onFindHostCompletedDelegate == null)) {
                this.onFindHostCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindHostCompleted);
            }
            base.InvokeAsync(this.onBeginFindHostDelegate, new object[] {
                        login,
                        host_id,
                        host}, this.onEndFindHostDelegate, this.onFindHostCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginFindRevisionForLane(MoonlightDrtViewer.MonkeyWrench.FindRevisionForLaneRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindRevisionForLane(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginFindRevisionForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> revision_id, string revision, System.Nullable<int> lane_id, string lane, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.FindRevisionForLaneRequest inValue = new MoonlightDrtViewer.MonkeyWrench.FindRevisionForLaneRequest();
            inValue.login = login;
            inValue.revision_id = revision_id;
            inValue.revision = revision;
            inValue.lane_id = lane_id;
            inValue.lane = lane;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginFindRevisionForLane(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.FindRevisionForLaneResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndFindRevisionForLane(System.IAsyncResult result) {
            return base.Channel.EndFindRevisionForLane(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse EndFindRevisionForLane(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.FindRevisionForLaneResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndFindRevisionForLane(result);
            return retVal.FindRevisionForLaneResult;
        }
        
        private System.IAsyncResult OnBeginFindRevisionForLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> revision_id = ((System.Nullable<int>)(inValues[1]));
            string revision = ((string)(inValues[2]));
            System.Nullable<int> lane_id = ((System.Nullable<int>)(inValues[3]));
            string lane = ((string)(inValues[4]));
            return this.BeginFindRevisionForLane(login, revision_id, revision, lane_id, lane, callback, asyncState);
        }
        
        private object[] OnEndFindRevisionForLane(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse retVal = this.EndFindRevisionForLane(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindRevisionForLaneCompleted(object state) {
            if ((this.FindRevisionForLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindRevisionForLaneCompleted(this, new FindRevisionForLaneCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindRevisionForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> revision_id, string revision, System.Nullable<int> lane_id, string lane) {
            this.FindRevisionForLaneAsync(login, revision_id, revision, lane_id, lane, null);
        }
        
        public void FindRevisionForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> revision_id, string revision, System.Nullable<int> lane_id, string lane, object userState) {
            if ((this.onBeginFindRevisionForLaneDelegate == null)) {
                this.onBeginFindRevisionForLaneDelegate = new BeginOperationDelegate(this.OnBeginFindRevisionForLane);
            }
            if ((this.onEndFindRevisionForLaneDelegate == null)) {
                this.onEndFindRevisionForLaneDelegate = new EndOperationDelegate(this.OnEndFindRevisionForLane);
            }
            if ((this.onFindRevisionForLaneCompletedDelegate == null)) {
                this.onFindRevisionForLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindRevisionForLaneCompleted);
            }
            base.InvokeAsync(this.onBeginFindRevisionForLaneDelegate, new object[] {
                        login,
                        revision_id,
                        revision,
                        lane_id,
                        lane}, this.onEndFindRevisionForLaneDelegate, this.onFindRevisionForLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginFindRevision(MoonlightDrtViewer.MonkeyWrench.FindRevisionRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindRevision(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginFindRevision(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> revision_id, string revision, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.FindRevisionRequest inValue = new MoonlightDrtViewer.MonkeyWrench.FindRevisionRequest();
            inValue.login = login;
            inValue.revision_id = revision_id;
            inValue.revision = revision;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginFindRevision(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse1 MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndFindRevision(System.IAsyncResult result) {
            return base.Channel.EndFindRevision(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse EndFindRevision(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse1 retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndFindRevision(result);
            return retVal.FindRevisionResult;
        }
        
        private System.IAsyncResult OnBeginFindRevision(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> revision_id = ((System.Nullable<int>)(inValues[1]));
            string revision = ((string)(inValues[2]));
            return this.BeginFindRevision(login, revision_id, revision, callback, asyncState);
        }
        
        private object[] OnEndFindRevision(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse retVal = this.EndFindRevision(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindRevisionCompleted(object state) {
            if ((this.FindRevisionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindRevisionCompleted(this, new FindRevisionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindRevisionAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> revision_id, string revision) {
            this.FindRevisionAsync(login, revision_id, revision, null);
        }
        
        public void FindRevisionAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> revision_id, string revision, object userState) {
            if ((this.onBeginFindRevisionDelegate == null)) {
                this.onBeginFindRevisionDelegate = new BeginOperationDelegate(this.OnBeginFindRevision);
            }
            if ((this.onEndFindRevisionDelegate == null)) {
                this.onEndFindRevisionDelegate = new EndOperationDelegate(this.OnEndFindRevision);
            }
            if ((this.onFindRevisionCompletedDelegate == null)) {
                this.onFindRevisionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindRevisionCompleted);
            }
            base.InvokeAsync(this.onBeginFindRevisionDelegate, new object[] {
                        login,
                        revision_id,
                        revision}, this.onEndFindRevisionDelegate, this.onFindRevisionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginFindLane(MoonlightDrtViewer.MonkeyWrench.FindLaneRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindLane(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginFindLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.FindLaneRequest inValue = new MoonlightDrtViewer.MonkeyWrench.FindLaneRequest();
            inValue.login = login;
            inValue.lane_id = lane_id;
            inValue.lane = lane;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginFindLane(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.FindLaneResponse1 MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndFindLane(System.IAsyncResult result) {
            return base.Channel.EndFindLane(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.FindLaneResponse EndFindLane(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.FindLaneResponse1 retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndFindLane(result);
            return retVal.FindLaneResult;
        }
        
        private System.IAsyncResult OnBeginFindLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> lane_id = ((System.Nullable<int>)(inValues[1]));
            string lane = ((string)(inValues[2]));
            return this.BeginFindLane(login, lane_id, lane, callback, asyncState);
        }
        
        private object[] OnEndFindLane(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.FindLaneResponse retVal = this.EndFindLane(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindLaneCompleted(object state) {
            if ((this.FindLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindLaneCompleted(this, new FindLaneCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane) {
            this.FindLaneAsync(login, lane_id, lane, null);
        }
        
        public void FindLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, object userState) {
            if ((this.onBeginFindLaneDelegate == null)) {
                this.onBeginFindLaneDelegate = new BeginOperationDelegate(this.OnBeginFindLane);
            }
            if ((this.onEndFindLaneDelegate == null)) {
                this.onEndFindLaneDelegate = new EndOperationDelegate(this.OnEndFindLane);
            }
            if ((this.onFindLaneCompletedDelegate == null)) {
                this.onFindLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindLaneCompleted);
            }
            base.InvokeAsync(this.onBeginFindLaneDelegate, new object[] {
                        login,
                        lane_id,
                        lane}, this.onEndFindLaneDelegate, this.onFindLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginEditLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBLane lane, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditLane(login, lane, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndEditLane(System.IAsyncResult result) {
            base.Channel.EndEditLane(result);
        }
        
        private System.IAsyncResult OnBeginEditLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBLane lane = ((MoonlightDrtViewer.MonkeyWrench.DBLane)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginEditLane(login, lane, callback, asyncState);
        }
        
        private object[] OnEndEditLane(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndEditLane(result);
            return null;
        }
        
        private void OnEditLaneCompleted(object state) {
            if ((this.EditLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBLane lane) {
            this.EditLaneAsync(login, lane, null);
        }
        
        public void EditLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBLane lane, object userState) {
            if ((this.onBeginEditLaneDelegate == null)) {
                this.onBeginEditLaneDelegate = new BeginOperationDelegate(this.OnBeginEditLane);
            }
            if ((this.onEndEditLaneDelegate == null)) {
                this.onEndEditLaneDelegate = new EndOperationDelegate(this.OnEndEditLane);
            }
            if ((this.onEditLaneCompletedDelegate == null)) {
                this.onEditLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditLaneCompleted);
            }
            base.InvokeAsync(this.onBeginEditLaneDelegate, new object[] {
                        login,
                        lane}, this.onEndEditLaneDelegate, this.onEditLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginEditHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBHost host, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditHost(login, host, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndEditHost(System.IAsyncResult result) {
            base.Channel.EndEditHost(result);
        }
        
        private System.IAsyncResult OnBeginEditHost(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBHost host = ((MoonlightDrtViewer.MonkeyWrench.DBHost)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginEditHost(login, host, callback, asyncState);
        }
        
        private object[] OnEndEditHost(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndEditHost(result);
            return null;
        }
        
        private void OnEditHostCompleted(object state) {
            if ((this.EditHostCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditHostCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBHost host) {
            this.EditHostAsync(login, host, null);
        }
        
        public void EditHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBHost host, object userState) {
            if ((this.onBeginEditHostDelegate == null)) {
                this.onBeginEditHostDelegate = new BeginOperationDelegate(this.OnBeginEditHost);
            }
            if ((this.onEndEditHostDelegate == null)) {
                this.onEndEditHostDelegate = new EndOperationDelegate(this.OnEndEditHost);
            }
            if ((this.onEditHostCompletedDelegate == null)) {
                this.onEditHostCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditHostCompleted);
            }
            base.InvokeAsync(this.onBeginEditHostDelegate, new object[] {
                        login,
                        host}, this.onEndEditHostDelegate, this.onEditHostCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginEditHostWithPassword(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBHost host, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditHostWithPassword(login, host, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndEditHostWithPassword(System.IAsyncResult result) {
            base.Channel.EndEditHostWithPassword(result);
        }
        
        private System.IAsyncResult OnBeginEditHostWithPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBHost host = ((MoonlightDrtViewer.MonkeyWrench.DBHost)(inValues[1]));
            string password = ((string)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginEditHostWithPassword(login, host, password, callback, asyncState);
        }
        
        private object[] OnEndEditHostWithPassword(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndEditHostWithPassword(result);
            return null;
        }
        
        private void OnEditHostWithPasswordCompleted(object state) {
            if ((this.EditHostWithPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditHostWithPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditHostWithPasswordAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBHost host, string password) {
            this.EditHostWithPasswordAsync(login, host, password, null);
        }
        
        public void EditHostWithPasswordAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBHost host, string password, object userState) {
            if ((this.onBeginEditHostWithPasswordDelegate == null)) {
                this.onBeginEditHostWithPasswordDelegate = new BeginOperationDelegate(this.OnBeginEditHostWithPassword);
            }
            if ((this.onEndEditHostWithPasswordDelegate == null)) {
                this.onEndEditHostWithPasswordDelegate = new EndOperationDelegate(this.OnEndEditHostWithPassword);
            }
            if ((this.onEditHostWithPasswordCompletedDelegate == null)) {
                this.onEditHostWithPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditHostWithPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginEditHostWithPasswordDelegate, new object[] {
                        login,
                        host,
                        password}, this.onEndEditHostWithPasswordDelegate, this.onEditHostWithPasswordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetViewLaneData(MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetViewLaneData(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetViewLaneData(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> revision_id, string revision, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataRequest inValue = new MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataRequest();
            inValue.login = login;
            inValue.lane_id = lane_id;
            inValue.lane = lane;
            inValue.host_id = host_id;
            inValue.host = host;
            inValue.revision_id = revision_id;
            inValue.revision = revision;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetViewLaneData(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse1 MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetViewLaneData(System.IAsyncResult result) {
            return base.Channel.EndGetViewLaneData(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse EndGetViewLaneData(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse1 retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetViewLaneData(result);
            return retVal.GetViewLaneDataResult;
        }
        
        private System.IAsyncResult OnBeginGetViewLaneData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> lane_id = ((System.Nullable<int>)(inValues[1]));
            string lane = ((string)(inValues[2]));
            System.Nullable<int> host_id = ((System.Nullable<int>)(inValues[3]));
            string host = ((string)(inValues[4]));
            System.Nullable<int> revision_id = ((System.Nullable<int>)(inValues[5]));
            string revision = ((string)(inValues[6]));
            return this.BeginGetViewLaneData(login, lane_id, lane, host_id, host, revision_id, revision, callback, asyncState);
        }
        
        private object[] OnEndGetViewLaneData(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse retVal = this.EndGetViewLaneData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetViewLaneDataCompleted(object state) {
            if ((this.GetViewLaneDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetViewLaneDataCompleted(this, new GetViewLaneDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetViewLaneDataAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> revision_id, string revision) {
            this.GetViewLaneDataAsync(login, lane_id, lane, host_id, host, revision_id, revision, null);
        }
        
        public void GetViewLaneDataAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> revision_id, string revision, object userState) {
            if ((this.onBeginGetViewLaneDataDelegate == null)) {
                this.onBeginGetViewLaneDataDelegate = new BeginOperationDelegate(this.OnBeginGetViewLaneData);
            }
            if ((this.onEndGetViewLaneDataDelegate == null)) {
                this.onEndGetViewLaneDataDelegate = new EndOperationDelegate(this.OnEndGetViewLaneData);
            }
            if ((this.onGetViewLaneDataCompletedDelegate == null)) {
                this.onGetViewLaneDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetViewLaneDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetViewLaneDataDelegate, new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        revision_id,
                        revision}, this.onEndGetViewLaneDataDelegate, this.onGetViewLaneDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetViewLaneData2(MoonlightDrtViewer.MonkeyWrench.GetViewLaneData2Request request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetViewLaneData2(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetViewLaneData2(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> revision_id, string revision, bool include_hidden_files, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.GetViewLaneData2Request inValue = new MoonlightDrtViewer.MonkeyWrench.GetViewLaneData2Request();
            inValue.login = login;
            inValue.lane_id = lane_id;
            inValue.lane = lane;
            inValue.host_id = host_id;
            inValue.host = host;
            inValue.revision_id = revision_id;
            inValue.revision = revision;
            inValue.include_hidden_files = include_hidden_files;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetViewLaneData2(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetViewLaneData2Response MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetViewLaneData2(System.IAsyncResult result) {
            return base.Channel.EndGetViewLaneData2(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse EndGetViewLaneData2(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetViewLaneData2Response retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetViewLaneData2(result);
            return retVal.GetViewLaneData2Result;
        }
        
        private System.IAsyncResult OnBeginGetViewLaneData2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> lane_id = ((System.Nullable<int>)(inValues[1]));
            string lane = ((string)(inValues[2]));
            System.Nullable<int> host_id = ((System.Nullable<int>)(inValues[3]));
            string host = ((string)(inValues[4]));
            System.Nullable<int> revision_id = ((System.Nullable<int>)(inValues[5]));
            string revision = ((string)(inValues[6]));
            bool include_hidden_files = ((bool)(inValues[7]));
            return this.BeginGetViewLaneData2(login, lane_id, lane, host_id, host, revision_id, revision, include_hidden_files, callback, asyncState);
        }
        
        private object[] OnEndGetViewLaneData2(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse retVal = this.EndGetViewLaneData2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetViewLaneData2Completed(object state) {
            if ((this.GetViewLaneData2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetViewLaneData2Completed(this, new GetViewLaneData2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetViewLaneData2Async(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> revision_id, string revision, bool include_hidden_files) {
            this.GetViewLaneData2Async(login, lane_id, lane, host_id, host, revision_id, revision, include_hidden_files, null);
        }
        
        public void GetViewLaneData2Async(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> revision_id, string revision, bool include_hidden_files, object userState) {
            if ((this.onBeginGetViewLaneData2Delegate == null)) {
                this.onBeginGetViewLaneData2Delegate = new BeginOperationDelegate(this.OnBeginGetViewLaneData2);
            }
            if ((this.onEndGetViewLaneData2Delegate == null)) {
                this.onEndGetViewLaneData2Delegate = new EndOperationDelegate(this.OnEndGetViewLaneData2);
            }
            if ((this.onGetViewLaneData2CompletedDelegate == null)) {
                this.onGetViewLaneData2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetViewLaneData2Completed);
            }
            base.InvokeAsync(this.onBeginGetViewLaneData2Delegate, new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        revision_id,
                        revision,
                        include_hidden_files}, this.onEndGetViewLaneData2Delegate, this.onGetViewLaneData2CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetFrontPageData(MoonlightDrtViewer.MonkeyWrench.GetFrontPageDataRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFrontPageData(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetFrontPageData(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int limit, string lane, System.Nullable<int> lane_id, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.GetFrontPageDataRequest inValue = new MoonlightDrtViewer.MonkeyWrench.GetFrontPageDataRequest();
            inValue.login = login;
            inValue.limit = limit;
            inValue.lane = lane;
            inValue.lane_id = lane_id;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetFrontPageData(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetFrontPageDataResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetFrontPageData(System.IAsyncResult result) {
            return base.Channel.EndGetFrontPageData(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.FrontPageResponse EndGetFrontPageData(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetFrontPageDataResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetFrontPageData(result);
            return retVal.GetFrontPageDataResult;
        }
        
        private System.IAsyncResult OnBeginGetFrontPageData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int limit = ((int)(inValues[1]));
            string lane = ((string)(inValues[2]));
            System.Nullable<int> lane_id = ((System.Nullable<int>)(inValues[3]));
            return this.BeginGetFrontPageData(login, limit, lane, lane_id, callback, asyncState);
        }
        
        private object[] OnEndGetFrontPageData(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.FrontPageResponse retVal = this.EndGetFrontPageData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFrontPageDataCompleted(object state) {
            if ((this.GetFrontPageDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFrontPageDataCompleted(this, new GetFrontPageDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFrontPageDataAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int limit, string lane, System.Nullable<int> lane_id) {
            this.GetFrontPageDataAsync(login, limit, lane, lane_id, null);
        }
        
        public void GetFrontPageDataAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int limit, string lane, System.Nullable<int> lane_id, object userState) {
            if ((this.onBeginGetFrontPageDataDelegate == null)) {
                this.onBeginGetFrontPageDataDelegate = new BeginOperationDelegate(this.OnBeginGetFrontPageData);
            }
            if ((this.onEndGetFrontPageDataDelegate == null)) {
                this.onEndGetFrontPageDataDelegate = new EndOperationDelegate(this.OnEndGetFrontPageData);
            }
            if ((this.onGetFrontPageDataCompletedDelegate == null)) {
                this.onGetFrontPageDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFrontPageDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetFrontPageDataDelegate, new object[] {
                        login,
                        limit,
                        lane,
                        lane_id}, this.onEndGetFrontPageDataDelegate, this.onGetFrontPageDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetFrontPageData2(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int limit, string[] lanes, int[] lane_ids, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFrontPageData2(login, limit, lanes, lane_ids, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.FrontPageResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetFrontPageData2(System.IAsyncResult result) {
            return base.Channel.EndGetFrontPageData2(result);
        }
        
        private System.IAsyncResult OnBeginGetFrontPageData2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int limit = ((int)(inValues[1]));
            string[] lanes = ((string[])(inValues[2]));
            int[] lane_ids = ((int[])(inValues[3]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetFrontPageData2(login, limit, lanes, lane_ids, callback, asyncState);
        }
        
        private object[] OnEndGetFrontPageData2(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.FrontPageResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetFrontPageData2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFrontPageData2Completed(object state) {
            if ((this.GetFrontPageData2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFrontPageData2Completed(this, new GetFrontPageData2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFrontPageData2Async(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int limit, string[] lanes, int[] lane_ids) {
            this.GetFrontPageData2Async(login, limit, lanes, lane_ids, null);
        }
        
        public void GetFrontPageData2Async(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int limit, string[] lanes, int[] lane_ids, object userState) {
            if ((this.onBeginGetFrontPageData2Delegate == null)) {
                this.onBeginGetFrontPageData2Delegate = new BeginOperationDelegate(this.OnBeginGetFrontPageData2);
            }
            if ((this.onEndGetFrontPageData2Delegate == null)) {
                this.onEndGetFrontPageData2Delegate = new EndOperationDelegate(this.OnEndGetFrontPageData2);
            }
            if ((this.onGetFrontPageData2CompletedDelegate == null)) {
                this.onGetFrontPageData2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFrontPageData2Completed);
            }
            base.InvokeAsync(this.onBeginGetFrontPageData2Delegate, new object[] {
                        login,
                        limit,
                        lanes,
                        lane_ids}, this.onEndGetFrontPageData2Delegate, this.onGetFrontPageData2CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetLanes(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLanes(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetLanesResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetLanes(System.IAsyncResult result) {
            return base.Channel.EndGetLanes(result);
        }
        
        private System.IAsyncResult OnBeginGetLanes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetLanes(login, callback, asyncState);
        }
        
        private object[] OnEndGetLanes(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetLanesResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetLanes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLanesCompleted(object state) {
            if ((this.GetLanesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLanesCompleted(this, new GetLanesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLanesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.GetLanesAsync(login, null);
        }
        
        public void GetLanesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginGetLanesDelegate == null)) {
                this.onBeginGetLanesDelegate = new BeginOperationDelegate(this.OnBeginGetLanes);
            }
            if ((this.onEndGetLanesDelegate == null)) {
                this.onEndGetLanesDelegate = new EndOperationDelegate(this.OnEndGetLanes);
            }
            if ((this.onGetLanesCompletedDelegate == null)) {
                this.onGetLanesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLanesCompleted);
            }
            base.InvokeAsync(this.onBeginGetLanesDelegate, new object[] {
                        login}, this.onEndGetLanesDelegate, this.onGetLanesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetHostLanes(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHostLanes(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetHostLanesResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetHostLanes(System.IAsyncResult result) {
            return base.Channel.EndGetHostLanes(result);
        }
        
        private System.IAsyncResult OnBeginGetHostLanes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetHostLanes(login, callback, asyncState);
        }
        
        private object[] OnEndGetHostLanes(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetHostLanesResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetHostLanes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHostLanesCompleted(object state) {
            if ((this.GetHostLanesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHostLanesCompleted(this, new GetHostLanesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHostLanesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.GetHostLanesAsync(login, null);
        }
        
        public void GetHostLanesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginGetHostLanesDelegate == null)) {
                this.onBeginGetHostLanesDelegate = new BeginOperationDelegate(this.OnBeginGetHostLanes);
            }
            if ((this.onEndGetHostLanesDelegate == null)) {
                this.onEndGetHostLanesDelegate = new EndOperationDelegate(this.OnEndGetHostLanes);
            }
            if ((this.onGetHostLanesCompletedDelegate == null)) {
                this.onGetHostLanesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHostLanesCompleted);
            }
            base.InvokeAsync(this.onBeginGetHostLanesDelegate, new object[] {
                        login}, this.onEndGetHostLanesDelegate, this.onGetHostLanesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetHosts(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHosts(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetHostsResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetHosts(System.IAsyncResult result) {
            return base.Channel.EndGetHosts(result);
        }
        
        private System.IAsyncResult OnBeginGetHosts(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetHosts(login, callback, asyncState);
        }
        
        private object[] OnEndGetHosts(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetHostsResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetHosts(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHostsCompleted(object state) {
            if ((this.GetHostsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHostsCompleted(this, new GetHostsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHostsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.GetHostsAsync(login, null);
        }
        
        public void GetHostsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginGetHostsDelegate == null)) {
                this.onBeginGetHostsDelegate = new BeginOperationDelegate(this.OnBeginGetHosts);
            }
            if ((this.onEndGetHostsDelegate == null)) {
                this.onEndGetHostsDelegate = new EndOperationDelegate(this.OnEndGetHosts);
            }
            if ((this.onGetHostsCompletedDelegate == null)) {
                this.onGetHostsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHostsCompleted);
            }
            base.InvokeAsync(this.onBeginGetHostsDelegate, new object[] {
                        login}, this.onEndGetHostsDelegate, this.onGetHostsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetRevisions(MoonlightDrtViewer.MonkeyWrench.GetRevisionsRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRevisions(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetRevisions(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, int limit, int offset, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.GetRevisionsRequest inValue = new MoonlightDrtViewer.MonkeyWrench.GetRevisionsRequest();
            inValue.login = login;
            inValue.lane_id = lane_id;
            inValue.lane = lane;
            inValue.limit = limit;
            inValue.offset = offset;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetRevisions(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetRevisionsResponse1 MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetRevisions(System.IAsyncResult result) {
            return base.Channel.EndGetRevisions(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.GetRevisionsResponse EndGetRevisions(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetRevisionsResponse1 retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetRevisions(result);
            return retVal.GetRevisionsResult;
        }
        
        private System.IAsyncResult OnBeginGetRevisions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> lane_id = ((System.Nullable<int>)(inValues[1]));
            string lane = ((string)(inValues[2]));
            int limit = ((int)(inValues[3]));
            int offset = ((int)(inValues[4]));
            return this.BeginGetRevisions(login, lane_id, lane, limit, offset, callback, asyncState);
        }
        
        private object[] OnEndGetRevisions(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetRevisionsResponse retVal = this.EndGetRevisions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRevisionsCompleted(object state) {
            if ((this.GetRevisionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRevisionsCompleted(this, new GetRevisionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRevisionsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, int limit, int offset) {
            this.GetRevisionsAsync(login, lane_id, lane, limit, offset, null);
        }
        
        public void GetRevisionsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, int limit, int offset, object userState) {
            if ((this.onBeginGetRevisionsDelegate == null)) {
                this.onBeginGetRevisionsDelegate = new BeginOperationDelegate(this.OnBeginGetRevisions);
            }
            if ((this.onEndGetRevisionsDelegate == null)) {
                this.onEndGetRevisionsDelegate = new EndOperationDelegate(this.OnEndGetRevisions);
            }
            if ((this.onGetRevisionsCompletedDelegate == null)) {
                this.onGetRevisionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRevisionsCompleted);
            }
            base.InvokeAsync(this.onBeginGetRevisionsDelegate, new object[] {
                        login,
                        lane_id,
                        lane,
                        limit,
                        offset}, this.onEndGetRevisionsDelegate, this.onGetRevisionsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetCommands(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCommands(login, lane_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetCommandsResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetCommands(System.IAsyncResult result) {
            return base.Channel.EndGetCommands(result);
        }
        
        private System.IAsyncResult OnBeginGetCommands(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetCommands(login, lane_id, callback, asyncState);
        }
        
        private object[] OnEndGetCommands(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetCommandsResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetCommands(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCommandsCompleted(object state) {
            if ((this.GetCommandsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCommandsCompleted(this, new GetCommandsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCommandsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id) {
            this.GetCommandsAsync(login, lane_id, null);
        }
        
        public void GetCommandsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, object userState) {
            if ((this.onBeginGetCommandsDelegate == null)) {
                this.onBeginGetCommandsDelegate = new BeginOperationDelegate(this.OnBeginGetCommands);
            }
            if ((this.onEndGetCommandsDelegate == null)) {
                this.onEndGetCommandsDelegate = new EndOperationDelegate(this.OnEndGetCommands);
            }
            if ((this.onGetCommandsCompletedDelegate == null)) {
                this.onGetCommandsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCommandsCompleted);
            }
            base.InvokeAsync(this.onBeginGetCommandsDelegate, new object[] {
                        login,
                        lane_id}, this.onEndGetCommandsDelegate, this.onGetCommandsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginCloneLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string new_name, bool copy_files, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCloneLane(login, lane_id, new_name, copy_files, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndCloneLane(System.IAsyncResult result) {
            return base.Channel.EndCloneLane(result);
        }
        
        private System.IAsyncResult OnBeginCloneLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            string new_name = ((string)(inValues[2]));
            bool copy_files = ((bool)(inValues[3]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginCloneLane(login, lane_id, new_name, copy_files, callback, asyncState);
        }
        
        private object[] OnEndCloneLane(System.IAsyncResult result) {
            int retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndCloneLane(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCloneLaneCompleted(object state) {
            if ((this.CloneLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloneLaneCompleted(this, new CloneLaneCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloneLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string new_name, bool copy_files) {
            this.CloneLaneAsync(login, lane_id, new_name, copy_files, null);
        }
        
        public void CloneLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string new_name, bool copy_files, object userState) {
            if ((this.onBeginCloneLaneDelegate == null)) {
                this.onBeginCloneLaneDelegate = new BeginOperationDelegate(this.OnBeginCloneLane);
            }
            if ((this.onEndCloneLaneDelegate == null)) {
                this.onEndCloneLaneDelegate = new EndOperationDelegate(this.OnEndCloneLane);
            }
            if ((this.onCloneLaneCompletedDelegate == null)) {
                this.onCloneLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloneLaneCompleted);
            }
            base.InvokeAsync(this.onBeginCloneLaneDelegate, new object[] {
                        login,
                        lane_id,
                        new_name,
                        copy_files}, this.onEndCloneLaneDelegate, this.onCloneLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginDeleteLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteLane(login, lane_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndDeleteLane(System.IAsyncResult result) {
            base.Channel.EndDeleteLane(result);
        }
        
        private System.IAsyncResult OnBeginDeleteLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginDeleteLane(login, lane_id, callback, asyncState);
        }
        
        private object[] OnEndDeleteLane(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndDeleteLane(result);
            return null;
        }
        
        private void OnDeleteLaneCompleted(object state) {
            if ((this.DeleteLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id) {
            this.DeleteLaneAsync(login, lane_id, null);
        }
        
        public void DeleteLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, object userState) {
            if ((this.onBeginDeleteLaneDelegate == null)) {
                this.onBeginDeleteLaneDelegate = new BeginOperationDelegate(this.OnBeginDeleteLane);
            }
            if ((this.onEndDeleteLaneDelegate == null)) {
                this.onEndDeleteLaneDelegate = new EndOperationDelegate(this.OnEndDeleteLane);
            }
            if ((this.onDeleteLaneCompletedDelegate == null)) {
                this.onDeleteLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteLaneCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteLaneDelegate, new object[] {
                        login,
                        lane_id}, this.onEndDeleteLaneDelegate, this.onDeleteLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginAddLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string lane, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddLane(login, lane, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndAddLane(System.IAsyncResult result) {
            return base.Channel.EndAddLane(result);
        }
        
        private System.IAsyncResult OnBeginAddLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            string lane = ((string)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginAddLane(login, lane, callback, asyncState);
        }
        
        private object[] OnEndAddLane(System.IAsyncResult result) {
            int retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndAddLane(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddLaneCompleted(object state) {
            if ((this.AddLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddLaneCompleted(this, new AddLaneCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string lane) {
            this.AddLaneAsync(login, lane, null);
        }
        
        public void AddLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string lane, object userState) {
            if ((this.onBeginAddLaneDelegate == null)) {
                this.onBeginAddLaneDelegate = new BeginOperationDelegate(this.OnBeginAddLane);
            }
            if ((this.onEndAddLaneDelegate == null)) {
                this.onEndAddLaneDelegate = new EndOperationDelegate(this.OnEndAddLane);
            }
            if ((this.onAddLaneCompletedDelegate == null)) {
                this.onAddLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddLaneCompleted);
            }
            base.InvokeAsync(this.onBeginAddLaneDelegate, new object[] {
                        login,
                        lane}, this.onEndAddLaneDelegate, this.onAddLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginDeleteHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteHost(login, host_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndDeleteHost(System.IAsyncResult result) {
            base.Channel.EndDeleteHost(result);
        }
        
        private System.IAsyncResult OnBeginDeleteHost(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int host_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginDeleteHost(login, host_id, callback, asyncState);
        }
        
        private object[] OnEndDeleteHost(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndDeleteHost(result);
            return null;
        }
        
        private void OnDeleteHostCompleted(object state) {
            if ((this.DeleteHostCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteHostCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id) {
            this.DeleteHostAsync(login, host_id, null);
        }
        
        public void DeleteHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, object userState) {
            if ((this.onBeginDeleteHostDelegate == null)) {
                this.onBeginDeleteHostDelegate = new BeginOperationDelegate(this.OnBeginDeleteHost);
            }
            if ((this.onEndDeleteHostDelegate == null)) {
                this.onEndDeleteHostDelegate = new EndOperationDelegate(this.OnEndDeleteHost);
            }
            if ((this.onDeleteHostCompletedDelegate == null)) {
                this.onDeleteHostCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteHostCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteHostDelegate, new object[] {
                        login,
                        host_id}, this.onEndDeleteHostDelegate, this.onDeleteHostCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginAddHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddHost(login, host, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndAddHost(System.IAsyncResult result) {
            return base.Channel.EndAddHost(result);
        }
        
        private System.IAsyncResult OnBeginAddHost(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            string host = ((string)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginAddHost(login, host, callback, asyncState);
        }
        
        private object[] OnEndAddHost(System.IAsyncResult result) {
            int retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndAddHost(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddHostCompleted(object state) {
            if ((this.AddHostCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddHostCompleted(this, new AddHostCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host) {
            this.AddHostAsync(login, host, null);
        }
        
        public void AddHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, object userState) {
            if ((this.onBeginAddHostDelegate == null)) {
                this.onBeginAddHostDelegate = new BeginOperationDelegate(this.OnBeginAddHost);
            }
            if ((this.onEndAddHostDelegate == null)) {
                this.onEndAddHostDelegate = new EndOperationDelegate(this.OnEndAddHost);
            }
            if ((this.onAddHostCompletedDelegate == null)) {
                this.onAddHostCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddHostCompleted);
            }
            base.InvokeAsync(this.onBeginAddHostDelegate, new object[] {
                        login,
                        host}, this.onEndAddHostDelegate, this.onAddHostCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginClearRevision(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClearRevision(login, lane_id, host_id, revision_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndClearRevision(System.IAsyncResult result) {
            base.Channel.EndClearRevision(result);
        }
        
        private System.IAsyncResult OnBeginClearRevision(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            int host_id = ((int)(inValues[2]));
            int revision_id = ((int)(inValues[3]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginClearRevision(login, lane_id, host_id, revision_id, callback, asyncState);
        }
        
        private object[] OnEndClearRevision(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndClearRevision(result);
            return null;
        }
        
        private void OnClearRevisionCompleted(object state) {
            if ((this.ClearRevisionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClearRevisionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClearRevisionAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id) {
            this.ClearRevisionAsync(login, lane_id, host_id, revision_id, null);
        }
        
        public void ClearRevisionAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, object userState) {
            if ((this.onBeginClearRevisionDelegate == null)) {
                this.onBeginClearRevisionDelegate = new BeginOperationDelegate(this.OnBeginClearRevision);
            }
            if ((this.onEndClearRevisionDelegate == null)) {
                this.onEndClearRevisionDelegate = new EndOperationDelegate(this.OnEndClearRevision);
            }
            if ((this.onClearRevisionCompletedDelegate == null)) {
                this.onClearRevisionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClearRevisionCompleted);
            }
            base.InvokeAsync(this.onBeginClearRevisionDelegate, new object[] {
                        login,
                        lane_id,
                        host_id,
                        revision_id}, this.onEndClearRevisionDelegate, this.onClearRevisionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginRescheduleRevision(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRescheduleRevision(login, lane_id, host_id, revision_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndRescheduleRevision(System.IAsyncResult result) {
            base.Channel.EndRescheduleRevision(result);
        }
        
        private System.IAsyncResult OnBeginRescheduleRevision(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            int host_id = ((int)(inValues[2]));
            int revision_id = ((int)(inValues[3]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginRescheduleRevision(login, lane_id, host_id, revision_id, callback, asyncState);
        }
        
        private object[] OnEndRescheduleRevision(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndRescheduleRevision(result);
            return null;
        }
        
        private void OnRescheduleRevisionCompleted(object state) {
            if ((this.RescheduleRevisionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RescheduleRevisionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RescheduleRevisionAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id) {
            this.RescheduleRevisionAsync(login, lane_id, host_id, revision_id, null);
        }
        
        public void RescheduleRevisionAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, object userState) {
            if ((this.onBeginRescheduleRevisionDelegate == null)) {
                this.onBeginRescheduleRevisionDelegate = new BeginOperationDelegate(this.OnBeginRescheduleRevision);
            }
            if ((this.onEndRescheduleRevisionDelegate == null)) {
                this.onEndRescheduleRevisionDelegate = new EndOperationDelegate(this.OnEndRescheduleRevision);
            }
            if ((this.onRescheduleRevisionCompletedDelegate == null)) {
                this.onRescheduleRevisionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRescheduleRevisionCompleted);
            }
            base.InvokeAsync(this.onBeginRescheduleRevisionDelegate, new object[] {
                        login,
                        lane_id,
                        host_id,
                        revision_id}, this.onEndRescheduleRevisionDelegate, this.onRescheduleRevisionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginClearAllWorkForHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClearAllWorkForHost(login, host_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndClearAllWorkForHost(System.IAsyncResult result) {
            return base.Channel.EndClearAllWorkForHost(result);
        }
        
        private System.IAsyncResult OnBeginClearAllWorkForHost(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int host_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginClearAllWorkForHost(login, host_id, callback, asyncState);
        }
        
        private object[] OnEndClearAllWorkForHost(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndClearAllWorkForHost(result);
            return new object[] {
                    retVal};
        }
        
        private void OnClearAllWorkForHostCompleted(object state) {
            if ((this.ClearAllWorkForHostCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClearAllWorkForHostCompleted(this, new ClearAllWorkForHostCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClearAllWorkForHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id) {
            this.ClearAllWorkForHostAsync(login, host_id, null);
        }
        
        public void ClearAllWorkForHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, object userState) {
            if ((this.onBeginClearAllWorkForHostDelegate == null)) {
                this.onBeginClearAllWorkForHostDelegate = new BeginOperationDelegate(this.OnBeginClearAllWorkForHost);
            }
            if ((this.onEndClearAllWorkForHostDelegate == null)) {
                this.onEndClearAllWorkForHostDelegate = new EndOperationDelegate(this.OnEndClearAllWorkForHost);
            }
            if ((this.onClearAllWorkForHostCompletedDelegate == null)) {
                this.onClearAllWorkForHostCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClearAllWorkForHostCompleted);
            }
            base.InvokeAsync(this.onBeginClearAllWorkForHostDelegate, new object[] {
                        login,
                        host_id}, this.onEndClearAllWorkForHostDelegate, this.onClearAllWorkForHostCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginClearAllWorkForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClearAllWorkForLane(login, lane_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndClearAllWorkForLane(System.IAsyncResult result) {
            return base.Channel.EndClearAllWorkForLane(result);
        }
        
        private System.IAsyncResult OnBeginClearAllWorkForLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginClearAllWorkForLane(login, lane_id, callback, asyncState);
        }
        
        private object[] OnEndClearAllWorkForLane(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndClearAllWorkForLane(result);
            return new object[] {
                    retVal};
        }
        
        private void OnClearAllWorkForLaneCompleted(object state) {
            if ((this.ClearAllWorkForLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClearAllWorkForLaneCompleted(this, new ClearAllWorkForLaneCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClearAllWorkForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id) {
            this.ClearAllWorkForLaneAsync(login, lane_id, null);
        }
        
        public void ClearAllWorkForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, object userState) {
            if ((this.onBeginClearAllWorkForLaneDelegate == null)) {
                this.onBeginClearAllWorkForLaneDelegate = new BeginOperationDelegate(this.OnBeginClearAllWorkForLane);
            }
            if ((this.onEndClearAllWorkForLaneDelegate == null)) {
                this.onEndClearAllWorkForLaneDelegate = new EndOperationDelegate(this.OnEndClearAllWorkForLane);
            }
            if ((this.onClearAllWorkForLaneCompletedDelegate == null)) {
                this.onClearAllWorkForLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClearAllWorkForLaneCompleted);
            }
            base.InvokeAsync(this.onBeginClearAllWorkForLaneDelegate, new object[] {
                        login,
                        lane_id}, this.onEndClearAllWorkForLaneDelegate, this.onClearAllWorkForLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginDeleteAllWorkForHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteAllWorkForHost(login, host_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndDeleteAllWorkForHost(System.IAsyncResult result) {
            return base.Channel.EndDeleteAllWorkForHost(result);
        }
        
        private System.IAsyncResult OnBeginDeleteAllWorkForHost(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int host_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginDeleteAllWorkForHost(login, host_id, callback, asyncState);
        }
        
        private object[] OnEndDeleteAllWorkForHost(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndDeleteAllWorkForHost(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteAllWorkForHostCompleted(object state) {
            if ((this.DeleteAllWorkForHostCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteAllWorkForHostCompleted(this, new DeleteAllWorkForHostCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteAllWorkForHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id) {
            this.DeleteAllWorkForHostAsync(login, host_id, null);
        }
        
        public void DeleteAllWorkForHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, object userState) {
            if ((this.onBeginDeleteAllWorkForHostDelegate == null)) {
                this.onBeginDeleteAllWorkForHostDelegate = new BeginOperationDelegate(this.OnBeginDeleteAllWorkForHost);
            }
            if ((this.onEndDeleteAllWorkForHostDelegate == null)) {
                this.onEndDeleteAllWorkForHostDelegate = new EndOperationDelegate(this.OnEndDeleteAllWorkForHost);
            }
            if ((this.onDeleteAllWorkForHostCompletedDelegate == null)) {
                this.onDeleteAllWorkForHostCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteAllWorkForHostCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteAllWorkForHostDelegate, new object[] {
                        login,
                        host_id}, this.onEndDeleteAllWorkForHostDelegate, this.onDeleteAllWorkForHostCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginDeleteAllWorkForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteAllWorkForLane(login, lane_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndDeleteAllWorkForLane(System.IAsyncResult result) {
            return base.Channel.EndDeleteAllWorkForLane(result);
        }
        
        private System.IAsyncResult OnBeginDeleteAllWorkForLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginDeleteAllWorkForLane(login, lane_id, callback, asyncState);
        }
        
        private object[] OnEndDeleteAllWorkForLane(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndDeleteAllWorkForLane(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteAllWorkForLaneCompleted(object state) {
            if ((this.DeleteAllWorkForLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteAllWorkForLaneCompleted(this, new DeleteAllWorkForLaneCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteAllWorkForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id) {
            this.DeleteAllWorkForLaneAsync(login, lane_id, null);
        }
        
        public void DeleteAllWorkForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, object userState) {
            if ((this.onBeginDeleteAllWorkForLaneDelegate == null)) {
                this.onBeginDeleteAllWorkForLaneDelegate = new BeginOperationDelegate(this.OnBeginDeleteAllWorkForLane);
            }
            if ((this.onEndDeleteAllWorkForLaneDelegate == null)) {
                this.onEndDeleteAllWorkForLaneDelegate = new EndOperationDelegate(this.OnEndDeleteAllWorkForLane);
            }
            if ((this.onDeleteAllWorkForLaneCompletedDelegate == null)) {
                this.onDeleteAllWorkForLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteAllWorkForLaneCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteAllWorkForLaneDelegate, new object[] {
                        login,
                        lane_id}, this.onEndDeleteAllWorkForLaneDelegate, this.onDeleteAllWorkForLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginDeleteAllRevisionsForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteAllRevisionsForLane(login, lane_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndDeleteAllRevisionsForLane(System.IAsyncResult result) {
            return base.Channel.EndDeleteAllRevisionsForLane(result);
        }
        
        private System.IAsyncResult OnBeginDeleteAllRevisionsForLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginDeleteAllRevisionsForLane(login, lane_id, callback, asyncState);
        }
        
        private object[] OnEndDeleteAllRevisionsForLane(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndDeleteAllRevisionsForLane(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteAllRevisionsForLaneCompleted(object state) {
            if ((this.DeleteAllRevisionsForLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteAllRevisionsForLaneCompleted(this, new DeleteAllRevisionsForLaneCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteAllRevisionsForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id) {
            this.DeleteAllRevisionsForLaneAsync(login, lane_id, null);
        }
        
        public void DeleteAllRevisionsForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, object userState) {
            if ((this.onBeginDeleteAllRevisionsForLaneDelegate == null)) {
                this.onBeginDeleteAllRevisionsForLaneDelegate = new BeginOperationDelegate(this.OnBeginDeleteAllRevisionsForLane);
            }
            if ((this.onEndDeleteAllRevisionsForLaneDelegate == null)) {
                this.onEndDeleteAllRevisionsForLaneDelegate = new EndOperationDelegate(this.OnEndDeleteAllRevisionsForLane);
            }
            if ((this.onDeleteAllRevisionsForLaneCompletedDelegate == null)) {
                this.onDeleteAllRevisionsForLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteAllRevisionsForLaneCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteAllRevisionsForLaneDelegate, new object[] {
                        login,
                        lane_id}, this.onEndDeleteAllRevisionsForLaneDelegate, this.onDeleteAllRevisionsForLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginAbortRevision(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAbortRevision(login, lane_id, host_id, revision_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndAbortRevision(System.IAsyncResult result) {
            base.Channel.EndAbortRevision(result);
        }
        
        private System.IAsyncResult OnBeginAbortRevision(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            int host_id = ((int)(inValues[2]));
            int revision_id = ((int)(inValues[3]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginAbortRevision(login, lane_id, host_id, revision_id, callback, asyncState);
        }
        
        private object[] OnEndAbortRevision(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndAbortRevision(result);
            return null;
        }
        
        private void OnAbortRevisionCompleted(object state) {
            if ((this.AbortRevisionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AbortRevisionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AbortRevisionAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id) {
            this.AbortRevisionAsync(login, lane_id, host_id, revision_id, null);
        }
        
        public void AbortRevisionAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, object userState) {
            if ((this.onBeginAbortRevisionDelegate == null)) {
                this.onBeginAbortRevisionDelegate = new BeginOperationDelegate(this.OnBeginAbortRevision);
            }
            if ((this.onEndAbortRevisionDelegate == null)) {
                this.onEndAbortRevisionDelegate = new EndOperationDelegate(this.OnEndAbortRevision);
            }
            if ((this.onAbortRevisionCompletedDelegate == null)) {
                this.onAbortRevisionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAbortRevisionCompleted);
            }
            base.InvokeAsync(this.onBeginAbortRevisionDelegate, new object[] {
                        login,
                        lane_id,
                        host_id,
                        revision_id}, this.onEndAbortRevisionDelegate, this.onAbortRevisionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginClearWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClearWork(login, work_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndClearWork(System.IAsyncResult result) {
            base.Channel.EndClearWork(result);
        }
        
        private System.IAsyncResult OnBeginClearWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int work_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginClearWork(login, work_id, callback, asyncState);
        }
        
        private object[] OnEndClearWork(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndClearWork(result);
            return null;
        }
        
        private void OnClearWorkCompleted(object state) {
            if ((this.ClearWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClearWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClearWorkAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id) {
            this.ClearWorkAsync(login, work_id, null);
        }
        
        public void ClearWorkAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, object userState) {
            if ((this.onBeginClearWorkDelegate == null)) {
                this.onBeginClearWorkDelegate = new BeginOperationDelegate(this.OnBeginClearWork);
            }
            if ((this.onEndClearWorkDelegate == null)) {
                this.onEndClearWorkDelegate = new EndOperationDelegate(this.OnEndClearWork);
            }
            if ((this.onClearWorkCompletedDelegate == null)) {
                this.onClearWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClearWorkCompleted);
            }
            base.InvokeAsync(this.onBeginClearWorkDelegate, new object[] {
                        login,
                        work_id}, this.onEndClearWorkDelegate, this.onClearWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginAbortWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAbortWork(login, work_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndAbortWork(System.IAsyncResult result) {
            base.Channel.EndAbortWork(result);
        }
        
        private System.IAsyncResult OnBeginAbortWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int work_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginAbortWork(login, work_id, callback, asyncState);
        }
        
        private object[] OnEndAbortWork(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndAbortWork(result);
            return null;
        }
        
        private void OnAbortWorkCompleted(object state) {
            if ((this.AbortWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AbortWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AbortWorkAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id) {
            this.AbortWorkAsync(login, work_id, null);
        }
        
        public void AbortWorkAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, object userState) {
            if ((this.onBeginAbortWorkDelegate == null)) {
                this.onBeginAbortWorkDelegate = new BeginOperationDelegate(this.OnBeginAbortWork);
            }
            if ((this.onEndAbortWorkDelegate == null)) {
                this.onEndAbortWorkDelegate = new EndOperationDelegate(this.OnEndAbortWork);
            }
            if ((this.onAbortWorkCompletedDelegate == null)) {
                this.onAbortWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAbortWorkCompleted);
            }
            base.InvokeAsync(this.onBeginAbortWorkDelegate, new object[] {
                        login,
                        work_id}, this.onEndAbortWorkDelegate, this.onAbortWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginPauseWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPauseWork(login, work_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndPauseWork(System.IAsyncResult result) {
            base.Channel.EndPauseWork(result);
        }
        
        private System.IAsyncResult OnBeginPauseWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int work_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginPauseWork(login, work_id, callback, asyncState);
        }
        
        private object[] OnEndPauseWork(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndPauseWork(result);
            return null;
        }
        
        private void OnPauseWorkCompleted(object state) {
            if ((this.PauseWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PauseWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PauseWorkAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id) {
            this.PauseWorkAsync(login, work_id, null);
        }
        
        public void PauseWorkAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, object userState) {
            if ((this.onBeginPauseWorkDelegate == null)) {
                this.onBeginPauseWorkDelegate = new BeginOperationDelegate(this.OnBeginPauseWork);
            }
            if ((this.onEndPauseWorkDelegate == null)) {
                this.onEndPauseWorkDelegate = new EndOperationDelegate(this.OnEndPauseWork);
            }
            if ((this.onPauseWorkCompletedDelegate == null)) {
                this.onPauseWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPauseWorkCompleted);
            }
            base.InvokeAsync(this.onBeginPauseWorkDelegate, new object[] {
                        login,
                        work_id}, this.onEndPauseWorkDelegate, this.onPauseWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginResumeWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResumeWork(login, work_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndResumeWork(System.IAsyncResult result) {
            base.Channel.EndResumeWork(result);
        }
        
        private System.IAsyncResult OnBeginResumeWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int work_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginResumeWork(login, work_id, callback, asyncState);
        }
        
        private object[] OnEndResumeWork(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndResumeWork(result);
            return null;
        }
        
        private void OnResumeWorkCompleted(object state) {
            if ((this.ResumeWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResumeWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResumeWorkAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id) {
            this.ResumeWorkAsync(login, work_id, null);
        }
        
        public void ResumeWorkAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, object userState) {
            if ((this.onBeginResumeWorkDelegate == null)) {
                this.onBeginResumeWorkDelegate = new BeginOperationDelegate(this.OnBeginResumeWork);
            }
            if ((this.onEndResumeWorkDelegate == null)) {
                this.onEndResumeWorkDelegate = new EndOperationDelegate(this.OnEndResumeWork);
            }
            if ((this.onResumeWorkCompletedDelegate == null)) {
                this.onResumeWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResumeWorkCompleted);
            }
            base.InvokeAsync(this.onBeginResumeWorkDelegate, new object[] {
                        login,
                        work_id}, this.onEndResumeWorkDelegate, this.onResumeWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetViewTableData(MoonlightDrtViewer.MonkeyWrench.GetViewTableDataRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetViewTableData(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetViewTableData(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, int page, int page_size, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.GetViewTableDataRequest inValue = new MoonlightDrtViewer.MonkeyWrench.GetViewTableDataRequest();
            inValue.login = login;
            inValue.lane_id = lane_id;
            inValue.lane = lane;
            inValue.host_id = host_id;
            inValue.host = host;
            inValue.page = page;
            inValue.page_size = page_size;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetViewTableData(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetViewTableDataResponse1 MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetViewTableData(System.IAsyncResult result) {
            return base.Channel.EndGetViewTableData(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.GetViewTableDataResponse EndGetViewTableData(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetViewTableDataResponse1 retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetViewTableData(result);
            return retVal.GetViewTableDataResult;
        }
        
        private System.IAsyncResult OnBeginGetViewTableData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> lane_id = ((System.Nullable<int>)(inValues[1]));
            string lane = ((string)(inValues[2]));
            System.Nullable<int> host_id = ((System.Nullable<int>)(inValues[3]));
            string host = ((string)(inValues[4]));
            int page = ((int)(inValues[5]));
            int page_size = ((int)(inValues[6]));
            return this.BeginGetViewTableData(login, lane_id, lane, host_id, host, page, page_size, callback, asyncState);
        }
        
        private object[] OnEndGetViewTableData(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetViewTableDataResponse retVal = this.EndGetViewTableData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetViewTableDataCompleted(object state) {
            if ((this.GetViewTableDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetViewTableDataCompleted(this, new GetViewTableDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetViewTableDataAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, int page, int page_size) {
            this.GetViewTableDataAsync(login, lane_id, lane, host_id, host, page, page_size, null);
        }
        
        public void GetViewTableDataAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, int page, int page_size, object userState) {
            if ((this.onBeginGetViewTableDataDelegate == null)) {
                this.onBeginGetViewTableDataDelegate = new BeginOperationDelegate(this.OnBeginGetViewTableData);
            }
            if ((this.onEndGetViewTableDataDelegate == null)) {
                this.onEndGetViewTableDataDelegate = new EndOperationDelegate(this.OnEndGetViewTableData);
            }
            if ((this.onGetViewTableDataCompletedDelegate == null)) {
                this.onGetViewTableDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetViewTableDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetViewTableDataDelegate, new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        page,
                        page_size}, this.onEndGetViewTableDataDelegate, this.onGetViewTableDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetViewWorkTableData(MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetViewWorkTableData(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetViewWorkTableData(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> command_id, string command, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataRequest inValue = new MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataRequest();
            inValue.login = login;
            inValue.lane_id = lane_id;
            inValue.lane = lane;
            inValue.host_id = host_id;
            inValue.host = host;
            inValue.command_id = command_id;
            inValue.command = command;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetViewWorkTableData(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse1 MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetViewWorkTableData(System.IAsyncResult result) {
            return base.Channel.EndGetViewWorkTableData(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse EndGetViewWorkTableData(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse1 retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetViewWorkTableData(result);
            return retVal.GetViewWorkTableDataResult;
        }
        
        private System.IAsyncResult OnBeginGetViewWorkTableData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> lane_id = ((System.Nullable<int>)(inValues[1]));
            string lane = ((string)(inValues[2]));
            System.Nullable<int> host_id = ((System.Nullable<int>)(inValues[3]));
            string host = ((string)(inValues[4]));
            System.Nullable<int> command_id = ((System.Nullable<int>)(inValues[5]));
            string command = ((string)(inValues[6]));
            return this.BeginGetViewWorkTableData(login, lane_id, lane, host_id, host, command_id, command, callback, asyncState);
        }
        
        private object[] OnEndGetViewWorkTableData(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse retVal = this.EndGetViewWorkTableData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetViewWorkTableDataCompleted(object state) {
            if ((this.GetViewWorkTableDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetViewWorkTableDataCompleted(this, new GetViewWorkTableDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetViewWorkTableDataAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> command_id, string command) {
            this.GetViewWorkTableDataAsync(login, lane_id, lane, host_id, host, command_id, command, null);
        }
        
        public void GetViewWorkTableDataAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> command_id, string command, object userState) {
            if ((this.onBeginGetViewWorkTableDataDelegate == null)) {
                this.onBeginGetViewWorkTableDataDelegate = new BeginOperationDelegate(this.OnBeginGetViewWorkTableData);
            }
            if ((this.onEndGetViewWorkTableDataDelegate == null)) {
                this.onEndGetViewWorkTableDataDelegate = new EndOperationDelegate(this.OnEndGetViewWorkTableData);
            }
            if ((this.onGetViewWorkTableDataCompletedDelegate == null)) {
                this.onGetViewWorkTableDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetViewWorkTableDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetViewWorkTableDataDelegate, new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        command_id,
                        command}, this.onEndGetViewWorkTableDataDelegate, this.onGetViewWorkTableDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetViewWorkTableData2(MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableData2Request request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetViewWorkTableData2(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetViewWorkTableData2(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> command_id, string command, int offset, int limit, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableData2Request inValue = new MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableData2Request();
            inValue.login = login;
            inValue.lane_id = lane_id;
            inValue.lane = lane;
            inValue.host_id = host_id;
            inValue.host = host;
            inValue.command_id = command_id;
            inValue.command = command;
            inValue.offset = offset;
            inValue.limit = limit;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetViewWorkTableData2(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableData2Response MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetViewWorkTableData2(System.IAsyncResult result) {
            return base.Channel.EndGetViewWorkTableData2(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse EndGetViewWorkTableData2(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableData2Response retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetViewWorkTableData2(result);
            return retVal.GetViewWorkTableData2Result;
        }
        
        private System.IAsyncResult OnBeginGetViewWorkTableData2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> lane_id = ((System.Nullable<int>)(inValues[1]));
            string lane = ((string)(inValues[2]));
            System.Nullable<int> host_id = ((System.Nullable<int>)(inValues[3]));
            string host = ((string)(inValues[4]));
            System.Nullable<int> command_id = ((System.Nullable<int>)(inValues[5]));
            string command = ((string)(inValues[6]));
            int offset = ((int)(inValues[7]));
            int limit = ((int)(inValues[8]));
            return this.BeginGetViewWorkTableData2(login, lane_id, lane, host_id, host, command_id, command, offset, limit, callback, asyncState);
        }
        
        private object[] OnEndGetViewWorkTableData2(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse retVal = this.EndGetViewWorkTableData2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetViewWorkTableData2Completed(object state) {
            if ((this.GetViewWorkTableData2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetViewWorkTableData2Completed(this, new GetViewWorkTableData2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetViewWorkTableData2Async(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> command_id, string command, int offset, int limit) {
            this.GetViewWorkTableData2Async(login, lane_id, lane, host_id, host, command_id, command, offset, limit, null);
        }
        
        public void GetViewWorkTableData2Async(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> command_id, string command, int offset, int limit, object userState) {
            if ((this.onBeginGetViewWorkTableData2Delegate == null)) {
                this.onBeginGetViewWorkTableData2Delegate = new BeginOperationDelegate(this.OnBeginGetViewWorkTableData2);
            }
            if ((this.onEndGetViewWorkTableData2Delegate == null)) {
                this.onEndGetViewWorkTableData2Delegate = new EndOperationDelegate(this.OnEndGetViewWorkTableData2);
            }
            if ((this.onGetViewWorkTableData2CompletedDelegate == null)) {
                this.onGetViewWorkTableData2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetViewWorkTableData2Completed);
            }
            base.InvokeAsync(this.onBeginGetViewWorkTableData2Delegate, new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        command_id,
                        command,
                        offset,
                        limit}, this.onEndGetViewWorkTableData2Delegate, this.onGetViewWorkTableData2CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetLaneFileForEdit(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanefile_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLaneFileForEdit(login, lanefile_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetLaneFileForEditResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetLaneFileForEdit(System.IAsyncResult result) {
            return base.Channel.EndGetLaneFileForEdit(result);
        }
        
        private System.IAsyncResult OnBeginGetLaneFileForEdit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lanefile_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetLaneFileForEdit(login, lanefile_id, callback, asyncState);
        }
        
        private object[] OnEndGetLaneFileForEdit(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetLaneFileForEditResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetLaneFileForEdit(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLaneFileForEditCompleted(object state) {
            if ((this.GetLaneFileForEditCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLaneFileForEditCompleted(this, new GetLaneFileForEditCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLaneFileForEditAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanefile_id) {
            this.GetLaneFileForEditAsync(login, lanefile_id, null);
        }
        
        public void GetLaneFileForEditAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanefile_id, object userState) {
            if ((this.onBeginGetLaneFileForEditDelegate == null)) {
                this.onBeginGetLaneFileForEditDelegate = new BeginOperationDelegate(this.OnBeginGetLaneFileForEdit);
            }
            if ((this.onEndGetLaneFileForEditDelegate == null)) {
                this.onEndGetLaneFileForEditDelegate = new EndOperationDelegate(this.OnEndGetLaneFileForEdit);
            }
            if ((this.onGetLaneFileForEditCompletedDelegate == null)) {
                this.onGetLaneFileForEditCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLaneFileForEditCompleted);
            }
            base.InvokeAsync(this.onBeginGetLaneFileForEditDelegate, new object[] {
                        login,
                        lanefile_id}, this.onEndGetLaneFileForEditDelegate, this.onGetLaneFileForEditCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginEditLaneFile(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBLanefile lanefile, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditLaneFile(login, lanefile, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndEditLaneFile(System.IAsyncResult result) {
            base.Channel.EndEditLaneFile(result);
        }
        
        private System.IAsyncResult OnBeginEditLaneFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBLanefile lanefile = ((MoonlightDrtViewer.MonkeyWrench.DBLanefile)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginEditLaneFile(login, lanefile, callback, asyncState);
        }
        
        private object[] OnEndEditLaneFile(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndEditLaneFile(result);
            return null;
        }
        
        private void OnEditLaneFileCompleted(object state) {
            if ((this.EditLaneFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditLaneFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditLaneFileAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBLanefile lanefile) {
            this.EditLaneFileAsync(login, lanefile, null);
        }
        
        public void EditLaneFileAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBLanefile lanefile, object userState) {
            if ((this.onBeginEditLaneFileDelegate == null)) {
                this.onBeginEditLaneFileDelegate = new BeginOperationDelegate(this.OnBeginEditLaneFile);
            }
            if ((this.onEndEditLaneFileDelegate == null)) {
                this.onEndEditLaneFileDelegate = new EndOperationDelegate(this.OnEndEditLaneFile);
            }
            if ((this.onEditLaneFileCompletedDelegate == null)) {
                this.onEditLaneFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditLaneFileCompleted);
            }
            base.InvokeAsync(this.onBeginEditLaneFileDelegate, new object[] {
                        login,
                        lanefile}, this.onEndEditLaneFileDelegate, this.onEditLaneFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetViewLaneFileHistoryData(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanefile_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetViewLaneFileHistoryData(login, lanefile_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetViewLaneFileHistoryDataResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetViewLaneFileHistoryData(System.IAsyncResult result) {
            return base.Channel.EndGetViewLaneFileHistoryData(result);
        }
        
        private System.IAsyncResult OnBeginGetViewLaneFileHistoryData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lanefile_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetViewLaneFileHistoryData(login, lanefile_id, callback, asyncState);
        }
        
        private object[] OnEndGetViewLaneFileHistoryData(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetViewLaneFileHistoryDataResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetViewLaneFileHistoryData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetViewLaneFileHistoryDataCompleted(object state) {
            if ((this.GetViewLaneFileHistoryDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetViewLaneFileHistoryDataCompleted(this, new GetViewLaneFileHistoryDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetViewLaneFileHistoryDataAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanefile_id) {
            this.GetViewLaneFileHistoryDataAsync(login, lanefile_id, null);
        }
        
        public void GetViewLaneFileHistoryDataAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanefile_id, object userState) {
            if ((this.onBeginGetViewLaneFileHistoryDataDelegate == null)) {
                this.onBeginGetViewLaneFileHistoryDataDelegate = new BeginOperationDelegate(this.OnBeginGetViewLaneFileHistoryData);
            }
            if ((this.onEndGetViewLaneFileHistoryDataDelegate == null)) {
                this.onEndGetViewLaneFileHistoryDataDelegate = new EndOperationDelegate(this.OnEndGetViewLaneFileHistoryData);
            }
            if ((this.onGetViewLaneFileHistoryDataCompletedDelegate == null)) {
                this.onGetViewLaneFileHistoryDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetViewLaneFileHistoryDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetViewLaneFileHistoryDataDelegate, new object[] {
                        login,
                        lanefile_id}, this.onEndGetViewLaneFileHistoryDataDelegate, this.onGetViewLaneFileHistoryDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetUsers(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUsers(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetUsersResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetUsers(System.IAsyncResult result) {
            return base.Channel.EndGetUsers(result);
        }
        
        private System.IAsyncResult OnBeginGetUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetUsers(login, callback, asyncState);
        }
        
        private object[] OnEndGetUsers(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetUsersResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUsersCompleted(object state) {
            if ((this.GetUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUsersCompleted(this, new GetUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUsersAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.GetUsersAsync(login, null);
        }
        
        public void GetUsersAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginGetUsersDelegate == null)) {
                this.onBeginGetUsersDelegate = new BeginOperationDelegate(this.OnBeginGetUsers);
            }
            if ((this.onEndGetUsersDelegate == null)) {
                this.onEndGetUsersDelegate = new EndOperationDelegate(this.OnEndGetUsers);
            }
            if ((this.onGetUsersCompletedDelegate == null)) {
                this.onGetUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUsersCompleted);
            }
            base.InvokeAsync(this.onBeginGetUsersDelegate, new object[] {
                        login}, this.onEndGetUsersDelegate, this.onGetUsersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginDeleteUser(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteUser(login, id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndDeleteUser(System.IAsyncResult result) {
            return base.Channel.EndDeleteUser(result);
        }
        
        private System.IAsyncResult OnBeginDeleteUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginDeleteUser(login, id, callback, asyncState);
        }
        
        private object[] OnEndDeleteUser(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndDeleteUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteUserCompleted(object state) {
            if ((this.DeleteUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteUserCompleted(this, new DeleteUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteUserAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id) {
            this.DeleteUserAsync(login, id, null);
        }
        
        public void DeleteUserAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, object userState) {
            if ((this.onBeginDeleteUserDelegate == null)) {
                this.onBeginDeleteUserDelegate = new BeginOperationDelegate(this.OnBeginDeleteUser);
            }
            if ((this.onEndDeleteUserDelegate == null)) {
                this.onEndDeleteUserDelegate = new EndOperationDelegate(this.OnEndDeleteUser);
            }
            if ((this.onDeleteUserCompletedDelegate == null)) {
                this.onDeleteUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteUserCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteUserDelegate, new object[] {
                        login,
                        id}, this.onEndDeleteUserDelegate, this.onDeleteUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginAddUserEmail(MoonlightDrtViewer.MonkeyWrench.AddUserEmailRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddUserEmail(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginAddUserEmail(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> id, string username, string email, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.AddUserEmailRequest inValue = new MoonlightDrtViewer.MonkeyWrench.AddUserEmailRequest();
            inValue.login = login;
            inValue.id = id;
            inValue.username = username;
            inValue.email = email;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginAddUserEmail(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.AddUserEmailResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndAddUserEmail(System.IAsyncResult result) {
            return base.Channel.EndAddUserEmail(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndAddUserEmail(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.AddUserEmailResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndAddUserEmail(result);
            return retVal.AddUserEmailResult;
        }
        
        private System.IAsyncResult OnBeginAddUserEmail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> id = ((System.Nullable<int>)(inValues[1]));
            string username = ((string)(inValues[2]));
            string email = ((string)(inValues[3]));
            return this.BeginAddUserEmail(login, id, username, email, callback, asyncState);
        }
        
        private object[] OnEndAddUserEmail(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = this.EndAddUserEmail(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddUserEmailCompleted(object state) {
            if ((this.AddUserEmailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddUserEmailCompleted(this, new AddUserEmailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddUserEmailAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> id, string username, string email) {
            this.AddUserEmailAsync(login, id, username, email, null);
        }
        
        public void AddUserEmailAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> id, string username, string email, object userState) {
            if ((this.onBeginAddUserEmailDelegate == null)) {
                this.onBeginAddUserEmailDelegate = new BeginOperationDelegate(this.OnBeginAddUserEmail);
            }
            if ((this.onEndAddUserEmailDelegate == null)) {
                this.onEndAddUserEmailDelegate = new EndOperationDelegate(this.OnEndAddUserEmail);
            }
            if ((this.onAddUserEmailCompletedDelegate == null)) {
                this.onAddUserEmailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddUserEmailCompleted);
            }
            base.InvokeAsync(this.onBeginAddUserEmailDelegate, new object[] {
                        login,
                        id,
                        username,
                        email}, this.onEndAddUserEmailDelegate, this.onAddUserEmailCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginRemoveUserEmail(MoonlightDrtViewer.MonkeyWrench.RemoveUserEmailRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveUserEmail(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginRemoveUserEmail(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> id, string username, string email, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.RemoveUserEmailRequest inValue = new MoonlightDrtViewer.MonkeyWrench.RemoveUserEmailRequest();
            inValue.login = login;
            inValue.id = id;
            inValue.username = username;
            inValue.email = email;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginRemoveUserEmail(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.RemoveUserEmailResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndRemoveUserEmail(System.IAsyncResult result) {
            return base.Channel.EndRemoveUserEmail(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndRemoveUserEmail(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.RemoveUserEmailResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndRemoveUserEmail(result);
            return retVal.RemoveUserEmailResult;
        }
        
        private System.IAsyncResult OnBeginRemoveUserEmail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> id = ((System.Nullable<int>)(inValues[1]));
            string username = ((string)(inValues[2]));
            string email = ((string)(inValues[3]));
            return this.BeginRemoveUserEmail(login, id, username, email, callback, asyncState);
        }
        
        private object[] OnEndRemoveUserEmail(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = this.EndRemoveUserEmail(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveUserEmailCompleted(object state) {
            if ((this.RemoveUserEmailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveUserEmailCompleted(this, new RemoveUserEmailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveUserEmailAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> id, string username, string email) {
            this.RemoveUserEmailAsync(login, id, username, email, null);
        }
        
        public void RemoveUserEmailAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> id, string username, string email, object userState) {
            if ((this.onBeginRemoveUserEmailDelegate == null)) {
                this.onBeginRemoveUserEmailDelegate = new BeginOperationDelegate(this.OnBeginRemoveUserEmail);
            }
            if ((this.onEndRemoveUserEmailDelegate == null)) {
                this.onEndRemoveUserEmailDelegate = new EndOperationDelegate(this.OnEndRemoveUserEmail);
            }
            if ((this.onRemoveUserEmailCompletedDelegate == null)) {
                this.onRemoveUserEmailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveUserEmailCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveUserEmailDelegate, new object[] {
                        login,
                        id,
                        username,
                        email}, this.onEndRemoveUserEmailDelegate, this.onRemoveUserEmailCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginEditUser(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBPerson user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditUser(login, user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndEditUser(System.IAsyncResult result) {
            return base.Channel.EndEditUser(result);
        }
        
        private System.IAsyncResult OnBeginEditUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBPerson user = ((MoonlightDrtViewer.MonkeyWrench.DBPerson)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginEditUser(login, user, callback, asyncState);
        }
        
        private object[] OnEndEditUser(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndEditUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditUserCompleted(object state) {
            if ((this.EditUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditUserCompleted(this, new EditUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditUserAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBPerson user) {
            this.EditUserAsync(login, user, null);
        }
        
        public void EditUserAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBPerson user, object userState) {
            if ((this.onBeginEditUserDelegate == null)) {
                this.onBeginEditUserDelegate = new BeginOperationDelegate(this.OnBeginEditUser);
            }
            if ((this.onEndEditUserDelegate == null)) {
                this.onEndEditUserDelegate = new EndOperationDelegate(this.OnEndEditUser);
            }
            if ((this.onEditUserCompletedDelegate == null)) {
                this.onEditUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditUserCompleted);
            }
            base.InvokeAsync(this.onBeginEditUserDelegate, new object[] {
                        login,
                        user}, this.onEndEditUserDelegate, this.onEditUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetUser(MoonlightDrtViewer.MonkeyWrench.GetUserRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUser(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetUser(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> id, string username, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.GetUserRequest inValue = new MoonlightDrtViewer.MonkeyWrench.GetUserRequest();
            inValue.login = login;
            inValue.id = id;
            inValue.username = username;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetUser(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetUserResponse1 MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetUser(System.IAsyncResult result) {
            return base.Channel.EndGetUser(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.GetUserResponse EndGetUser(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetUserResponse1 retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetUser(result);
            return retVal.GetUserResult;
        }
        
        private System.IAsyncResult OnBeginGetUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> id = ((System.Nullable<int>)(inValues[1]));
            string username = ((string)(inValues[2]));
            return this.BeginGetUser(login, id, username, callback, asyncState);
        }
        
        private object[] OnEndGetUser(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetUserResponse retVal = this.EndGetUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserCompleted(object state) {
            if ((this.GetUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserCompleted(this, new GetUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> id, string username) {
            this.GetUserAsync(login, id, username, null);
        }
        
        public void GetUserAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> id, string username, object userState) {
            if ((this.onBeginGetUserDelegate == null)) {
                this.onBeginGetUserDelegate = new BeginOperationDelegate(this.OnBeginGetUser);
            }
            if ((this.onEndGetUserDelegate == null)) {
                this.onEndGetUserDelegate = new EndOperationDelegate(this.OnEndGetUser);
            }
            if ((this.onGetUserCompletedDelegate == null)) {
                this.onGetUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserDelegate, new object[] {
                        login,
                        id,
                        username}, this.onEndGetUserDelegate, this.onGetUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetUploadPort(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUploadPort(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetUploadPort(System.IAsyncResult result) {
            return base.Channel.EndGetUploadPort(result);
        }
        
        private System.IAsyncResult OnBeginGetUploadPort(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetUploadPort(callback, asyncState);
        }
        
        private object[] OnEndGetUploadPort(System.IAsyncResult result) {
            int retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetUploadPort(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUploadPortCompleted(object state) {
            if ((this.GetUploadPortCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUploadPortCompleted(this, new GetUploadPortCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUploadPortAsync() {
            this.GetUploadPortAsync(null);
        }
        
        public void GetUploadPortAsync(object userState) {
            if ((this.onBeginGetUploadPortDelegate == null)) {
                this.onBeginGetUploadPortDelegate = new BeginOperationDelegate(this.OnBeginGetUploadPort);
            }
            if ((this.onEndGetUploadPortDelegate == null)) {
                this.onEndGetUploadPortDelegate = new EndOperationDelegate(this.OnEndGetUploadPort);
            }
            if ((this.onGetUploadPortCompletedDelegate == null)) {
                this.onGetUploadPortCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUploadPortCompleted);
            }
            base.InvokeAsync(this.onBeginGetUploadPortDelegate, null, this.onEndGetUploadPortDelegate, this.onGetUploadPortCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginAddEnvironmentVariable(MoonlightDrtViewer.MonkeyWrench.AddEnvironmentVariableRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddEnvironmentVariable(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginAddEnvironmentVariable(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, System.Nullable<int> host_id, string name, string value, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.AddEnvironmentVariableRequest inValue = new MoonlightDrtViewer.MonkeyWrench.AddEnvironmentVariableRequest();
            inValue.login = login;
            inValue.lane_id = lane_id;
            inValue.host_id = host_id;
            inValue.name = name;
            inValue.value = value;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginAddEnvironmentVariable(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.AddEnvironmentVariableResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndAddEnvironmentVariable(System.IAsyncResult result) {
            return base.Channel.EndAddEnvironmentVariable(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private int EndAddEnvironmentVariable(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.AddEnvironmentVariableResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndAddEnvironmentVariable(result);
            return retVal.AddEnvironmentVariableResult;
        }
        
        private System.IAsyncResult OnBeginAddEnvironmentVariable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> lane_id = ((System.Nullable<int>)(inValues[1]));
            System.Nullable<int> host_id = ((System.Nullable<int>)(inValues[2]));
            string name = ((string)(inValues[3]));
            string value = ((string)(inValues[4]));
            return this.BeginAddEnvironmentVariable(login, lane_id, host_id, name, value, callback, asyncState);
        }
        
        private object[] OnEndAddEnvironmentVariable(System.IAsyncResult result) {
            int retVal = this.EndAddEnvironmentVariable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddEnvironmentVariableCompleted(object state) {
            if ((this.AddEnvironmentVariableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddEnvironmentVariableCompleted(this, new AddEnvironmentVariableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddEnvironmentVariableAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, System.Nullable<int> host_id, string name, string value) {
            this.AddEnvironmentVariableAsync(login, lane_id, host_id, name, value, null);
        }
        
        public void AddEnvironmentVariableAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, System.Nullable<int> host_id, string name, string value, object userState) {
            if ((this.onBeginAddEnvironmentVariableDelegate == null)) {
                this.onBeginAddEnvironmentVariableDelegate = new BeginOperationDelegate(this.OnBeginAddEnvironmentVariable);
            }
            if ((this.onEndAddEnvironmentVariableDelegate == null)) {
                this.onEndAddEnvironmentVariableDelegate = new EndOperationDelegate(this.OnEndAddEnvironmentVariable);
            }
            if ((this.onAddEnvironmentVariableCompletedDelegate == null)) {
                this.onAddEnvironmentVariableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddEnvironmentVariableCompleted);
            }
            base.InvokeAsync(this.onBeginAddEnvironmentVariableDelegate, new object[] {
                        login,
                        lane_id,
                        host_id,
                        name,
                        value}, this.onEndAddEnvironmentVariableDelegate, this.onAddEnvironmentVariableCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginEditEnvironmentVariable(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBEnvironmentVariable variable, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditEnvironmentVariable(login, variable, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndEditEnvironmentVariable(System.IAsyncResult result) {
            base.Channel.EndEditEnvironmentVariable(result);
        }
        
        private System.IAsyncResult OnBeginEditEnvironmentVariable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBEnvironmentVariable variable = ((MoonlightDrtViewer.MonkeyWrench.DBEnvironmentVariable)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginEditEnvironmentVariable(login, variable, callback, asyncState);
        }
        
        private object[] OnEndEditEnvironmentVariable(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndEditEnvironmentVariable(result);
            return null;
        }
        
        private void OnEditEnvironmentVariableCompleted(object state) {
            if ((this.EditEnvironmentVariableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditEnvironmentVariableCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditEnvironmentVariableAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBEnvironmentVariable variable) {
            this.EditEnvironmentVariableAsync(login, variable, null);
        }
        
        public void EditEnvironmentVariableAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBEnvironmentVariable variable, object userState) {
            if ((this.onBeginEditEnvironmentVariableDelegate == null)) {
                this.onBeginEditEnvironmentVariableDelegate = new BeginOperationDelegate(this.OnBeginEditEnvironmentVariable);
            }
            if ((this.onEndEditEnvironmentVariableDelegate == null)) {
                this.onEndEditEnvironmentVariableDelegate = new EndOperationDelegate(this.OnEndEditEnvironmentVariable);
            }
            if ((this.onEditEnvironmentVariableCompletedDelegate == null)) {
                this.onEditEnvironmentVariableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditEnvironmentVariableCompleted);
            }
            base.InvokeAsync(this.onBeginEditEnvironmentVariableDelegate, new object[] {
                        login,
                        variable}, this.onEndEditEnvironmentVariableDelegate, this.onEditEnvironmentVariableCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginDeleteEnvironmentVariable(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int variable_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteEnvironmentVariable(login, variable_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndDeleteEnvironmentVariable(System.IAsyncResult result) {
            base.Channel.EndDeleteEnvironmentVariable(result);
        }
        
        private System.IAsyncResult OnBeginDeleteEnvironmentVariable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int variable_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginDeleteEnvironmentVariable(login, variable_id, callback, asyncState);
        }
        
        private object[] OnEndDeleteEnvironmentVariable(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndDeleteEnvironmentVariable(result);
            return null;
        }
        
        private void OnDeleteEnvironmentVariableCompleted(object state) {
            if ((this.DeleteEnvironmentVariableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteEnvironmentVariableCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteEnvironmentVariableAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int variable_id) {
            this.DeleteEnvironmentVariableAsync(login, variable_id, null);
        }
        
        public void DeleteEnvironmentVariableAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int variable_id, object userState) {
            if ((this.onBeginDeleteEnvironmentVariableDelegate == null)) {
                this.onBeginDeleteEnvironmentVariableDelegate = new BeginOperationDelegate(this.OnBeginDeleteEnvironmentVariable);
            }
            if ((this.onEndDeleteEnvironmentVariableDelegate == null)) {
                this.onEndDeleteEnvironmentVariableDelegate = new EndOperationDelegate(this.OnEndDeleteEnvironmentVariable);
            }
            if ((this.onDeleteEnvironmentVariableCompletedDelegate == null)) {
                this.onDeleteEnvironmentVariableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteEnvironmentVariableCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteEnvironmentVariableDelegate, new object[] {
                        login,
                        variable_id}, this.onEndDeleteEnvironmentVariableDelegate, this.onDeleteEnvironmentVariableCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginUploadCompressedFile(MoonlightDrtViewer.MonkeyWrench.UploadCompressedFileRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadCompressedFile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginUploadCompressedFile(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, string filename, byte[] contents, bool hidden, string compressed_mime, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.UploadCompressedFileRequest inValue = new MoonlightDrtViewer.MonkeyWrench.UploadCompressedFileRequest();
            inValue.login = login;
            inValue.work = work;
            inValue.filename = filename;
            inValue.contents = contents;
            inValue.hidden = hidden;
            inValue.compressed_mime = compressed_mime;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginUploadCompressedFile(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.UploadCompressedFileResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndUploadCompressedFile(System.IAsyncResult result) {
            return base.Channel.EndUploadCompressedFile(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private void EndUploadCompressedFile(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.UploadCompressedFileResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndUploadCompressedFile(result);
        }
        
        private System.IAsyncResult OnBeginUploadCompressedFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBWork work = ((MoonlightDrtViewer.MonkeyWrench.DBWork)(inValues[1]));
            string filename = ((string)(inValues[2]));
            byte[] contents = ((byte[])(inValues[3]));
            bool hidden = ((bool)(inValues[4]));
            string compressed_mime = ((string)(inValues[5]));
            return this.BeginUploadCompressedFile(login, work, filename, contents, hidden, compressed_mime, callback, asyncState);
        }
        
        private object[] OnEndUploadCompressedFile(System.IAsyncResult result) {
            this.EndUploadCompressedFile(result);
            return null;
        }
        
        private void OnUploadCompressedFileCompleted(object state) {
            if ((this.UploadCompressedFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadCompressedFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadCompressedFileAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, string filename, byte[] contents, bool hidden, string compressed_mime) {
            this.UploadCompressedFileAsync(login, work, filename, contents, hidden, compressed_mime, null);
        }
        
        public void UploadCompressedFileAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, string filename, byte[] contents, bool hidden, string compressed_mime, object userState) {
            if ((this.onBeginUploadCompressedFileDelegate == null)) {
                this.onBeginUploadCompressedFileDelegate = new BeginOperationDelegate(this.OnBeginUploadCompressedFile);
            }
            if ((this.onEndUploadCompressedFileDelegate == null)) {
                this.onEndUploadCompressedFileDelegate = new EndOperationDelegate(this.OnEndUploadCompressedFile);
            }
            if ((this.onUploadCompressedFileCompletedDelegate == null)) {
                this.onUploadCompressedFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadCompressedFileCompleted);
            }
            base.InvokeAsync(this.onBeginUploadCompressedFileDelegate, new object[] {
                        login,
                        work,
                        filename,
                        contents,
                        hidden,
                        compressed_mime}, this.onEndUploadCompressedFileDelegate, this.onUploadCompressedFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginUploadFile(MoonlightDrtViewer.MonkeyWrench.UploadFileRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadFile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginUploadFile(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, string filename, byte[] contents, bool hidden, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.UploadFileRequest inValue = new MoonlightDrtViewer.MonkeyWrench.UploadFileRequest();
            inValue.login = login;
            inValue.work = work;
            inValue.filename = filename;
            inValue.contents = contents;
            inValue.hidden = hidden;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginUploadFile(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.UploadFileResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndUploadFile(System.IAsyncResult result) {
            return base.Channel.EndUploadFile(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private void EndUploadFile(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.UploadFileResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndUploadFile(result);
        }
        
        private System.IAsyncResult OnBeginUploadFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBWork work = ((MoonlightDrtViewer.MonkeyWrench.DBWork)(inValues[1]));
            string filename = ((string)(inValues[2]));
            byte[] contents = ((byte[])(inValues[3]));
            bool hidden = ((bool)(inValues[4]));
            return this.BeginUploadFile(login, work, filename, contents, hidden, callback, asyncState);
        }
        
        private object[] OnEndUploadFile(System.IAsyncResult result) {
            this.EndUploadFile(result);
            return null;
        }
        
        private void OnUploadFileCompleted(object state) {
            if ((this.UploadFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadFileAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, string filename, byte[] contents, bool hidden) {
            this.UploadFileAsync(login, work, filename, contents, hidden, null);
        }
        
        public void UploadFileAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, string filename, byte[] contents, bool hidden, object userState) {
            if ((this.onBeginUploadFileDelegate == null)) {
                this.onBeginUploadFileDelegate = new BeginOperationDelegate(this.OnBeginUploadFile);
            }
            if ((this.onEndUploadFileDelegate == null)) {
                this.onEndUploadFileDelegate = new EndOperationDelegate(this.OnEndUploadFile);
            }
            if ((this.onUploadFileCompletedDelegate == null)) {
                this.onUploadFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadFileCompleted);
            }
            base.InvokeAsync(this.onBeginUploadFileDelegate, new object[] {
                        login,
                        work,
                        filename,
                        contents,
                        hidden}, this.onEndUploadFileDelegate, this.onUploadFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetWorkState(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWorkState(login, work, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.DBState MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetWorkState(System.IAsyncResult result) {
            return base.Channel.EndGetWorkState(result);
        }
        
        private System.IAsyncResult OnBeginGetWorkState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBWork work = ((MoonlightDrtViewer.MonkeyWrench.DBWork)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetWorkState(login, work, callback, asyncState);
        }
        
        private object[] OnEndGetWorkState(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.DBState retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetWorkState(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWorkStateCompleted(object state) {
            if ((this.GetWorkStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWorkStateCompleted(this, new GetWorkStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWorkStateAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work) {
            this.GetWorkStateAsync(login, work, null);
        }
        
        public void GetWorkStateAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, object userState) {
            if ((this.onBeginGetWorkStateDelegate == null)) {
                this.onBeginGetWorkStateDelegate = new BeginOperationDelegate(this.OnBeginGetWorkState);
            }
            if ((this.onEndGetWorkStateDelegate == null)) {
                this.onEndGetWorkStateDelegate = new EndOperationDelegate(this.OnEndGetWorkState);
            }
            if ((this.onGetWorkStateCompletedDelegate == null)) {
                this.onGetWorkStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWorkStateCompleted);
            }
            base.InvokeAsync(this.onBeginGetWorkStateDelegate, new object[] {
                        login,
                        work}, this.onEndGetWorkStateDelegate, this.onGetWorkStateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetFilesForWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int revisionwork_id, int command_id, string filename, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFilesForWork(login, revisionwork_id, command_id, filename, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetFilesForWorkResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetFilesForWork(System.IAsyncResult result) {
            return base.Channel.EndGetFilesForWork(result);
        }
        
        private System.IAsyncResult OnBeginGetFilesForWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int revisionwork_id = ((int)(inValues[1]));
            int command_id = ((int)(inValues[2]));
            string filename = ((string)(inValues[3]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetFilesForWork(login, revisionwork_id, command_id, filename, callback, asyncState);
        }
        
        private object[] OnEndGetFilesForWork(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetFilesForWorkResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetFilesForWork(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFilesForWorkCompleted(object state) {
            if ((this.GetFilesForWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFilesForWorkCompleted(this, new GetFilesForWorkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFilesForWorkAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int revisionwork_id, int command_id, string filename) {
            this.GetFilesForWorkAsync(login, revisionwork_id, command_id, filename, null);
        }
        
        public void GetFilesForWorkAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int revisionwork_id, int command_id, string filename, object userState) {
            if ((this.onBeginGetFilesForWorkDelegate == null)) {
                this.onBeginGetFilesForWorkDelegate = new BeginOperationDelegate(this.OnBeginGetFilesForWork);
            }
            if ((this.onEndGetFilesForWorkDelegate == null)) {
                this.onEndGetFilesForWorkDelegate = new EndOperationDelegate(this.OnEndGetFilesForWork);
            }
            if ((this.onGetFilesForWorkCompletedDelegate == null)) {
                this.onGetFilesForWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFilesForWorkCompleted);
            }
            base.InvokeAsync(this.onBeginGetFilesForWorkDelegate, new object[] {
                        login,
                        revisionwork_id,
                        command_id,
                        filename}, this.onEndGetFilesForWorkDelegate, this.onGetFilesForWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginReportBuildState(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReportBuildState(login, work, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.ReportBuildStateResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndReportBuildState(System.IAsyncResult result) {
            return base.Channel.EndReportBuildState(result);
        }
        
        private System.IAsyncResult OnBeginReportBuildState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBWork work = ((MoonlightDrtViewer.MonkeyWrench.DBWork)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginReportBuildState(login, work, callback, asyncState);
        }
        
        private object[] OnEndReportBuildState(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.ReportBuildStateResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndReportBuildState(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReportBuildStateCompleted(object state) {
            if ((this.ReportBuildStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReportBuildStateCompleted(this, new ReportBuildStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReportBuildStateAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work) {
            this.ReportBuildStateAsync(login, work, null);
        }
        
        public void ReportBuildStateAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, object userState) {
            if ((this.onBeginReportBuildStateDelegate == null)) {
                this.onBeginReportBuildStateDelegate = new BeginOperationDelegate(this.OnBeginReportBuildState);
            }
            if ((this.onEndReportBuildStateDelegate == null)) {
                this.onEndReportBuildStateDelegate = new EndOperationDelegate(this.OnEndReportBuildState);
            }
            if ((this.onReportBuildStateCompletedDelegate == null)) {
                this.onReportBuildStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReportBuildStateCompleted);
            }
            base.InvokeAsync(this.onBeginReportBuildStateDelegate, new object[] {
                        login,
                        work}, this.onEndReportBuildStateDelegate, this.onReportBuildStateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetRevisionWorkForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int revision_id, int host_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRevisionWorkForLane(login, lane_id, revision_id, host_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetRevisionWorkForLaneResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetRevisionWorkForLane(System.IAsyncResult result) {
            return base.Channel.EndGetRevisionWorkForLane(result);
        }
        
        private System.IAsyncResult OnBeginGetRevisionWorkForLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            int revision_id = ((int)(inValues[2]));
            int host_id = ((int)(inValues[3]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetRevisionWorkForLane(login, lane_id, revision_id, host_id, callback, asyncState);
        }
        
        private object[] OnEndGetRevisionWorkForLane(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetRevisionWorkForLaneResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetRevisionWorkForLane(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRevisionWorkForLaneCompleted(object state) {
            if ((this.GetRevisionWorkForLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRevisionWorkForLaneCompleted(this, new GetRevisionWorkForLaneCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRevisionWorkForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int revision_id, int host_id) {
            this.GetRevisionWorkForLaneAsync(login, lane_id, revision_id, host_id, null);
        }
        
        public void GetRevisionWorkForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int revision_id, int host_id, object userState) {
            if ((this.onBeginGetRevisionWorkForLaneDelegate == null)) {
                this.onBeginGetRevisionWorkForLaneDelegate = new BeginOperationDelegate(this.OnBeginGetRevisionWorkForLane);
            }
            if ((this.onEndGetRevisionWorkForLaneDelegate == null)) {
                this.onEndGetRevisionWorkForLaneDelegate = new EndOperationDelegate(this.OnEndGetRevisionWorkForLane);
            }
            if ((this.onGetRevisionWorkForLaneCompletedDelegate == null)) {
                this.onGetRevisionWorkForLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRevisionWorkForLaneCompleted);
            }
            base.InvokeAsync(this.onBeginGetRevisionWorkForLaneDelegate, new object[] {
                        login,
                        lane_id,
                        revision_id,
                        host_id}, this.onEndGetRevisionWorkForLaneDelegate, this.onGetRevisionWorkForLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginReportBuildBotStatus(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.BuildBotStatus status, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReportBuildBotStatus(login, status, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.ReportBuildBotStatusResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndReportBuildBotStatus(System.IAsyncResult result) {
            return base.Channel.EndReportBuildBotStatus(result);
        }
        
        private System.IAsyncResult OnBeginReportBuildBotStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.BuildBotStatus status = ((MoonlightDrtViewer.MonkeyWrench.BuildBotStatus)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginReportBuildBotStatus(login, status, callback, asyncState);
        }
        
        private object[] OnEndReportBuildBotStatus(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.ReportBuildBotStatusResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndReportBuildBotStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReportBuildBotStatusCompleted(object state) {
            if ((this.ReportBuildBotStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReportBuildBotStatusCompleted(this, new ReportBuildBotStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReportBuildBotStatusAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.BuildBotStatus status) {
            this.ReportBuildBotStatusAsync(login, status, null);
        }
        
        public void ReportBuildBotStatusAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.BuildBotStatus status, object userState) {
            if ((this.onBeginReportBuildBotStatusDelegate == null)) {
                this.onBeginReportBuildBotStatusDelegate = new BeginOperationDelegate(this.OnBeginReportBuildBotStatus);
            }
            if ((this.onEndReportBuildBotStatusDelegate == null)) {
                this.onEndReportBuildBotStatusDelegate = new EndOperationDelegate(this.OnEndReportBuildBotStatus);
            }
            if ((this.onReportBuildBotStatusCompletedDelegate == null)) {
                this.onReportBuildBotStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReportBuildBotStatusCompleted);
            }
            base.InvokeAsync(this.onBeginReportBuildBotStatusDelegate, new object[] {
                        login,
                        status}, this.onEndReportBuildBotStatusDelegate, this.onReportBuildBotStatusCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetBuildBotStatus(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBuildBotStatus(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetBuildBotStatusResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetBuildBotStatus(System.IAsyncResult result) {
            return base.Channel.EndGetBuildBotStatus(result);
        }
        
        private System.IAsyncResult OnBeginGetBuildBotStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetBuildBotStatus(login, callback, asyncState);
        }
        
        private object[] OnEndGetBuildBotStatus(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetBuildBotStatusResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetBuildBotStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBuildBotStatusCompleted(object state) {
            if ((this.GetBuildBotStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBuildBotStatusCompleted(this, new GetBuildBotStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBuildBotStatusAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.GetBuildBotStatusAsync(login, null);
        }
        
        public void GetBuildBotStatusAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginGetBuildBotStatusDelegate == null)) {
                this.onBeginGetBuildBotStatusDelegate = new BeginOperationDelegate(this.OnBeginGetBuildBotStatus);
            }
            if ((this.onEndGetBuildBotStatusDelegate == null)) {
                this.onEndGetBuildBotStatusDelegate = new EndOperationDelegate(this.OnEndGetBuildBotStatus);
            }
            if ((this.onGetBuildBotStatusCompletedDelegate == null)) {
                this.onGetBuildBotStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBuildBotStatusCompleted);
            }
            base.InvokeAsync(this.onBeginGetBuildBotStatusDelegate, new object[] {
                        login}, this.onEndGetBuildBotStatusDelegate, this.onGetBuildBotStatusCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetBuildInfo(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBuildInfo(login, host, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetBuildInfo(System.IAsyncResult result) {
            return base.Channel.EndGetBuildInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetBuildInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            string host = ((string)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetBuildInfo(login, host, callback, asyncState);
        }
        
        private object[] OnEndGetBuildInfo(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetBuildInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBuildInfoCompleted(object state) {
            if ((this.GetBuildInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBuildInfoCompleted(this, new GetBuildInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBuildInfoAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host) {
            this.GetBuildInfoAsync(login, host, null);
        }
        
        public void GetBuildInfoAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, object userState) {
            if ((this.onBeginGetBuildInfoDelegate == null)) {
                this.onBeginGetBuildInfoDelegate = new BeginOperationDelegate(this.OnBeginGetBuildInfo);
            }
            if ((this.onEndGetBuildInfoDelegate == null)) {
                this.onEndGetBuildInfoDelegate = new EndOperationDelegate(this.OnEndGetBuildInfo);
            }
            if ((this.onGetBuildInfoCompletedDelegate == null)) {
                this.onGetBuildInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBuildInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetBuildInfoDelegate, new object[] {
                        login,
                        host}, this.onEndGetBuildInfoDelegate, this.onGetBuildInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetBuildInfoMultiple(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, bool multiple_work, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBuildInfoMultiple(login, host, multiple_work, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetBuildInfoMultiple(System.IAsyncResult result) {
            return base.Channel.EndGetBuildInfoMultiple(result);
        }
        
        private System.IAsyncResult OnBeginGetBuildInfoMultiple(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            string host = ((string)(inValues[1]));
            bool multiple_work = ((bool)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetBuildInfoMultiple(login, host, multiple_work, callback, asyncState);
        }
        
        private object[] OnEndGetBuildInfoMultiple(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetBuildInfoMultiple(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBuildInfoMultipleCompleted(object state) {
            if ((this.GetBuildInfoMultipleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBuildInfoMultipleCompleted(this, new GetBuildInfoMultipleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBuildInfoMultipleAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, bool multiple_work) {
            this.GetBuildInfoMultipleAsync(login, host, multiple_work, null);
        }
        
        public void GetBuildInfoMultipleAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, bool multiple_work, object userState) {
            if ((this.onBeginGetBuildInfoMultipleDelegate == null)) {
                this.onBeginGetBuildInfoMultipleDelegate = new BeginOperationDelegate(this.OnBeginGetBuildInfoMultiple);
            }
            if ((this.onEndGetBuildInfoMultipleDelegate == null)) {
                this.onEndGetBuildInfoMultipleDelegate = new EndOperationDelegate(this.OnEndGetBuildInfoMultiple);
            }
            if ((this.onGetBuildInfoMultipleCompletedDelegate == null)) {
                this.onGetBuildInfoMultipleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBuildInfoMultipleCompleted);
            }
            base.InvokeAsync(this.onBeginGetBuildInfoMultipleDelegate, new object[] {
                        login,
                        host,
                        multiple_work}, this.onEndGetBuildInfoMultipleDelegate, this.onGetBuildInfoMultipleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginFindLatestWorkFileId(MoonlightDrtViewer.MonkeyWrench.FindLatestWorkFileIdRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindLatestWorkFileId(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginFindLatestWorkFileId(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, string filename, bool completed, bool successful, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.FindLatestWorkFileIdRequest inValue = new MoonlightDrtViewer.MonkeyWrench.FindLatestWorkFileIdRequest();
            inValue.login = login;
            inValue.lane_id = lane_id;
            inValue.lane = lane;
            inValue.filename = filename;
            inValue.completed = completed;
            inValue.successful = successful;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginFindLatestWorkFileId(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.FindLatestWorkFileIdResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndFindLatestWorkFileId(System.IAsyncResult result) {
            return base.Channel.EndFindLatestWorkFileId(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.Nullable<int> EndFindLatestWorkFileId(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.FindLatestWorkFileIdResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndFindLatestWorkFileId(result);
            return retVal.FindLatestWorkFileIdResult;
        }
        
        private System.IAsyncResult OnBeginFindLatestWorkFileId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> lane_id = ((System.Nullable<int>)(inValues[1]));
            string lane = ((string)(inValues[2]));
            string filename = ((string)(inValues[3]));
            bool completed = ((bool)(inValues[4]));
            bool successful = ((bool)(inValues[5]));
            return this.BeginFindLatestWorkFileId(login, lane_id, lane, filename, completed, successful, callback, asyncState);
        }
        
        private object[] OnEndFindLatestWorkFileId(System.IAsyncResult result) {
            System.Nullable<int> retVal = this.EndFindLatestWorkFileId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindLatestWorkFileIdCompleted(object state) {
            if ((this.FindLatestWorkFileIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindLatestWorkFileIdCompleted(this, new FindLatestWorkFileIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindLatestWorkFileIdAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, string filename, bool completed, bool successful) {
            this.FindLatestWorkFileIdAsync(login, lane_id, lane, filename, completed, successful, null);
        }
        
        public void FindLatestWorkFileIdAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, string filename, bool completed, bool successful, object userState) {
            if ((this.onBeginFindLatestWorkFileIdDelegate == null)) {
                this.onBeginFindLatestWorkFileIdDelegate = new BeginOperationDelegate(this.OnBeginFindLatestWorkFileId);
            }
            if ((this.onEndFindLatestWorkFileIdDelegate == null)) {
                this.onEndFindLatestWorkFileIdDelegate = new EndOperationDelegate(this.OnEndFindLatestWorkFileId);
            }
            if ((this.onFindLatestWorkFileIdCompletedDelegate == null)) {
                this.onFindLatestWorkFileIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindLatestWorkFileIdCompleted);
            }
            base.InvokeAsync(this.onBeginFindLatestWorkFileIdDelegate, new object[] {
                        login,
                        lane_id,
                        lane,
                        filename,
                        completed,
                        successful}, this.onEndFindLatestWorkFileIdDelegate, this.onFindLatestWorkFileIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetTestResults(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string[] revisions, string filename, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTestResults(login, revisions, filename, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetTestResultsResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetTestResults(System.IAsyncResult result) {
            return base.Channel.EndGetTestResults(result);
        }
        
        private System.IAsyncResult OnBeginGetTestResults(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            string[] revisions = ((string[])(inValues[1]));
            string filename = ((string)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetTestResults(login, revisions, filename, callback, asyncState);
        }
        
        private object[] OnEndGetTestResults(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetTestResultsResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetTestResults(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTestResultsCompleted(object state) {
            if ((this.GetTestResultsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTestResultsCompleted(this, new GetTestResultsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTestResultsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string[] revisions, string filename) {
            this.GetTestResultsAsync(login, revisions, filename, null);
        }
        
        public void GetTestResultsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string[] revisions, string filename, object userState) {
            if ((this.onBeginGetTestResultsDelegate == null)) {
                this.onBeginGetTestResultsDelegate = new BeginOperationDelegate(this.OnBeginGetTestResults);
            }
            if ((this.onEndGetTestResultsDelegate == null)) {
                this.onEndGetTestResultsDelegate = new EndOperationDelegate(this.OnEndGetTestResults);
            }
            if ((this.onGetTestResultsCompletedDelegate == null)) {
                this.onGetTestResultsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTestResultsCompleted);
            }
            base.InvokeAsync(this.onBeginGetTestResultsDelegate, new object[] {
                        login,
                        revisions,
                        filename}, this.onEndGetTestResultsDelegate, this.onGetTestResultsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginEditIdentity(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBIrcIdentity irc_identity, MoonlightDrtViewer.MonkeyWrench.DBEmailIdentity email_identity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditIdentity(login, irc_identity, email_identity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndEditIdentity(System.IAsyncResult result) {
            return base.Channel.EndEditIdentity(result);
        }
        
        private System.IAsyncResult OnBeginEditIdentity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBIrcIdentity irc_identity = ((MoonlightDrtViewer.MonkeyWrench.DBIrcIdentity)(inValues[1]));
            MoonlightDrtViewer.MonkeyWrench.DBEmailIdentity email_identity = ((MoonlightDrtViewer.MonkeyWrench.DBEmailIdentity)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginEditIdentity(login, irc_identity, email_identity, callback, asyncState);
        }
        
        private object[] OnEndEditIdentity(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndEditIdentity(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditIdentityCompleted(object state) {
            if ((this.EditIdentityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditIdentityCompleted(this, new EditIdentityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditIdentityAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBIrcIdentity irc_identity, MoonlightDrtViewer.MonkeyWrench.DBEmailIdentity email_identity) {
            this.EditIdentityAsync(login, irc_identity, email_identity, null);
        }
        
        public void EditIdentityAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBIrcIdentity irc_identity, MoonlightDrtViewer.MonkeyWrench.DBEmailIdentity email_identity, object userState) {
            if ((this.onBeginEditIdentityDelegate == null)) {
                this.onBeginEditIdentityDelegate = new BeginOperationDelegate(this.OnBeginEditIdentity);
            }
            if ((this.onEndEditIdentityDelegate == null)) {
                this.onEndEditIdentityDelegate = new EndOperationDelegate(this.OnEndEditIdentity);
            }
            if ((this.onEditIdentityCompletedDelegate == null)) {
                this.onEditIdentityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditIdentityCompleted);
            }
            base.InvokeAsync(this.onBeginEditIdentityDelegate, new object[] {
                        login,
                        irc_identity,
                        email_identity}, this.onEndEditIdentityDelegate, this.onEditIdentityCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginRemoveIdentity(MoonlightDrtViewer.MonkeyWrench.RemoveIdentityRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveIdentity(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginRemoveIdentity(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> irc_identity, System.Nullable<int> email_identity, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.RemoveIdentityRequest inValue = new MoonlightDrtViewer.MonkeyWrench.RemoveIdentityRequest();
            inValue.login = login;
            inValue.irc_identity = irc_identity;
            inValue.email_identity = email_identity;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginRemoveIdentity(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.RemoveIdentityResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndRemoveIdentity(System.IAsyncResult result) {
            return base.Channel.EndRemoveIdentity(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndRemoveIdentity(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.RemoveIdentityResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndRemoveIdentity(result);
            return retVal.RemoveIdentityResult;
        }
        
        private System.IAsyncResult OnBeginRemoveIdentity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> irc_identity = ((System.Nullable<int>)(inValues[1]));
            System.Nullable<int> email_identity = ((System.Nullable<int>)(inValues[2]));
            return this.BeginRemoveIdentity(login, irc_identity, email_identity, callback, asyncState);
        }
        
        private object[] OnEndRemoveIdentity(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = this.EndRemoveIdentity(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveIdentityCompleted(object state) {
            if ((this.RemoveIdentityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveIdentityCompleted(this, new RemoveIdentityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveIdentityAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> irc_identity, System.Nullable<int> email_identity) {
            this.RemoveIdentityAsync(login, irc_identity, email_identity, null);
        }
        
        public void RemoveIdentityAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> irc_identity, System.Nullable<int> email_identity, object userState) {
            if ((this.onBeginRemoveIdentityDelegate == null)) {
                this.onBeginRemoveIdentityDelegate = new BeginOperationDelegate(this.OnBeginRemoveIdentity);
            }
            if ((this.onEndRemoveIdentityDelegate == null)) {
                this.onEndRemoveIdentityDelegate = new EndOperationDelegate(this.OnEndRemoveIdentity);
            }
            if ((this.onRemoveIdentityCompletedDelegate == null)) {
                this.onRemoveIdentityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveIdentityCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveIdentityDelegate, new object[] {
                        login,
                        irc_identity,
                        email_identity}, this.onEndRemoveIdentityDelegate, this.onRemoveIdentityCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetIdentities(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetIdentities(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetIdentitiesResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetIdentities(System.IAsyncResult result) {
            return base.Channel.EndGetIdentities(result);
        }
        
        private System.IAsyncResult OnBeginGetIdentities(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetIdentities(login, callback, asyncState);
        }
        
        private object[] OnEndGetIdentities(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetIdentitiesResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetIdentities(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetIdentitiesCompleted(object state) {
            if ((this.GetIdentitiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetIdentitiesCompleted(this, new GetIdentitiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetIdentitiesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.GetIdentitiesAsync(login, null);
        }
        
        public void GetIdentitiesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginGetIdentitiesDelegate == null)) {
                this.onBeginGetIdentitiesDelegate = new BeginOperationDelegate(this.OnBeginGetIdentities);
            }
            if ((this.onEndGetIdentitiesDelegate == null)) {
                this.onEndGetIdentitiesDelegate = new EndOperationDelegate(this.OnEndGetIdentities);
            }
            if ((this.onGetIdentitiesCompletedDelegate == null)) {
                this.onGetIdentitiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetIdentitiesCompleted);
            }
            base.InvokeAsync(this.onBeginGetIdentitiesDelegate, new object[] {
                        login}, this.onEndGetIdentitiesDelegate, this.onGetIdentitiesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginEditNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBNotification notification, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditNotification(login, notification, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndEditNotification(System.IAsyncResult result) {
            return base.Channel.EndEditNotification(result);
        }
        
        private System.IAsyncResult OnBeginEditNotification(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBNotification notification = ((MoonlightDrtViewer.MonkeyWrench.DBNotification)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginEditNotification(login, notification, callback, asyncState);
        }
        
        private object[] OnEndEditNotification(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndEditNotification(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditNotificationCompleted(object state) {
            if ((this.EditNotificationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditNotificationCompleted(this, new EditNotificationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditNotificationAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBNotification notification) {
            this.EditNotificationAsync(login, notification, null);
        }
        
        public void EditNotificationAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBNotification notification, object userState) {
            if ((this.onBeginEditNotificationDelegate == null)) {
                this.onBeginEditNotificationDelegate = new BeginOperationDelegate(this.OnBeginEditNotification);
            }
            if ((this.onEndEditNotificationDelegate == null)) {
                this.onEndEditNotificationDelegate = new EndOperationDelegate(this.OnEndEditNotification);
            }
            if ((this.onEditNotificationCompletedDelegate == null)) {
                this.onEditNotificationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditNotificationCompleted);
            }
            base.InvokeAsync(this.onBeginEditNotificationDelegate, new object[] {
                        login,
                        notification}, this.onEndEditNotificationDelegate, this.onEditNotificationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginRemoveNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveNotification(login, id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndRemoveNotification(System.IAsyncResult result) {
            return base.Channel.EndRemoveNotification(result);
        }
        
        private System.IAsyncResult OnBeginRemoveNotification(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginRemoveNotification(login, id, callback, asyncState);
        }
        
        private object[] OnEndRemoveNotification(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndRemoveNotification(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveNotificationCompleted(object state) {
            if ((this.RemoveNotificationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveNotificationCompleted(this, new RemoveNotificationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveNotificationAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id) {
            this.RemoveNotificationAsync(login, id, null);
        }
        
        public void RemoveNotificationAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, object userState) {
            if ((this.onBeginRemoveNotificationDelegate == null)) {
                this.onBeginRemoveNotificationDelegate = new BeginOperationDelegate(this.OnBeginRemoveNotification);
            }
            if ((this.onEndRemoveNotificationDelegate == null)) {
                this.onEndRemoveNotificationDelegate = new EndOperationDelegate(this.OnEndRemoveNotification);
            }
            if ((this.onRemoveNotificationCompletedDelegate == null)) {
                this.onRemoveNotificationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveNotificationCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveNotificationDelegate, new object[] {
                        login,
                        id}, this.onEndRemoveNotificationDelegate, this.onRemoveNotificationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetNotifications(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNotifications(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetNotificationsResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetNotifications(System.IAsyncResult result) {
            return base.Channel.EndGetNotifications(result);
        }
        
        private System.IAsyncResult OnBeginGetNotifications(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetNotifications(login, callback, asyncState);
        }
        
        private object[] OnEndGetNotifications(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetNotificationsResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetNotifications(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNotificationsCompleted(object state) {
            if ((this.GetNotificationsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNotificationsCompleted(this, new GetNotificationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNotificationsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.GetNotificationsAsync(login, null);
        }
        
        public void GetNotificationsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginGetNotificationsDelegate == null)) {
                this.onBeginGetNotificationsDelegate = new BeginOperationDelegate(this.OnBeginGetNotifications);
            }
            if ((this.onEndGetNotificationsDelegate == null)) {
                this.onEndGetNotificationsDelegate = new EndOperationDelegate(this.OnEndGetNotifications);
            }
            if ((this.onGetNotificationsCompletedDelegate == null)) {
                this.onGetNotificationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNotificationsCompleted);
            }
            base.InvokeAsync(this.onBeginGetNotificationsDelegate, new object[] {
                        login}, this.onEndGetNotificationsDelegate, this.onGetNotificationsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginAddLaneNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int notification_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddLaneNotification(login, lane_id, notification_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndAddLaneNotification(System.IAsyncResult result) {
            return base.Channel.EndAddLaneNotification(result);
        }
        
        private System.IAsyncResult OnBeginAddLaneNotification(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            int notification_id = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginAddLaneNotification(login, lane_id, notification_id, callback, asyncState);
        }
        
        private object[] OnEndAddLaneNotification(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndAddLaneNotification(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddLaneNotificationCompleted(object state) {
            if ((this.AddLaneNotificationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddLaneNotificationCompleted(this, new AddLaneNotificationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddLaneNotificationAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int notification_id) {
            this.AddLaneNotificationAsync(login, lane_id, notification_id, null);
        }
        
        public void AddLaneNotificationAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int notification_id, object userState) {
            if ((this.onBeginAddLaneNotificationDelegate == null)) {
                this.onBeginAddLaneNotificationDelegate = new BeginOperationDelegate(this.OnBeginAddLaneNotification);
            }
            if ((this.onEndAddLaneNotificationDelegate == null)) {
                this.onEndAddLaneNotificationDelegate = new EndOperationDelegate(this.OnEndAddLaneNotification);
            }
            if ((this.onAddLaneNotificationCompletedDelegate == null)) {
                this.onAddLaneNotificationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddLaneNotificationCompleted);
            }
            base.InvokeAsync(this.onBeginAddLaneNotificationDelegate, new object[] {
                        login,
                        lane_id,
                        notification_id}, this.onEndAddLaneNotificationDelegate, this.onAddLaneNotificationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginRemoveLaneNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveLaneNotification(login, id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndRemoveLaneNotification(System.IAsyncResult result) {
            return base.Channel.EndRemoveLaneNotification(result);
        }
        
        private System.IAsyncResult OnBeginRemoveLaneNotification(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginRemoveLaneNotification(login, id, callback, asyncState);
        }
        
        private object[] OnEndRemoveLaneNotification(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndRemoveLaneNotification(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveLaneNotificationCompleted(object state) {
            if ((this.RemoveLaneNotificationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveLaneNotificationCompleted(this, new RemoveLaneNotificationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveLaneNotificationAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id) {
            this.RemoveLaneNotificationAsync(login, id, null);
        }
        
        public void RemoveLaneNotificationAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, object userState) {
            if ((this.onBeginRemoveLaneNotificationDelegate == null)) {
                this.onBeginRemoveLaneNotificationDelegate = new BeginOperationDelegate(this.OnBeginRemoveLaneNotification);
            }
            if ((this.onEndRemoveLaneNotificationDelegate == null)) {
                this.onEndRemoveLaneNotificationDelegate = new EndOperationDelegate(this.OnEndRemoveLaneNotification);
            }
            if ((this.onRemoveLaneNotificationCompletedDelegate == null)) {
                this.onRemoveLaneNotificationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveLaneNotificationCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveLaneNotificationDelegate, new object[] {
                        login,
                        id}, this.onEndRemoveLaneNotificationDelegate, this.onRemoveLaneNotificationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginAddRelease(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBRelease release, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddRelease(login, release, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndAddRelease(System.IAsyncResult result) {
            return base.Channel.EndAddRelease(result);
        }
        
        private System.IAsyncResult OnBeginAddRelease(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBRelease release = ((MoonlightDrtViewer.MonkeyWrench.DBRelease)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginAddRelease(login, release, callback, asyncState);
        }
        
        private object[] OnEndAddRelease(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndAddRelease(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddReleaseCompleted(object state) {
            if ((this.AddReleaseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddReleaseCompleted(this, new AddReleaseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddReleaseAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBRelease release) {
            this.AddReleaseAsync(login, release, null);
        }
        
        public void AddReleaseAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBRelease release, object userState) {
            if ((this.onBeginAddReleaseDelegate == null)) {
                this.onBeginAddReleaseDelegate = new BeginOperationDelegate(this.OnBeginAddRelease);
            }
            if ((this.onEndAddReleaseDelegate == null)) {
                this.onEndAddReleaseDelegate = new EndOperationDelegate(this.OnEndAddRelease);
            }
            if ((this.onAddReleaseCompletedDelegate == null)) {
                this.onAddReleaseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddReleaseCompleted);
            }
            base.InvokeAsync(this.onBeginAddReleaseDelegate, new object[] {
                        login,
                        release}, this.onEndAddReleaseDelegate, this.onAddReleaseCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetReleases(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetReleases(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetReleasesResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetReleases(System.IAsyncResult result) {
            return base.Channel.EndGetReleases(result);
        }
        
        private System.IAsyncResult OnBeginGetReleases(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetReleases(login, callback, asyncState);
        }
        
        private object[] OnEndGetReleases(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetReleasesResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetReleases(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetReleasesCompleted(object state) {
            if ((this.GetReleasesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetReleasesCompleted(this, new GetReleasesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetReleasesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.GetReleasesAsync(login, null);
        }
        
        public void GetReleasesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginGetReleasesDelegate == null)) {
                this.onBeginGetReleasesDelegate = new BeginOperationDelegate(this.OnBeginGetReleases);
            }
            if ((this.onEndGetReleasesDelegate == null)) {
                this.onEndGetReleasesDelegate = new EndOperationDelegate(this.OnEndGetReleases);
            }
            if ((this.onGetReleasesCompletedDelegate == null)) {
                this.onGetReleasesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetReleasesCompleted);
            }
            base.InvokeAsync(this.onBeginGetReleasesDelegate, new object[] {
                        login}, this.onEndGetReleasesDelegate, this.onGetReleasesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginDeleteRelease(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteRelease(login, id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndDeleteRelease(System.IAsyncResult result) {
            return base.Channel.EndDeleteRelease(result);
        }
        
        private System.IAsyncResult OnBeginDeleteRelease(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginDeleteRelease(login, id, callback, asyncState);
        }
        
        private object[] OnEndDeleteRelease(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndDeleteRelease(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteReleaseCompleted(object state) {
            if ((this.DeleteReleaseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteReleaseCompleted(this, new DeleteReleaseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteReleaseAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id) {
            this.DeleteReleaseAsync(login, id, null);
        }
        
        public void DeleteReleaseAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, object userState) {
            if ((this.onBeginDeleteReleaseDelegate == null)) {
                this.onBeginDeleteReleaseDelegate = new BeginOperationDelegate(this.OnBeginDeleteRelease);
            }
            if ((this.onEndDeleteReleaseDelegate == null)) {
                this.onEndDeleteReleaseDelegate = new EndOperationDelegate(this.OnEndDeleteRelease);
            }
            if ((this.onDeleteReleaseCompletedDelegate == null)) {
                this.onDeleteReleaseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteReleaseCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteReleaseDelegate, new object[] {
                        login,
                        id}, this.onEndDeleteReleaseDelegate, this.onDeleteReleaseCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginExecuteScheduler(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, bool forcefullupdate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecuteScheduler(login, forcefullupdate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndExecuteScheduler(System.IAsyncResult result) {
            base.Channel.EndExecuteScheduler(result);
        }
        
        private System.IAsyncResult OnBeginExecuteScheduler(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            bool forcefullupdate = ((bool)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginExecuteScheduler(login, forcefullupdate, callback, asyncState);
        }
        
        private object[] OnEndExecuteScheduler(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndExecuteScheduler(result);
            return null;
        }
        
        private void OnExecuteSchedulerCompleted(object state) {
            if ((this.ExecuteSchedulerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecuteSchedulerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecuteSchedulerAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, bool forcefullupdate) {
            this.ExecuteSchedulerAsync(login, forcefullupdate, null);
        }
        
        public void ExecuteSchedulerAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, bool forcefullupdate, object userState) {
            if ((this.onBeginExecuteSchedulerDelegate == null)) {
                this.onBeginExecuteSchedulerDelegate = new BeginOperationDelegate(this.OnBeginExecuteScheduler);
            }
            if ((this.onEndExecuteSchedulerDelegate == null)) {
                this.onEndExecuteSchedulerDelegate = new EndOperationDelegate(this.OnEndExecuteScheduler);
            }
            if ((this.onExecuteSchedulerCompletedDelegate == null)) {
                this.onExecuteSchedulerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecuteSchedulerCompleted);
            }
            base.InvokeAsync(this.onBeginExecuteSchedulerDelegate, new object[] {
                        login,
                        forcefullupdate}, this.onEndExecuteSchedulerDelegate, this.onExecuteSchedulerCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginExecuteDeletionDirectives(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecuteDeletionDirectives(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndExecuteDeletionDirectives(System.IAsyncResult result) {
            base.Channel.EndExecuteDeletionDirectives(result);
        }
        
        private System.IAsyncResult OnBeginExecuteDeletionDirectives(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginExecuteDeletionDirectives(login, callback, asyncState);
        }
        
        private object[] OnEndExecuteDeletionDirectives(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndExecuteDeletionDirectives(result);
            return null;
        }
        
        private void OnExecuteDeletionDirectivesCompleted(object state) {
            if ((this.ExecuteDeletionDirectivesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecuteDeletionDirectivesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecuteDeletionDirectivesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.ExecuteDeletionDirectivesAsync(login, null);
        }
        
        public void ExecuteDeletionDirectivesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginExecuteDeletionDirectivesDelegate == null)) {
                this.onBeginExecuteDeletionDirectivesDelegate = new BeginOperationDelegate(this.OnBeginExecuteDeletionDirectives);
            }
            if ((this.onEndExecuteDeletionDirectivesDelegate == null)) {
                this.onEndExecuteDeletionDirectivesDelegate = new EndOperationDelegate(this.OnEndExecuteDeletionDirectives);
            }
            if ((this.onExecuteDeletionDirectivesCompletedDelegate == null)) {
                this.onExecuteDeletionDirectivesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecuteDeletionDirectivesCompleted);
            }
            base.InvokeAsync(this.onBeginExecuteDeletionDirectivesDelegate, new object[] {
                        login}, this.onEndExecuteDeletionDirectivesDelegate, this.onExecuteDeletionDirectivesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.BeginGetAdminInfo(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAdminInfo(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetAdminInfoResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap.EndGetAdminInfo(System.IAsyncResult result) {
            return base.Channel.EndGetAdminInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetAdminInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).BeginGetAdminInfo(login, callback, asyncState);
        }
        
        private object[] OnEndGetAdminInfo(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetAdminInfoResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap)(this)).EndGetAdminInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAdminInfoCompleted(object state) {
            if ((this.GetAdminInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAdminInfoCompleted(this, new GetAdminInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAdminInfoAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.GetAdminInfoAsync(login, null);
        }
        
        public void GetAdminInfoAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginGetAdminInfoDelegate == null)) {
                this.onBeginGetAdminInfoDelegate = new BeginOperationDelegate(this.OnBeginGetAdminInfo);
            }
            if ((this.onEndGetAdminInfoDelegate == null)) {
                this.onEndGetAdminInfoDelegate = new EndOperationDelegate(this.OnEndGetAdminInfo);
            }
            if ((this.onGetAdminInfoCompletedDelegate == null)) {
                this.onGetAdminInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAdminInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetAdminInfoDelegate, new object[] {
                        login}, this.onEndGetAdminInfoDelegate, this.onGetAdminInfoCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MoonlightDrtViewer.MonkeyWrench.WebServicesSoap CreateChannel() {
            return new WebServicesSoapClientChannel(this);
        }
        
        private class WebServicesSoapClientChannel : ChannelBase<MoonlightDrtViewer.MonkeyWrench.WebServicesSoap>, MoonlightDrtViewer.MonkeyWrench.WebServicesSoap {
            
            public WebServicesSoapClientChannel(System.ServiceModel.ClientBase<MoonlightDrtViewer.MonkeyWrench.WebServicesSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetRoles(string user, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = user;
                System.IAsyncResult _result = base.BeginInvoke("GetRoles", _args, callback, asyncState);
                return _result;
            }
            
            public string[] EndGetRoles(System.IAsyncResult result) {
                object[] _args = new object[0];
                string[] _result = ((string[])(base.EndInvoke("GetRoles", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogin(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("Login", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.LoginResponse EndLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.LoginResponse _result = ((MoonlightDrtViewer.MonkeyWrench.LoginResponse)(base.EndInvoke("Login", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogout(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("Logout", _args, callback, asyncState);
                return _result;
            }
            
            public void EndLogout(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Logout", _args, result);
            }
            
            public System.IAsyncResult BeginCreateLanefile(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string filename, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = filename;
                System.IAsyncResult _result = base.BeginInvoke("CreateLanefile", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCreateLanefile(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CreateLanefile", _args, result);
            }
            
            public System.IAsyncResult BeginAttachFileToLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int lanefile_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = lanefile_id;
                System.IAsyncResult _result = base.BeginInvoke("AttachFileToLane", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAttachFileToLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AttachFileToLane", _args, result);
            }
            
            public System.IAsyncResult BeginDeattachFileFromLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int lanefile_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = lanefile_id;
                System.IAsyncResult _result = base.BeginInvoke("DeattachFileFromLane", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeattachFileFromLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeattachFileFromLane", _args, result);
            }
            
            public System.IAsyncResult BeginEditCommandFilename(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string filename, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = command_id;
                _args[2] = filename;
                System.IAsyncResult _result = base.BeginInvoke("EditCommandFilename", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditCommandFilename(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditCommandFilename", _args, result);
            }
            
            public System.IAsyncResult BeginEditCommandSequence(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, int sequence, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = command_id;
                _args[2] = sequence;
                System.IAsyncResult _result = base.BeginInvoke("EditCommandSequence", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditCommandSequence(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditCommandSequence", _args, result);
            }
            
            public System.IAsyncResult BeginEditCommandArguments(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string arguments, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = command_id;
                _args[2] = arguments;
                System.IAsyncResult _result = base.BeginInvoke("EditCommandArguments", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditCommandArguments(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditCommandArguments", _args, result);
            }
            
            public System.IAsyncResult BeginEditCommandTimeout(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, int timeout, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = command_id;
                _args[2] = timeout;
                System.IAsyncResult _result = base.BeginInvoke("EditCommandTimeout", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditCommandTimeout(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditCommandTimeout", _args, result);
            }
            
            public System.IAsyncResult BeginEditCommandWorkingDirectory(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string working_directory, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = command_id;
                _args[2] = working_directory;
                System.IAsyncResult _result = base.BeginInvoke("EditCommandWorkingDirectory", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditCommandWorkingDirectory(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditCommandWorkingDirectory", _args, result);
            }
            
            public System.IAsyncResult BeginEditCommandUploadFiles(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string upload_files, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = command_id;
                _args[2] = upload_files;
                System.IAsyncResult _result = base.BeginInvoke("EditCommandUploadFiles", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditCommandUploadFiles(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditCommandUploadFiles", _args, result);
            }
            
            public System.IAsyncResult BeginSwitchCommandNonFatal(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = command_id;
                System.IAsyncResult _result = base.BeginInvoke("SwitchCommandNonFatal", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSwitchCommandNonFatal(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SwitchCommandNonFatal", _args, result);
            }
            
            public System.IAsyncResult BeginSwitchCommandAlwaysExecute(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = command_id;
                System.IAsyncResult _result = base.BeginInvoke("SwitchCommandAlwaysExecute", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSwitchCommandAlwaysExecute(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SwitchCommandAlwaysExecute", _args, result);
            }
            
            public System.IAsyncResult BeginSwitchCommandInternal(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = command_id;
                System.IAsyncResult _result = base.BeginInvoke("SwitchCommandInternal", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSwitchCommandInternal(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SwitchCommandInternal", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteCommand(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = command_id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteCommand", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteCommand(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteCommand", _args, result);
            }
            
            public System.IAsyncResult BeginAddCommand(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string command, bool always_execute, bool nonfatal, int timeout, int sequence, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = command;
                _args[3] = always_execute;
                _args[4] = nonfatal;
                _args[5] = timeout;
                _args[6] = sequence;
                System.IAsyncResult _result = base.BeginInvoke("AddCommand", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddCommand(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddCommand", _args, result);
            }
            
            public System.IAsyncResult BeginSwitchHostEnabledForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = host_id;
                System.IAsyncResult _result = base.BeginInvoke("SwitchHostEnabledForLane", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSwitchHostEnabledForLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SwitchHostEnabledForLane", _args, result);
            }
            
            public System.IAsyncResult BeginRemoveHostForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = host_id;
                System.IAsyncResult _result = base.BeginInvoke("RemoveHostForLane", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemoveHostForLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RemoveHostForLane", _args, result);
            }
            
            public System.IAsyncResult BeginAddHostToLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = host_id;
                System.IAsyncResult _result = base.BeginInvoke("AddHostToLane", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddHostToLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddHostToLane", _args, result);
            }
            
            public System.IAsyncResult BeginAddDependencyToLane(MoonlightDrtViewer.MonkeyWrench.AddDependencyToLaneRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("AddDependencyToLane", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.AddDependencyToLaneResponse EndAddDependencyToLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.AddDependencyToLaneResponse _result = ((MoonlightDrtViewer.MonkeyWrench.AddDependencyToLaneResponse)(base.EndInvoke("AddDependencyToLane", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditLaneDependencyFilename(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, string filename, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lanedependency_id;
                _args[2] = filename;
                System.IAsyncResult _result = base.BeginInvoke("EditLaneDependencyFilename", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditLaneDependencyFilename(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditLaneDependencyFilename", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteLaneDependency(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lanedependency_id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteLaneDependency", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteLaneDependency(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteLaneDependency", _args, result);
            }
            
            public System.IAsyncResult BeginEditLaneDependencyDownloads(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, string downloads, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lanedependency_id;
                _args[2] = downloads;
                System.IAsyncResult _result = base.BeginInvoke("EditLaneDependencyDownloads", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditLaneDependencyDownloads(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditLaneDependencyDownloads", _args, result);
            }
            
            public System.IAsyncResult BeginUnlinkDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int directive_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = directive_id;
                System.IAsyncResult _result = base.BeginInvoke("UnlinkDeletionDirective", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUnlinkDeletionDirective(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UnlinkDeletionDirective", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_directive_id, int file_directive_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lane_directive_id;
                _args[2] = file_directive_id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteDeletionDirective", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteDeletionDirective(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteDeletionDirective", _args, result);
            }
            
            public System.IAsyncResult BeginEnableDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_deletion_directive_id, bool enabled, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lane_deletion_directive_id;
                _args[2] = enabled;
                System.IAsyncResult _result = base.BeginInvoke("EnableDeletionDirective", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEnableDeletionDirective(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EnableDeletionDirective", _args, result);
            }
            
            public System.IAsyncResult BeginAddFileDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string filename, string name, MoonlightDrtViewer.MonkeyWrench.DBMatchMode match_mode, int x, MoonlightDrtViewer.MonkeyWrench.DBDeleteCondition condition, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = login;
                _args[1] = filename;
                _args[2] = name;
                _args[3] = match_mode;
                _args[4] = x;
                _args[5] = condition;
                System.IAsyncResult _result = base.BeginInvoke("AddFileDeletionDirective", _args, callback, asyncState);
                return _result;
            }
            
            public int EndAddFileDeletionDirective(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("AddFileDeletionDirective", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddLaneDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int file_deletion_directive_id, int lane_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = file_deletion_directive_id;
                _args[2] = lane_id;
                System.IAsyncResult _result = base.BeginInvoke("AddLaneDeletionDirective", _args, callback, asyncState);
                return _result;
            }
            
            public int EndAddLaneDeletionDirective(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("AddLaneDeletionDirective", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFindLaneDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int file_deletion_directive_id, int lane_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = file_deletion_directive_id;
                _args[2] = lane_id;
                System.IAsyncResult _result = base.BeginInvoke("FindLaneDeletionDirective", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.DBLaneDeletionDirectiveView EndFindLaneDeletionDirective(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.DBLaneDeletionDirectiveView _result = ((MoonlightDrtViewer.MonkeyWrench.DBLaneDeletionDirectiveView)(base.EndInvoke("FindLaneDeletionDirective", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lane_id;
                System.IAsyncResult _result = base.BeginInvoke("GetLane", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetLaneResponse EndGetLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetLaneResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetLaneResponse)(base.EndInvoke("GetLane", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWorkHostHistory(MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetWorkHostHistory", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryResponse1 EndGetWorkHostHistory(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryResponse1 _result = ((MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryResponse1)(base.EndInvoke("GetWorkHostHistory", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetHostForEdit(MoonlightDrtViewer.MonkeyWrench.GetHostForEditRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetHostForEdit", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetHostForEditResponse1 EndGetHostForEdit(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetHostForEditResponse1 _result = ((MoonlightDrtViewer.MonkeyWrench.GetHostForEditResponse1)(base.EndInvoke("GetHostForEdit", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddMasterHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, int masterhost_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = host_id;
                _args[2] = masterhost_id;
                System.IAsyncResult _result = base.BeginInvoke("AddMasterHost", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddMasterHost(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddMasterHost", _args, result);
            }
            
            public System.IAsyncResult BeginRemoveMasterHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, int masterhost_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = host_id;
                _args[2] = masterhost_id;
                System.IAsyncResult _result = base.BeginInvoke("RemoveMasterHost", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemoveMasterHost(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RemoveMasterHost", _args, result);
            }
            
            public System.IAsyncResult BeginGetLaneForEdit(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string lane, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = lane;
                System.IAsyncResult _result = base.BeginInvoke("GetLaneForEdit", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetLaneForEditResponse EndGetLaneForEdit(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetLaneForEditResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetLaneForEditResponse)(base.EndInvoke("GetLaneForEdit", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFindHost(MoonlightDrtViewer.MonkeyWrench.FindHostRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("FindHost", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.FindHostResponse1 EndFindHost(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.FindHostResponse1 _result = ((MoonlightDrtViewer.MonkeyWrench.FindHostResponse1)(base.EndInvoke("FindHost", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFindRevisionForLane(MoonlightDrtViewer.MonkeyWrench.FindRevisionForLaneRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("FindRevisionForLane", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.FindRevisionForLaneResponse EndFindRevisionForLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.FindRevisionForLaneResponse _result = ((MoonlightDrtViewer.MonkeyWrench.FindRevisionForLaneResponse)(base.EndInvoke("FindRevisionForLane", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFindRevision(MoonlightDrtViewer.MonkeyWrench.FindRevisionRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("FindRevision", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse1 EndFindRevision(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse1 _result = ((MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse1)(base.EndInvoke("FindRevision", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFindLane(MoonlightDrtViewer.MonkeyWrench.FindLaneRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("FindLane", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.FindLaneResponse1 EndFindLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.FindLaneResponse1 _result = ((MoonlightDrtViewer.MonkeyWrench.FindLaneResponse1)(base.EndInvoke("FindLane", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBLane lane, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lane;
                System.IAsyncResult _result = base.BeginInvoke("EditLane", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditLane", _args, result);
            }
            
            public System.IAsyncResult BeginEditHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBHost host, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = host;
                System.IAsyncResult _result = base.BeginInvoke("EditHost", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditHost(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditHost", _args, result);
            }
            
            public System.IAsyncResult BeginEditHostWithPassword(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBHost host, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = host;
                _args[2] = password;
                System.IAsyncResult _result = base.BeginInvoke("EditHostWithPassword", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditHostWithPassword(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditHostWithPassword", _args, result);
            }
            
            public System.IAsyncResult BeginGetViewLaneData(MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetViewLaneData", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse1 EndGetViewLaneData(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse1 _result = ((MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse1)(base.EndInvoke("GetViewLaneData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetViewLaneData2(MoonlightDrtViewer.MonkeyWrench.GetViewLaneData2Request request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetViewLaneData2", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetViewLaneData2Response EndGetViewLaneData2(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetViewLaneData2Response _result = ((MoonlightDrtViewer.MonkeyWrench.GetViewLaneData2Response)(base.EndInvoke("GetViewLaneData2", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFrontPageData(MoonlightDrtViewer.MonkeyWrench.GetFrontPageDataRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetFrontPageData", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetFrontPageDataResponse EndGetFrontPageData(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetFrontPageDataResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetFrontPageDataResponse)(base.EndInvoke("GetFrontPageData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFrontPageData2(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int limit, string[] lanes, int[] lane_ids, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = login;
                _args[1] = limit;
                _args[2] = lanes;
                _args[3] = lane_ids;
                System.IAsyncResult _result = base.BeginInvoke("GetFrontPageData2", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.FrontPageResponse EndGetFrontPageData2(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.FrontPageResponse _result = ((MoonlightDrtViewer.MonkeyWrench.FrontPageResponse)(base.EndInvoke("GetFrontPageData2", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLanes(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("GetLanes", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetLanesResponse EndGetLanes(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetLanesResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetLanesResponse)(base.EndInvoke("GetLanes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetHostLanes(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("GetHostLanes", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetHostLanesResponse EndGetHostLanes(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetHostLanesResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetHostLanesResponse)(base.EndInvoke("GetHostLanes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetHosts(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("GetHosts", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetHostsResponse EndGetHosts(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetHostsResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetHostsResponse)(base.EndInvoke("GetHosts", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRevisions(MoonlightDrtViewer.MonkeyWrench.GetRevisionsRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetRevisions", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetRevisionsResponse1 EndGetRevisions(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetRevisionsResponse1 _result = ((MoonlightDrtViewer.MonkeyWrench.GetRevisionsResponse1)(base.EndInvoke("GetRevisions", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCommands(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lane_id;
                System.IAsyncResult _result = base.BeginInvoke("GetCommands", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetCommandsResponse EndGetCommands(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetCommandsResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetCommandsResponse)(base.EndInvoke("GetCommands", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCloneLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string new_name, bool copy_files, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = new_name;
                _args[3] = copy_files;
                System.IAsyncResult _result = base.BeginInvoke("CloneLane", _args, callback, asyncState);
                return _result;
            }
            
            public int EndCloneLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("CloneLane", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lane_id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteLane", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteLane", _args, result);
            }
            
            public System.IAsyncResult BeginAddLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string lane, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lane;
                System.IAsyncResult _result = base.BeginInvoke("AddLane", _args, callback, asyncState);
                return _result;
            }
            
            public int EndAddLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("AddLane", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = host_id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteHost", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteHost(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteHost", _args, result);
            }
            
            public System.IAsyncResult BeginAddHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = host;
                System.IAsyncResult _result = base.BeginInvoke("AddHost", _args, callback, asyncState);
                return _result;
            }
            
            public int EndAddHost(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("AddHost", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginClearRevision(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = host_id;
                _args[3] = revision_id;
                System.IAsyncResult _result = base.BeginInvoke("ClearRevision", _args, callback, asyncState);
                return _result;
            }
            
            public void EndClearRevision(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ClearRevision", _args, result);
            }
            
            public System.IAsyncResult BeginRescheduleRevision(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = host_id;
                _args[3] = revision_id;
                System.IAsyncResult _result = base.BeginInvoke("RescheduleRevision", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRescheduleRevision(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RescheduleRevision", _args, result);
            }
            
            public System.IAsyncResult BeginClearAllWorkForHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = host_id;
                System.IAsyncResult _result = base.BeginInvoke("ClearAllWorkForHost", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndClearAllWorkForHost(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("ClearAllWorkForHost", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginClearAllWorkForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lane_id;
                System.IAsyncResult _result = base.BeginInvoke("ClearAllWorkForLane", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndClearAllWorkForLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("ClearAllWorkForLane", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteAllWorkForHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = host_id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteAllWorkForHost", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndDeleteAllWorkForHost(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("DeleteAllWorkForHost", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteAllWorkForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lane_id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteAllWorkForLane", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndDeleteAllWorkForLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("DeleteAllWorkForLane", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteAllRevisionsForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lane_id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteAllRevisionsForLane", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndDeleteAllRevisionsForLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("DeleteAllRevisionsForLane", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAbortRevision(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = host_id;
                _args[3] = revision_id;
                System.IAsyncResult _result = base.BeginInvoke("AbortRevision", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAbortRevision(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AbortRevision", _args, result);
            }
            
            public System.IAsyncResult BeginClearWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = work_id;
                System.IAsyncResult _result = base.BeginInvoke("ClearWork", _args, callback, asyncState);
                return _result;
            }
            
            public void EndClearWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ClearWork", _args, result);
            }
            
            public System.IAsyncResult BeginAbortWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = work_id;
                System.IAsyncResult _result = base.BeginInvoke("AbortWork", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAbortWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AbortWork", _args, result);
            }
            
            public System.IAsyncResult BeginPauseWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = work_id;
                System.IAsyncResult _result = base.BeginInvoke("PauseWork", _args, callback, asyncState);
                return _result;
            }
            
            public void EndPauseWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("PauseWork", _args, result);
            }
            
            public System.IAsyncResult BeginResumeWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = work_id;
                System.IAsyncResult _result = base.BeginInvoke("ResumeWork", _args, callback, asyncState);
                return _result;
            }
            
            public void EndResumeWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ResumeWork", _args, result);
            }
            
            public System.IAsyncResult BeginGetViewTableData(MoonlightDrtViewer.MonkeyWrench.GetViewTableDataRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetViewTableData", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetViewTableDataResponse1 EndGetViewTableData(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetViewTableDataResponse1 _result = ((MoonlightDrtViewer.MonkeyWrench.GetViewTableDataResponse1)(base.EndInvoke("GetViewTableData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetViewWorkTableData(MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetViewWorkTableData", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse1 EndGetViewWorkTableData(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse1 _result = ((MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse1)(base.EndInvoke("GetViewWorkTableData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetViewWorkTableData2(MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableData2Request request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetViewWorkTableData2", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableData2Response EndGetViewWorkTableData2(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableData2Response _result = ((MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableData2Response)(base.EndInvoke("GetViewWorkTableData2", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLaneFileForEdit(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanefile_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lanefile_id;
                System.IAsyncResult _result = base.BeginInvoke("GetLaneFileForEdit", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetLaneFileForEditResponse EndGetLaneFileForEdit(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetLaneFileForEditResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetLaneFileForEditResponse)(base.EndInvoke("GetLaneFileForEdit", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditLaneFile(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBLanefile lanefile, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lanefile;
                System.IAsyncResult _result = base.BeginInvoke("EditLaneFile", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditLaneFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditLaneFile", _args, result);
            }
            
            public System.IAsyncResult BeginGetViewLaneFileHistoryData(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanefile_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lanefile_id;
                System.IAsyncResult _result = base.BeginInvoke("GetViewLaneFileHistoryData", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetViewLaneFileHistoryDataResponse EndGetViewLaneFileHistoryData(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetViewLaneFileHistoryDataResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetViewLaneFileHistoryDataResponse)(base.EndInvoke("GetViewLaneFileHistoryData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUsers(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("GetUsers", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetUsersResponse EndGetUsers(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetUsersResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetUsersResponse)(base.EndInvoke("GetUsers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteUser(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteUser", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndDeleteUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("DeleteUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddUserEmail(MoonlightDrtViewer.MonkeyWrench.AddUserEmailRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("AddUserEmail", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.AddUserEmailResponse EndAddUserEmail(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.AddUserEmailResponse _result = ((MoonlightDrtViewer.MonkeyWrench.AddUserEmailResponse)(base.EndInvoke("AddUserEmail", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveUserEmail(MoonlightDrtViewer.MonkeyWrench.RemoveUserEmailRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("RemoveUserEmail", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.RemoveUserEmailResponse EndRemoveUserEmail(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.RemoveUserEmailResponse _result = ((MoonlightDrtViewer.MonkeyWrench.RemoveUserEmailResponse)(base.EndInvoke("RemoveUserEmail", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditUser(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBPerson user, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = user;
                System.IAsyncResult _result = base.BeginInvoke("EditUser", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndEditUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("EditUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUser(MoonlightDrtViewer.MonkeyWrench.GetUserRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetUser", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetUserResponse1 EndGetUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetUserResponse1 _result = ((MoonlightDrtViewer.MonkeyWrench.GetUserResponse1)(base.EndInvoke("GetUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUploadPort(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetUploadPort", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetUploadPort(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetUploadPort", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddEnvironmentVariable(MoonlightDrtViewer.MonkeyWrench.AddEnvironmentVariableRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("AddEnvironmentVariable", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.AddEnvironmentVariableResponse EndAddEnvironmentVariable(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.AddEnvironmentVariableResponse _result = ((MoonlightDrtViewer.MonkeyWrench.AddEnvironmentVariableResponse)(base.EndInvoke("AddEnvironmentVariable", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditEnvironmentVariable(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBEnvironmentVariable variable, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = variable;
                System.IAsyncResult _result = base.BeginInvoke("EditEnvironmentVariable", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditEnvironmentVariable(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditEnvironmentVariable", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteEnvironmentVariable(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int variable_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = variable_id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteEnvironmentVariable", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteEnvironmentVariable(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteEnvironmentVariable", _args, result);
            }
            
            public System.IAsyncResult BeginUploadCompressedFile(MoonlightDrtViewer.MonkeyWrench.UploadCompressedFileRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("UploadCompressedFile", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.UploadCompressedFileResponse EndUploadCompressedFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.UploadCompressedFileResponse _result = ((MoonlightDrtViewer.MonkeyWrench.UploadCompressedFileResponse)(base.EndInvoke("UploadCompressedFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUploadFile(MoonlightDrtViewer.MonkeyWrench.UploadFileRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("UploadFile", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.UploadFileResponse EndUploadFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.UploadFileResponse _result = ((MoonlightDrtViewer.MonkeyWrench.UploadFileResponse)(base.EndInvoke("UploadFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWorkState(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = work;
                System.IAsyncResult _result = base.BeginInvoke("GetWorkState", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.DBState EndGetWorkState(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.DBState _result = ((MoonlightDrtViewer.MonkeyWrench.DBState)(base.EndInvoke("GetWorkState", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFilesForWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int revisionwork_id, int command_id, string filename, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = login;
                _args[1] = revisionwork_id;
                _args[2] = command_id;
                _args[3] = filename;
                System.IAsyncResult _result = base.BeginInvoke("GetFilesForWork", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetFilesForWorkResponse EndGetFilesForWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetFilesForWorkResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetFilesForWorkResponse)(base.EndInvoke("GetFilesForWork", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginReportBuildState(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = work;
                System.IAsyncResult _result = base.BeginInvoke("ReportBuildState", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.ReportBuildStateResponse EndReportBuildState(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.ReportBuildStateResponse _result = ((MoonlightDrtViewer.MonkeyWrench.ReportBuildStateResponse)(base.EndInvoke("ReportBuildState", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRevisionWorkForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int revision_id, int host_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = revision_id;
                _args[3] = host_id;
                System.IAsyncResult _result = base.BeginInvoke("GetRevisionWorkForLane", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetRevisionWorkForLaneResponse EndGetRevisionWorkForLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetRevisionWorkForLaneResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetRevisionWorkForLaneResponse)(base.EndInvoke("GetRevisionWorkForLane", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginReportBuildBotStatus(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.BuildBotStatus status, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = status;
                System.IAsyncResult _result = base.BeginInvoke("ReportBuildBotStatus", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.ReportBuildBotStatusResponse EndReportBuildBotStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.ReportBuildBotStatusResponse _result = ((MoonlightDrtViewer.MonkeyWrench.ReportBuildBotStatusResponse)(base.EndInvoke("ReportBuildBotStatus", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetBuildBotStatus(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("GetBuildBotStatus", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetBuildBotStatusResponse EndGetBuildBotStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetBuildBotStatusResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetBuildBotStatusResponse)(base.EndInvoke("GetBuildBotStatus", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetBuildInfo(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = host;
                System.IAsyncResult _result = base.BeginInvoke("GetBuildInfo", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse EndGetBuildInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse)(base.EndInvoke("GetBuildInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetBuildInfoMultiple(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, bool multiple_work, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = host;
                _args[2] = multiple_work;
                System.IAsyncResult _result = base.BeginInvoke("GetBuildInfoMultiple", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse EndGetBuildInfoMultiple(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse)(base.EndInvoke("GetBuildInfoMultiple", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFindLatestWorkFileId(MoonlightDrtViewer.MonkeyWrench.FindLatestWorkFileIdRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("FindLatestWorkFileId", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.FindLatestWorkFileIdResponse EndFindLatestWorkFileId(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.FindLatestWorkFileIdResponse _result = ((MoonlightDrtViewer.MonkeyWrench.FindLatestWorkFileIdResponse)(base.EndInvoke("FindLatestWorkFileId", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTestResults(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string[] revisions, string filename, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = revisions;
                _args[2] = filename;
                System.IAsyncResult _result = base.BeginInvoke("GetTestResults", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetTestResultsResponse EndGetTestResults(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetTestResultsResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetTestResultsResponse)(base.EndInvoke("GetTestResults", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditIdentity(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBIrcIdentity irc_identity, MoonlightDrtViewer.MonkeyWrench.DBEmailIdentity email_identity, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = irc_identity;
                _args[2] = email_identity;
                System.IAsyncResult _result = base.BeginInvoke("EditIdentity", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndEditIdentity(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("EditIdentity", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveIdentity(MoonlightDrtViewer.MonkeyWrench.RemoveIdentityRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("RemoveIdentity", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.RemoveIdentityResponse EndRemoveIdentity(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.RemoveIdentityResponse _result = ((MoonlightDrtViewer.MonkeyWrench.RemoveIdentityResponse)(base.EndInvoke("RemoveIdentity", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetIdentities(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("GetIdentities", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetIdentitiesResponse EndGetIdentities(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetIdentitiesResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetIdentitiesResponse)(base.EndInvoke("GetIdentities", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBNotification notification, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = notification;
                System.IAsyncResult _result = base.BeginInvoke("EditNotification", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndEditNotification(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("EditNotification", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = id;
                System.IAsyncResult _result = base.BeginInvoke("RemoveNotification", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndRemoveNotification(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("RemoveNotification", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNotifications(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("GetNotifications", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetNotificationsResponse EndGetNotifications(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetNotificationsResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetNotificationsResponse)(base.EndInvoke("GetNotifications", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddLaneNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int notification_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = notification_id;
                System.IAsyncResult _result = base.BeginInvoke("AddLaneNotification", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndAddLaneNotification(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("AddLaneNotification", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveLaneNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = id;
                System.IAsyncResult _result = base.BeginInvoke("RemoveLaneNotification", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndRemoveLaneNotification(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("RemoveLaneNotification", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddRelease(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBRelease release, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = release;
                System.IAsyncResult _result = base.BeginInvoke("AddRelease", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndAddRelease(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("AddRelease", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetReleases(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("GetReleases", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetReleasesResponse EndGetReleases(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetReleasesResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetReleasesResponse)(base.EndInvoke("GetReleases", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteRelease(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteRelease", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndDeleteRelease(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("DeleteRelease", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginExecuteScheduler(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, bool forcefullupdate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = forcefullupdate;
                System.IAsyncResult _result = base.BeginInvoke("ExecuteScheduler", _args, callback, asyncState);
                return _result;
            }
            
            public void EndExecuteScheduler(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ExecuteScheduler", _args, result);
            }
            
            public System.IAsyncResult BeginExecuteDeletionDirectives(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("ExecuteDeletionDirectives", _args, callback, asyncState);
                return _result;
            }
            
            public void EndExecuteDeletionDirectives(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ExecuteDeletionDirectives", _args, result);
            }
            
            public System.IAsyncResult BeginGetAdminInfo(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("GetAdminInfo", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetAdminInfoResponse EndGetAdminInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetAdminInfoResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetAdminInfoResponse)(base.EndInvoke("GetAdminInfo", _args, result)));
                return _result;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://monkeywrench.novell.com/", ConfigurationName="MonkeyWrench.WebServicesSoap12")]
    public interface WebServicesSoap12 {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetRoles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetRoles(string user, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetRoles(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/Login", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginLogin(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.LoginResponse EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/Logout", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginLogout(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        void EndLogout(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/CreateLanefile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginCreateLanefile(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string filename, System.AsyncCallback callback, object asyncState);
        
        void EndCreateLanefile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AttachFileToLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAttachFileToLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int lanefile_id, System.AsyncCallback callback, object asyncState);
        
        void EndAttachFileToLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeattachFileFromLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeattachFileFromLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int lanefile_id, System.AsyncCallback callback, object asyncState);
        
        void EndDeattachFileFromLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditCommandFilename", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditCommandFilename(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string filename, System.AsyncCallback callback, object asyncState);
        
        void EndEditCommandFilename(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditCommandSequence", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditCommandSequence(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, int sequence, System.AsyncCallback callback, object asyncState);
        
        void EndEditCommandSequence(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditCommandArguments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditCommandArguments(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string arguments, System.AsyncCallback callback, object asyncState);
        
        void EndEditCommandArguments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditCommandTimeout", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditCommandTimeout(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, int timeout, System.AsyncCallback callback, object asyncState);
        
        void EndEditCommandTimeout(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditCommandWorkingDirectory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditCommandWorkingDirectory(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string working_directory, System.AsyncCallback callback, object asyncState);
        
        void EndEditCommandWorkingDirectory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditCommandUploadFiles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditCommandUploadFiles(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string upload_files, System.AsyncCallback callback, object asyncState);
        
        void EndEditCommandUploadFiles(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/SwitchCommandNonFatal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginSwitchCommandNonFatal(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState);
        
        void EndSwitchCommandNonFatal(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/SwitchCommandAlwaysExecute", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginSwitchCommandAlwaysExecute(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState);
        
        void EndSwitchCommandAlwaysExecute(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/SwitchCommandInternal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginSwitchCommandInternal(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState);
        
        void EndSwitchCommandInternal(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeleteCommand", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeleteCommand(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteCommand(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddCommand", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddCommand(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string command, bool always_execute, bool nonfatal, int timeout, int sequence, System.AsyncCallback callback, object asyncState);
        
        void EndAddCommand(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/SwitchHostEnabledForLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginSwitchHostEnabledForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, System.AsyncCallback callback, object asyncState);
        
        void EndSwitchHostEnabledForLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/RemoveHostForLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginRemoveHostForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveHostForLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddHostToLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddHostToLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, System.AsyncCallback callback, object asyncState);
        
        void EndAddHostToLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddDependencyToLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddDependencyToLane(MoonlightDrtViewer.MonkeyWrench.AddDependencyToLaneRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.AddDependencyToLaneResponse EndAddDependencyToLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditLaneDependencyFilename", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditLaneDependencyFilename(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, string filename, System.AsyncCallback callback, object asyncState);
        
        void EndEditLaneDependencyFilename(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeleteLaneDependency", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeleteLaneDependency(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteLaneDependency(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditLaneDependencyDownloads", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditLaneDependencyDownloads(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, string downloads, System.AsyncCallback callback, object asyncState);
        
        void EndEditLaneDependencyDownloads(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/UnlinkDeletionDirective", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginUnlinkDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int directive_id, System.AsyncCallback callback, object asyncState);
        
        void EndUnlinkDeletionDirective(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeleteDeletionDirective", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeleteDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_directive_id, int file_directive_id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteDeletionDirective(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EnableDeletionDirective", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEnableDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_deletion_directive_id, bool enabled, System.AsyncCallback callback, object asyncState);
        
        void EndEnableDeletionDirective(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddFileDeletionDirective", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddFileDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string filename, string name, MoonlightDrtViewer.MonkeyWrench.DBMatchMode match_mode, int x, MoonlightDrtViewer.MonkeyWrench.DBDeleteCondition condition, System.AsyncCallback callback, object asyncState);
        
        int EndAddFileDeletionDirective(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddLaneDeletionDirective", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddLaneDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int file_deletion_directive_id, int lane_id, System.AsyncCallback callback, object asyncState);
        
        int EndAddLaneDeletionDirective(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/FindLaneDeletionDirective", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginFindLaneDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int file_deletion_directive_id, int lane_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.DBLaneDeletionDirectiveView EndFindLaneDeletionDirective(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetLaneResponse EndGetLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetWorkHostHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetWorkHostHistory(MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryResponse1 EndGetWorkHostHistory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetHostForEdit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetHostForEdit(MoonlightDrtViewer.MonkeyWrench.GetHostForEditRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetHostForEditResponse1 EndGetHostForEdit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddMasterHost", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddMasterHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, int masterhost_id, System.AsyncCallback callback, object asyncState);
        
        void EndAddMasterHost(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/RemoveMasterHost", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginRemoveMasterHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, int masterhost_id, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveMasterHost(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetLaneForEdit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetLaneForEdit(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string lane, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetLaneForEditResponse EndGetLaneForEdit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/FindHost", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginFindHost(MoonlightDrtViewer.MonkeyWrench.FindHostRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.FindHostResponse1 EndFindHost(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/FindRevisionForLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginFindRevisionForLane(MoonlightDrtViewer.MonkeyWrench.FindRevisionForLaneRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.FindRevisionForLaneResponse EndFindRevisionForLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/FindRevision", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginFindRevision(MoonlightDrtViewer.MonkeyWrench.FindRevisionRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse1 EndFindRevision(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/FindLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginFindLane(MoonlightDrtViewer.MonkeyWrench.FindLaneRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.FindLaneResponse1 EndFindLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBLane lane, System.AsyncCallback callback, object asyncState);
        
        void EndEditLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditHost", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBHost host, System.AsyncCallback callback, object asyncState);
        
        void EndEditHost(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditHostWithPassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditHostWithPassword(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBHost host, string password, System.AsyncCallback callback, object asyncState);
        
        void EndEditHostWithPassword(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetViewLaneData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetViewLaneData(MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse1 EndGetViewLaneData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetViewLaneData2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetViewLaneData2(MoonlightDrtViewer.MonkeyWrench.GetViewLaneData2Request request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetViewLaneData2Response EndGetViewLaneData2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetFrontPageData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetFrontPageData(MoonlightDrtViewer.MonkeyWrench.GetFrontPageDataRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetFrontPageDataResponse EndGetFrontPageData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetFrontPageData2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetFrontPageData2(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int limit, string[] lanes, int[] lane_ids, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.FrontPageResponse EndGetFrontPageData2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetLanes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetLanes(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetLanesResponse EndGetLanes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetHostLanes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetHostLanes(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetHostLanesResponse EndGetHostLanes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetHosts", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetHosts(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetHostsResponse EndGetHosts(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetRevisions", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetRevisions(MoonlightDrtViewer.MonkeyWrench.GetRevisionsRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetRevisionsResponse1 EndGetRevisions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetCommands", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetCommands(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetCommandsResponse EndGetCommands(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/CloneLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginCloneLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string new_name, bool copy_files, System.AsyncCallback callback, object asyncState);
        
        int EndCloneLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeleteLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeleteLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string lane, System.AsyncCallback callback, object asyncState);
        
        int EndAddLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeleteHost", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeleteHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteHost(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddHost", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, System.AsyncCallback callback, object asyncState);
        
        int EndAddHost(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/ClearRevision", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginClearRevision(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, System.AsyncCallback callback, object asyncState);
        
        void EndClearRevision(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/RescheduleRevision", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginRescheduleRevision(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, System.AsyncCallback callback, object asyncState);
        
        void EndRescheduleRevision(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/ClearAllWorkForHost", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginClearAllWorkForHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndClearAllWorkForHost(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/ClearAllWorkForLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginClearAllWorkForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndClearAllWorkForLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeleteAllWorkForHost", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeleteAllWorkForHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndDeleteAllWorkForHost(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeleteAllWorkForLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeleteAllWorkForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndDeleteAllWorkForLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeleteAllRevisionsForLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeleteAllRevisionsForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndDeleteAllRevisionsForLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AbortRevision", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAbortRevision(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, System.AsyncCallback callback, object asyncState);
        
        void EndAbortRevision(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/ClearWork", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginClearWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState);
        
        void EndClearWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AbortWork", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAbortWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState);
        
        void EndAbortWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/PauseWork", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginPauseWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState);
        
        void EndPauseWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/ResumeWork", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginResumeWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState);
        
        void EndResumeWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetViewTableData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetViewTableData(MoonlightDrtViewer.MonkeyWrench.GetViewTableDataRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetViewTableDataResponse1 EndGetViewTableData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetViewWorkTableData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetViewWorkTableData(MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse1 EndGetViewWorkTableData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetViewWorkTableData2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetViewWorkTableData2(MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableData2Request request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableData2Response EndGetViewWorkTableData2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetLaneFileForEdit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetLaneFileForEdit(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanefile_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetLaneFileForEditResponse EndGetLaneFileForEdit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditLaneFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditLaneFile(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBLanefile lanefile, System.AsyncCallback callback, object asyncState);
        
        void EndEditLaneFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetViewLaneFileHistoryData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetViewLaneFileHistoryData(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanefile_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetViewLaneFileHistoryDataResponse EndGetViewLaneFileHistoryData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetUsers(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetUsersResponse EndGetUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeleteUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeleteUser(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndDeleteUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddUserEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddUserEmail(MoonlightDrtViewer.MonkeyWrench.AddUserEmailRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.AddUserEmailResponse EndAddUserEmail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/RemoveUserEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginRemoveUserEmail(MoonlightDrtViewer.MonkeyWrench.RemoveUserEmailRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.RemoveUserEmailResponse EndRemoveUserEmail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditUser(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBPerson user, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndEditUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetUser(MoonlightDrtViewer.MonkeyWrench.GetUserRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetUserResponse1 EndGetUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetUploadPort", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetUploadPort(System.AsyncCallback callback, object asyncState);
        
        int EndGetUploadPort(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddEnvironmentVariable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddEnvironmentVariable(MoonlightDrtViewer.MonkeyWrench.AddEnvironmentVariableRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.AddEnvironmentVariableResponse EndAddEnvironmentVariable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditEnvironmentVariable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditEnvironmentVariable(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBEnvironmentVariable variable, System.AsyncCallback callback, object asyncState);
        
        void EndEditEnvironmentVariable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeleteEnvironmentVariable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeleteEnvironmentVariable(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int variable_id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteEnvironmentVariable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/UploadCompressedFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginUploadCompressedFile(MoonlightDrtViewer.MonkeyWrench.UploadCompressedFileRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.UploadCompressedFileResponse EndUploadCompressedFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/UploadFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginUploadFile(MoonlightDrtViewer.MonkeyWrench.UploadFileRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.UploadFileResponse EndUploadFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetWorkState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetWorkState(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.DBState EndGetWorkState(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetFilesForWork", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetFilesForWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int revisionwork_id, int command_id, string filename, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetFilesForWorkResponse EndGetFilesForWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/ReportBuildState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginReportBuildState(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.ReportBuildStateResponse EndReportBuildState(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetRevisionWorkForLane", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetRevisionWorkForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int revision_id, int host_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetRevisionWorkForLaneResponse EndGetRevisionWorkForLane(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/ReportBuildBotStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginReportBuildBotStatus(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.BuildBotStatus status, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.ReportBuildBotStatusResponse EndReportBuildBotStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetBuildBotStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetBuildBotStatus(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetBuildBotStatusResponse EndGetBuildBotStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetBuildInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetBuildInfo(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse EndGetBuildInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetBuildInfoMultiple", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetBuildInfoMultiple(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, bool multiple_work, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse EndGetBuildInfoMultiple(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/FindLatestWorkFileId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginFindLatestWorkFileId(MoonlightDrtViewer.MonkeyWrench.FindLatestWorkFileIdRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.FindLatestWorkFileIdResponse EndFindLatestWorkFileId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetTestResults", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetTestResults(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string[] revisions, string filename, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetTestResultsResponse EndGetTestResults(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditIdentity", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditIdentity(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBIrcIdentity irc_identity, MoonlightDrtViewer.MonkeyWrench.DBEmailIdentity email_identity, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndEditIdentity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/RemoveIdentity", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginRemoveIdentity(MoonlightDrtViewer.MonkeyWrench.RemoveIdentityRequest request, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.RemoveIdentityResponse EndRemoveIdentity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetIdentities", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetIdentities(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetIdentitiesResponse EndGetIdentities(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/EditNotification", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginEditNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBNotification notification, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndEditNotification(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/RemoveNotification", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginRemoveNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndRemoveNotification(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetNotifications", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetNotifications(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetNotificationsResponse EndGetNotifications(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddLaneNotification", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddLaneNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int notification_id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndAddLaneNotification(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/RemoveLaneNotification", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginRemoveLaneNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndRemoveLaneNotification(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/AddRelease", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginAddRelease(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBRelease release, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndAddRelease(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetReleases", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetReleases(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetReleasesResponse EndGetReleases(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/DeleteRelease", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginDeleteRelease(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndDeleteRelease(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/ExecuteScheduler", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginExecuteScheduler(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, bool forcefullupdate, System.AsyncCallback callback, object asyncState);
        
        void EndExecuteScheduler(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/ExecuteDeletionDirectives", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginExecuteDeletionDirectives(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        void EndExecuteDeletionDirectives(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://monkeywrench.novell.com/GetAdminInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DBRecord))]
        System.IAsyncResult BeginGetAdminInfo(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState);
        
        MoonlightDrtViewer.MonkeyWrench.GetAdminInfoResponse EndGetAdminInfo(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WebServicesSoap12Channel : MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRolesCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRolesCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.LoginResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.LoginResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddFileDeletionDirectiveCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddFileDeletionDirectiveCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddLaneDeletionDirectiveCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddLaneDeletionDirectiveCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindLaneDeletionDirectiveCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindLaneDeletionDirectiveCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.DBLaneDeletionDirectiveView Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.DBLaneDeletionDirectiveView)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLaneCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLaneCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetLaneResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetLaneResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWorkHostHistoryCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWorkHostHistoryCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHostForEditCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHostForEditCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetHostForEditResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetHostForEditResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLaneForEditCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLaneForEditCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetLaneForEditResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetLaneForEditResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindHostCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindHostCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.FindHostResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.FindHostResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindRevisionForLaneCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindRevisionForLaneCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindRevisionCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindRevisionCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindLaneCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindLaneCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.FindLaneResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.FindLaneResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetViewLaneDataCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetViewLaneDataCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetViewLaneData2CompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetViewLaneData2CompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFrontPageDataCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFrontPageDataCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.FrontPageResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.FrontPageResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFrontPageData2CompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFrontPageData2CompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.FrontPageResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.FrontPageResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLanesCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLanesCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetLanesResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetLanesResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHostLanesCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHostLanesCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetHostLanesResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetHostLanesResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHostsCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHostsCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetHostsResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetHostsResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRevisionsCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRevisionsCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetRevisionsResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetRevisionsResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCommandsCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCommandsCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetCommandsResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetCommandsResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CloneLaneCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CloneLaneCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddLaneCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddLaneCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddHostCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddHostCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClearAllWorkForHostCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ClearAllWorkForHostCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClearAllWorkForLaneCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ClearAllWorkForLaneCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteAllWorkForHostCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteAllWorkForHostCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteAllWorkForLaneCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteAllWorkForLaneCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteAllRevisionsForLaneCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteAllRevisionsForLaneCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetViewTableDataCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetViewTableDataCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetViewTableDataResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetViewTableDataResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetViewWorkTableDataCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetViewWorkTableDataCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetViewWorkTableData2CompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetViewWorkTableData2CompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLaneFileForEditCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLaneFileForEditCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetLaneFileForEditResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetLaneFileForEditResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetViewLaneFileHistoryDataCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetViewLaneFileHistoryDataCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetViewLaneFileHistoryDataResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetViewLaneFileHistoryDataResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUsersCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUsersCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetUsersResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetUsersResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteUserCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteUserCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddUserEmailCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddUserEmailCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveUserEmailCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveUserEmailCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditUserCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditUserCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetUserResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetUserResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUploadPortCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUploadPortCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddEnvironmentVariableCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddEnvironmentVariableCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWorkStateCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWorkStateCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.DBState Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.DBState)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFilesForWorkCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFilesForWorkCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetFilesForWorkResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetFilesForWorkResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReportBuildStateCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReportBuildStateCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.ReportBuildStateResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.ReportBuildStateResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRevisionWorkForLaneCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRevisionWorkForLaneCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetRevisionWorkForLaneResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetRevisionWorkForLaneResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReportBuildBotStatusCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReportBuildBotStatusCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.ReportBuildBotStatusResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.ReportBuildBotStatusResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBuildBotStatusCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBuildBotStatusCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetBuildBotStatusResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetBuildBotStatusResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBuildInfoCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBuildInfoCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBuildInfoMultipleCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBuildInfoMultipleCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindLatestWorkFileIdCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindLatestWorkFileIdCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Nullable<int> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Nullable<int>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTestResultsCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTestResultsCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetTestResultsResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetTestResultsResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditIdentityCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditIdentityCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveIdentityCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveIdentityCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetIdentitiesCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetIdentitiesCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetIdentitiesResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetIdentitiesResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditNotificationCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditNotificationCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveNotificationCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveNotificationCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNotificationsCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNotificationsCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetNotificationsResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetNotificationsResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddLaneNotificationCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddLaneNotificationCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveLaneNotificationCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveLaneNotificationCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddReleaseCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddReleaseCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetReleasesCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetReleasesCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetReleasesResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetReleasesResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteReleaseCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteReleaseCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAdminInfoCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAdminInfoCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MoonlightDrtViewer.MonkeyWrench.GetAdminInfoResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MoonlightDrtViewer.MonkeyWrench.GetAdminInfoResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebServicesSoap12Client : System.ServiceModel.ClientBase<MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12>, MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12 {
        
        private BeginOperationDelegate onBeginGetRolesDelegate;
        
        private EndOperationDelegate onEndGetRolesDelegate;
        
        private System.Threading.SendOrPostCallback onGetRolesCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogoutDelegate;
        
        private EndOperationDelegate onEndLogoutDelegate;
        
        private System.Threading.SendOrPostCallback onLogoutCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateLanefileDelegate;
        
        private EndOperationDelegate onEndCreateLanefileDelegate;
        
        private System.Threading.SendOrPostCallback onCreateLanefileCompletedDelegate;
        
        private BeginOperationDelegate onBeginAttachFileToLaneDelegate;
        
        private EndOperationDelegate onEndAttachFileToLaneDelegate;
        
        private System.Threading.SendOrPostCallback onAttachFileToLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeattachFileFromLaneDelegate;
        
        private EndOperationDelegate onEndDeattachFileFromLaneDelegate;
        
        private System.Threading.SendOrPostCallback onDeattachFileFromLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditCommandFilenameDelegate;
        
        private EndOperationDelegate onEndEditCommandFilenameDelegate;
        
        private System.Threading.SendOrPostCallback onEditCommandFilenameCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditCommandSequenceDelegate;
        
        private EndOperationDelegate onEndEditCommandSequenceDelegate;
        
        private System.Threading.SendOrPostCallback onEditCommandSequenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditCommandArgumentsDelegate;
        
        private EndOperationDelegate onEndEditCommandArgumentsDelegate;
        
        private System.Threading.SendOrPostCallback onEditCommandArgumentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditCommandTimeoutDelegate;
        
        private EndOperationDelegate onEndEditCommandTimeoutDelegate;
        
        private System.Threading.SendOrPostCallback onEditCommandTimeoutCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditCommandWorkingDirectoryDelegate;
        
        private EndOperationDelegate onEndEditCommandWorkingDirectoryDelegate;
        
        private System.Threading.SendOrPostCallback onEditCommandWorkingDirectoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditCommandUploadFilesDelegate;
        
        private EndOperationDelegate onEndEditCommandUploadFilesDelegate;
        
        private System.Threading.SendOrPostCallback onEditCommandUploadFilesCompletedDelegate;
        
        private BeginOperationDelegate onBeginSwitchCommandNonFatalDelegate;
        
        private EndOperationDelegate onEndSwitchCommandNonFatalDelegate;
        
        private System.Threading.SendOrPostCallback onSwitchCommandNonFatalCompletedDelegate;
        
        private BeginOperationDelegate onBeginSwitchCommandAlwaysExecuteDelegate;
        
        private EndOperationDelegate onEndSwitchCommandAlwaysExecuteDelegate;
        
        private System.Threading.SendOrPostCallback onSwitchCommandAlwaysExecuteCompletedDelegate;
        
        private BeginOperationDelegate onBeginSwitchCommandInternalDelegate;
        
        private EndOperationDelegate onEndSwitchCommandInternalDelegate;
        
        private System.Threading.SendOrPostCallback onSwitchCommandInternalCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteCommandDelegate;
        
        private EndOperationDelegate onEndDeleteCommandDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteCommandCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddCommandDelegate;
        
        private EndOperationDelegate onEndAddCommandDelegate;
        
        private System.Threading.SendOrPostCallback onAddCommandCompletedDelegate;
        
        private BeginOperationDelegate onBeginSwitchHostEnabledForLaneDelegate;
        
        private EndOperationDelegate onEndSwitchHostEnabledForLaneDelegate;
        
        private System.Threading.SendOrPostCallback onSwitchHostEnabledForLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveHostForLaneDelegate;
        
        private EndOperationDelegate onEndRemoveHostForLaneDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveHostForLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddHostToLaneDelegate;
        
        private EndOperationDelegate onEndAddHostToLaneDelegate;
        
        private System.Threading.SendOrPostCallback onAddHostToLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddDependencyToLaneDelegate;
        
        private EndOperationDelegate onEndAddDependencyToLaneDelegate;
        
        private System.Threading.SendOrPostCallback onAddDependencyToLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditLaneDependencyFilenameDelegate;
        
        private EndOperationDelegate onEndEditLaneDependencyFilenameDelegate;
        
        private System.Threading.SendOrPostCallback onEditLaneDependencyFilenameCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteLaneDependencyDelegate;
        
        private EndOperationDelegate onEndDeleteLaneDependencyDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteLaneDependencyCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditLaneDependencyDownloadsDelegate;
        
        private EndOperationDelegate onEndEditLaneDependencyDownloadsDelegate;
        
        private System.Threading.SendOrPostCallback onEditLaneDependencyDownloadsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUnlinkDeletionDirectiveDelegate;
        
        private EndOperationDelegate onEndUnlinkDeletionDirectiveDelegate;
        
        private System.Threading.SendOrPostCallback onUnlinkDeletionDirectiveCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteDeletionDirectiveDelegate;
        
        private EndOperationDelegate onEndDeleteDeletionDirectiveDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteDeletionDirectiveCompletedDelegate;
        
        private BeginOperationDelegate onBeginEnableDeletionDirectiveDelegate;
        
        private EndOperationDelegate onEndEnableDeletionDirectiveDelegate;
        
        private System.Threading.SendOrPostCallback onEnableDeletionDirectiveCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddFileDeletionDirectiveDelegate;
        
        private EndOperationDelegate onEndAddFileDeletionDirectiveDelegate;
        
        private System.Threading.SendOrPostCallback onAddFileDeletionDirectiveCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddLaneDeletionDirectiveDelegate;
        
        private EndOperationDelegate onEndAddLaneDeletionDirectiveDelegate;
        
        private System.Threading.SendOrPostCallback onAddLaneDeletionDirectiveCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindLaneDeletionDirectiveDelegate;
        
        private EndOperationDelegate onEndFindLaneDeletionDirectiveDelegate;
        
        private System.Threading.SendOrPostCallback onFindLaneDeletionDirectiveCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLaneDelegate;
        
        private EndOperationDelegate onEndGetLaneDelegate;
        
        private System.Threading.SendOrPostCallback onGetLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWorkHostHistoryDelegate;
        
        private EndOperationDelegate onEndGetWorkHostHistoryDelegate;
        
        private System.Threading.SendOrPostCallback onGetWorkHostHistoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHostForEditDelegate;
        
        private EndOperationDelegate onEndGetHostForEditDelegate;
        
        private System.Threading.SendOrPostCallback onGetHostForEditCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddMasterHostDelegate;
        
        private EndOperationDelegate onEndAddMasterHostDelegate;
        
        private System.Threading.SendOrPostCallback onAddMasterHostCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveMasterHostDelegate;
        
        private EndOperationDelegate onEndRemoveMasterHostDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveMasterHostCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLaneForEditDelegate;
        
        private EndOperationDelegate onEndGetLaneForEditDelegate;
        
        private System.Threading.SendOrPostCallback onGetLaneForEditCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindHostDelegate;
        
        private EndOperationDelegate onEndFindHostDelegate;
        
        private System.Threading.SendOrPostCallback onFindHostCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindRevisionForLaneDelegate;
        
        private EndOperationDelegate onEndFindRevisionForLaneDelegate;
        
        private System.Threading.SendOrPostCallback onFindRevisionForLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindRevisionDelegate;
        
        private EndOperationDelegate onEndFindRevisionDelegate;
        
        private System.Threading.SendOrPostCallback onFindRevisionCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindLaneDelegate;
        
        private EndOperationDelegate onEndFindLaneDelegate;
        
        private System.Threading.SendOrPostCallback onFindLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditLaneDelegate;
        
        private EndOperationDelegate onEndEditLaneDelegate;
        
        private System.Threading.SendOrPostCallback onEditLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditHostDelegate;
        
        private EndOperationDelegate onEndEditHostDelegate;
        
        private System.Threading.SendOrPostCallback onEditHostCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditHostWithPasswordDelegate;
        
        private EndOperationDelegate onEndEditHostWithPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onEditHostWithPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetViewLaneDataDelegate;
        
        private EndOperationDelegate onEndGetViewLaneDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetViewLaneDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetViewLaneData2Delegate;
        
        private EndOperationDelegate onEndGetViewLaneData2Delegate;
        
        private System.Threading.SendOrPostCallback onGetViewLaneData2CompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFrontPageDataDelegate;
        
        private EndOperationDelegate onEndGetFrontPageDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetFrontPageDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFrontPageData2Delegate;
        
        private EndOperationDelegate onEndGetFrontPageData2Delegate;
        
        private System.Threading.SendOrPostCallback onGetFrontPageData2CompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLanesDelegate;
        
        private EndOperationDelegate onEndGetLanesDelegate;
        
        private System.Threading.SendOrPostCallback onGetLanesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHostLanesDelegate;
        
        private EndOperationDelegate onEndGetHostLanesDelegate;
        
        private System.Threading.SendOrPostCallback onGetHostLanesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHostsDelegate;
        
        private EndOperationDelegate onEndGetHostsDelegate;
        
        private System.Threading.SendOrPostCallback onGetHostsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRevisionsDelegate;
        
        private EndOperationDelegate onEndGetRevisionsDelegate;
        
        private System.Threading.SendOrPostCallback onGetRevisionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCommandsDelegate;
        
        private EndOperationDelegate onEndGetCommandsDelegate;
        
        private System.Threading.SendOrPostCallback onGetCommandsCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloneLaneDelegate;
        
        private EndOperationDelegate onEndCloneLaneDelegate;
        
        private System.Threading.SendOrPostCallback onCloneLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteLaneDelegate;
        
        private EndOperationDelegate onEndDeleteLaneDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddLaneDelegate;
        
        private EndOperationDelegate onEndAddLaneDelegate;
        
        private System.Threading.SendOrPostCallback onAddLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteHostDelegate;
        
        private EndOperationDelegate onEndDeleteHostDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteHostCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddHostDelegate;
        
        private EndOperationDelegate onEndAddHostDelegate;
        
        private System.Threading.SendOrPostCallback onAddHostCompletedDelegate;
        
        private BeginOperationDelegate onBeginClearRevisionDelegate;
        
        private EndOperationDelegate onEndClearRevisionDelegate;
        
        private System.Threading.SendOrPostCallback onClearRevisionCompletedDelegate;
        
        private BeginOperationDelegate onBeginRescheduleRevisionDelegate;
        
        private EndOperationDelegate onEndRescheduleRevisionDelegate;
        
        private System.Threading.SendOrPostCallback onRescheduleRevisionCompletedDelegate;
        
        private BeginOperationDelegate onBeginClearAllWorkForHostDelegate;
        
        private EndOperationDelegate onEndClearAllWorkForHostDelegate;
        
        private System.Threading.SendOrPostCallback onClearAllWorkForHostCompletedDelegate;
        
        private BeginOperationDelegate onBeginClearAllWorkForLaneDelegate;
        
        private EndOperationDelegate onEndClearAllWorkForLaneDelegate;
        
        private System.Threading.SendOrPostCallback onClearAllWorkForLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteAllWorkForHostDelegate;
        
        private EndOperationDelegate onEndDeleteAllWorkForHostDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteAllWorkForHostCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteAllWorkForLaneDelegate;
        
        private EndOperationDelegate onEndDeleteAllWorkForLaneDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteAllWorkForLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteAllRevisionsForLaneDelegate;
        
        private EndOperationDelegate onEndDeleteAllRevisionsForLaneDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteAllRevisionsForLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginAbortRevisionDelegate;
        
        private EndOperationDelegate onEndAbortRevisionDelegate;
        
        private System.Threading.SendOrPostCallback onAbortRevisionCompletedDelegate;
        
        private BeginOperationDelegate onBeginClearWorkDelegate;
        
        private EndOperationDelegate onEndClearWorkDelegate;
        
        private System.Threading.SendOrPostCallback onClearWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginAbortWorkDelegate;
        
        private EndOperationDelegate onEndAbortWorkDelegate;
        
        private System.Threading.SendOrPostCallback onAbortWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginPauseWorkDelegate;
        
        private EndOperationDelegate onEndPauseWorkDelegate;
        
        private System.Threading.SendOrPostCallback onPauseWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginResumeWorkDelegate;
        
        private EndOperationDelegate onEndResumeWorkDelegate;
        
        private System.Threading.SendOrPostCallback onResumeWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetViewTableDataDelegate;
        
        private EndOperationDelegate onEndGetViewTableDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetViewTableDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetViewWorkTableDataDelegate;
        
        private EndOperationDelegate onEndGetViewWorkTableDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetViewWorkTableDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetViewWorkTableData2Delegate;
        
        private EndOperationDelegate onEndGetViewWorkTableData2Delegate;
        
        private System.Threading.SendOrPostCallback onGetViewWorkTableData2CompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLaneFileForEditDelegate;
        
        private EndOperationDelegate onEndGetLaneFileForEditDelegate;
        
        private System.Threading.SendOrPostCallback onGetLaneFileForEditCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditLaneFileDelegate;
        
        private EndOperationDelegate onEndEditLaneFileDelegate;
        
        private System.Threading.SendOrPostCallback onEditLaneFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetViewLaneFileHistoryDataDelegate;
        
        private EndOperationDelegate onEndGetViewLaneFileHistoryDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetViewLaneFileHistoryDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUsersDelegate;
        
        private EndOperationDelegate onEndGetUsersDelegate;
        
        private System.Threading.SendOrPostCallback onGetUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteUserDelegate;
        
        private EndOperationDelegate onEndDeleteUserDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddUserEmailDelegate;
        
        private EndOperationDelegate onEndAddUserEmailDelegate;
        
        private System.Threading.SendOrPostCallback onAddUserEmailCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveUserEmailDelegate;
        
        private EndOperationDelegate onEndRemoveUserEmailDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveUserEmailCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditUserDelegate;
        
        private EndOperationDelegate onEndEditUserDelegate;
        
        private System.Threading.SendOrPostCallback onEditUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserDelegate;
        
        private EndOperationDelegate onEndGetUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUploadPortDelegate;
        
        private EndOperationDelegate onEndGetUploadPortDelegate;
        
        private System.Threading.SendOrPostCallback onGetUploadPortCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddEnvironmentVariableDelegate;
        
        private EndOperationDelegate onEndAddEnvironmentVariableDelegate;
        
        private System.Threading.SendOrPostCallback onAddEnvironmentVariableCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditEnvironmentVariableDelegate;
        
        private EndOperationDelegate onEndEditEnvironmentVariableDelegate;
        
        private System.Threading.SendOrPostCallback onEditEnvironmentVariableCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteEnvironmentVariableDelegate;
        
        private EndOperationDelegate onEndDeleteEnvironmentVariableDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteEnvironmentVariableCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadCompressedFileDelegate;
        
        private EndOperationDelegate onEndUploadCompressedFileDelegate;
        
        private System.Threading.SendOrPostCallback onUploadCompressedFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadFileDelegate;
        
        private EndOperationDelegate onEndUploadFileDelegate;
        
        private System.Threading.SendOrPostCallback onUploadFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWorkStateDelegate;
        
        private EndOperationDelegate onEndGetWorkStateDelegate;
        
        private System.Threading.SendOrPostCallback onGetWorkStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFilesForWorkDelegate;
        
        private EndOperationDelegate onEndGetFilesForWorkDelegate;
        
        private System.Threading.SendOrPostCallback onGetFilesForWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginReportBuildStateDelegate;
        
        private EndOperationDelegate onEndReportBuildStateDelegate;
        
        private System.Threading.SendOrPostCallback onReportBuildStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRevisionWorkForLaneDelegate;
        
        private EndOperationDelegate onEndGetRevisionWorkForLaneDelegate;
        
        private System.Threading.SendOrPostCallback onGetRevisionWorkForLaneCompletedDelegate;
        
        private BeginOperationDelegate onBeginReportBuildBotStatusDelegate;
        
        private EndOperationDelegate onEndReportBuildBotStatusDelegate;
        
        private System.Threading.SendOrPostCallback onReportBuildBotStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBuildBotStatusDelegate;
        
        private EndOperationDelegate onEndGetBuildBotStatusDelegate;
        
        private System.Threading.SendOrPostCallback onGetBuildBotStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBuildInfoDelegate;
        
        private EndOperationDelegate onEndGetBuildInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetBuildInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBuildInfoMultipleDelegate;
        
        private EndOperationDelegate onEndGetBuildInfoMultipleDelegate;
        
        private System.Threading.SendOrPostCallback onGetBuildInfoMultipleCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindLatestWorkFileIdDelegate;
        
        private EndOperationDelegate onEndFindLatestWorkFileIdDelegate;
        
        private System.Threading.SendOrPostCallback onFindLatestWorkFileIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTestResultsDelegate;
        
        private EndOperationDelegate onEndGetTestResultsDelegate;
        
        private System.Threading.SendOrPostCallback onGetTestResultsCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditIdentityDelegate;
        
        private EndOperationDelegate onEndEditIdentityDelegate;
        
        private System.Threading.SendOrPostCallback onEditIdentityCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveIdentityDelegate;
        
        private EndOperationDelegate onEndRemoveIdentityDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveIdentityCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetIdentitiesDelegate;
        
        private EndOperationDelegate onEndGetIdentitiesDelegate;
        
        private System.Threading.SendOrPostCallback onGetIdentitiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditNotificationDelegate;
        
        private EndOperationDelegate onEndEditNotificationDelegate;
        
        private System.Threading.SendOrPostCallback onEditNotificationCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveNotificationDelegate;
        
        private EndOperationDelegate onEndRemoveNotificationDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveNotificationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNotificationsDelegate;
        
        private EndOperationDelegate onEndGetNotificationsDelegate;
        
        private System.Threading.SendOrPostCallback onGetNotificationsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddLaneNotificationDelegate;
        
        private EndOperationDelegate onEndAddLaneNotificationDelegate;
        
        private System.Threading.SendOrPostCallback onAddLaneNotificationCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveLaneNotificationDelegate;
        
        private EndOperationDelegate onEndRemoveLaneNotificationDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveLaneNotificationCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddReleaseDelegate;
        
        private EndOperationDelegate onEndAddReleaseDelegate;
        
        private System.Threading.SendOrPostCallback onAddReleaseCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetReleasesDelegate;
        
        private EndOperationDelegate onEndGetReleasesDelegate;
        
        private System.Threading.SendOrPostCallback onGetReleasesCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteReleaseDelegate;
        
        private EndOperationDelegate onEndDeleteReleaseDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteReleaseCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecuteSchedulerDelegate;
        
        private EndOperationDelegate onEndExecuteSchedulerDelegate;
        
        private System.Threading.SendOrPostCallback onExecuteSchedulerCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecuteDeletionDirectivesDelegate;
        
        private EndOperationDelegate onEndExecuteDeletionDirectivesDelegate;
        
        private System.Threading.SendOrPostCallback onExecuteDeletionDirectivesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAdminInfoDelegate;
        
        private EndOperationDelegate onEndGetAdminInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetAdminInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public WebServicesSoap12Client() {
        }
        
        public WebServicesSoap12Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebServicesSoap12Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServicesSoap12Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServicesSoap12Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetRolesCompletedEventArgs1> GetRolesCompleted;
        
        public event System.EventHandler<LoginCompletedEventArgs1> LoginCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LogoutCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreateLanefileCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AttachFileToLaneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeattachFileFromLaneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditCommandFilenameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditCommandSequenceCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditCommandArgumentsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditCommandTimeoutCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditCommandWorkingDirectoryCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditCommandUploadFilesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SwitchCommandNonFatalCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SwitchCommandAlwaysExecuteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SwitchCommandInternalCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteCommandCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddCommandCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SwitchHostEnabledForLaneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveHostForLaneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddHostToLaneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddDependencyToLaneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditLaneDependencyFilenameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteLaneDependencyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditLaneDependencyDownloadsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UnlinkDeletionDirectiveCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteDeletionDirectiveCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EnableDeletionDirectiveCompleted;
        
        public event System.EventHandler<AddFileDeletionDirectiveCompletedEventArgs1> AddFileDeletionDirectiveCompleted;
        
        public event System.EventHandler<AddLaneDeletionDirectiveCompletedEventArgs1> AddLaneDeletionDirectiveCompleted;
        
        public event System.EventHandler<FindLaneDeletionDirectiveCompletedEventArgs1> FindLaneDeletionDirectiveCompleted;
        
        public event System.EventHandler<GetLaneCompletedEventArgs1> GetLaneCompleted;
        
        public event System.EventHandler<GetWorkHostHistoryCompletedEventArgs1> GetWorkHostHistoryCompleted;
        
        public event System.EventHandler<GetHostForEditCompletedEventArgs1> GetHostForEditCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddMasterHostCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveMasterHostCompleted;
        
        public event System.EventHandler<GetLaneForEditCompletedEventArgs1> GetLaneForEditCompleted;
        
        public event System.EventHandler<FindHostCompletedEventArgs1> FindHostCompleted;
        
        public event System.EventHandler<FindRevisionForLaneCompletedEventArgs1> FindRevisionForLaneCompleted;
        
        public event System.EventHandler<FindRevisionCompletedEventArgs1> FindRevisionCompleted;
        
        public event System.EventHandler<FindLaneCompletedEventArgs1> FindLaneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditLaneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditHostCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditHostWithPasswordCompleted;
        
        public event System.EventHandler<GetViewLaneDataCompletedEventArgs1> GetViewLaneDataCompleted;
        
        public event System.EventHandler<GetViewLaneData2CompletedEventArgs1> GetViewLaneData2Completed;
        
        public event System.EventHandler<GetFrontPageDataCompletedEventArgs1> GetFrontPageDataCompleted;
        
        public event System.EventHandler<GetFrontPageData2CompletedEventArgs1> GetFrontPageData2Completed;
        
        public event System.EventHandler<GetLanesCompletedEventArgs1> GetLanesCompleted;
        
        public event System.EventHandler<GetHostLanesCompletedEventArgs1> GetHostLanesCompleted;
        
        public event System.EventHandler<GetHostsCompletedEventArgs1> GetHostsCompleted;
        
        public event System.EventHandler<GetRevisionsCompletedEventArgs1> GetRevisionsCompleted;
        
        public event System.EventHandler<GetCommandsCompletedEventArgs1> GetCommandsCompleted;
        
        public event System.EventHandler<CloneLaneCompletedEventArgs1> CloneLaneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteLaneCompleted;
        
        public event System.EventHandler<AddLaneCompletedEventArgs1> AddLaneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteHostCompleted;
        
        public event System.EventHandler<AddHostCompletedEventArgs1> AddHostCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ClearRevisionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RescheduleRevisionCompleted;
        
        public event System.EventHandler<ClearAllWorkForHostCompletedEventArgs1> ClearAllWorkForHostCompleted;
        
        public event System.EventHandler<ClearAllWorkForLaneCompletedEventArgs1> ClearAllWorkForLaneCompleted;
        
        public event System.EventHandler<DeleteAllWorkForHostCompletedEventArgs1> DeleteAllWorkForHostCompleted;
        
        public event System.EventHandler<DeleteAllWorkForLaneCompletedEventArgs1> DeleteAllWorkForLaneCompleted;
        
        public event System.EventHandler<DeleteAllRevisionsForLaneCompletedEventArgs1> DeleteAllRevisionsForLaneCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AbortRevisionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ClearWorkCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AbortWorkCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PauseWorkCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ResumeWorkCompleted;
        
        public event System.EventHandler<GetViewTableDataCompletedEventArgs1> GetViewTableDataCompleted;
        
        public event System.EventHandler<GetViewWorkTableDataCompletedEventArgs1> GetViewWorkTableDataCompleted;
        
        public event System.EventHandler<GetViewWorkTableData2CompletedEventArgs1> GetViewWorkTableData2Completed;
        
        public event System.EventHandler<GetLaneFileForEditCompletedEventArgs1> GetLaneFileForEditCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditLaneFileCompleted;
        
        public event System.EventHandler<GetViewLaneFileHistoryDataCompletedEventArgs1> GetViewLaneFileHistoryDataCompleted;
        
        public event System.EventHandler<GetUsersCompletedEventArgs1> GetUsersCompleted;
        
        public event System.EventHandler<DeleteUserCompletedEventArgs1> DeleteUserCompleted;
        
        public event System.EventHandler<AddUserEmailCompletedEventArgs1> AddUserEmailCompleted;
        
        public event System.EventHandler<RemoveUserEmailCompletedEventArgs1> RemoveUserEmailCompleted;
        
        public event System.EventHandler<EditUserCompletedEventArgs1> EditUserCompleted;
        
        public event System.EventHandler<GetUserCompletedEventArgs1> GetUserCompleted;
        
        public event System.EventHandler<GetUploadPortCompletedEventArgs1> GetUploadPortCompleted;
        
        public event System.EventHandler<AddEnvironmentVariableCompletedEventArgs1> AddEnvironmentVariableCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditEnvironmentVariableCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteEnvironmentVariableCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UploadCompressedFileCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UploadFileCompleted;
        
        public event System.EventHandler<GetWorkStateCompletedEventArgs1> GetWorkStateCompleted;
        
        public event System.EventHandler<GetFilesForWorkCompletedEventArgs1> GetFilesForWorkCompleted;
        
        public event System.EventHandler<ReportBuildStateCompletedEventArgs1> ReportBuildStateCompleted;
        
        public event System.EventHandler<GetRevisionWorkForLaneCompletedEventArgs1> GetRevisionWorkForLaneCompleted;
        
        public event System.EventHandler<ReportBuildBotStatusCompletedEventArgs1> ReportBuildBotStatusCompleted;
        
        public event System.EventHandler<GetBuildBotStatusCompletedEventArgs1> GetBuildBotStatusCompleted;
        
        public event System.EventHandler<GetBuildInfoCompletedEventArgs1> GetBuildInfoCompleted;
        
        public event System.EventHandler<GetBuildInfoMultipleCompletedEventArgs1> GetBuildInfoMultipleCompleted;
        
        public event System.EventHandler<FindLatestWorkFileIdCompletedEventArgs1> FindLatestWorkFileIdCompleted;
        
        public event System.EventHandler<GetTestResultsCompletedEventArgs1> GetTestResultsCompleted;
        
        public event System.EventHandler<EditIdentityCompletedEventArgs1> EditIdentityCompleted;
        
        public event System.EventHandler<RemoveIdentityCompletedEventArgs1> RemoveIdentityCompleted;
        
        public event System.EventHandler<GetIdentitiesCompletedEventArgs1> GetIdentitiesCompleted;
        
        public event System.EventHandler<EditNotificationCompletedEventArgs1> EditNotificationCompleted;
        
        public event System.EventHandler<RemoveNotificationCompletedEventArgs1> RemoveNotificationCompleted;
        
        public event System.EventHandler<GetNotificationsCompletedEventArgs1> GetNotificationsCompleted;
        
        public event System.EventHandler<AddLaneNotificationCompletedEventArgs1> AddLaneNotificationCompleted;
        
        public event System.EventHandler<RemoveLaneNotificationCompletedEventArgs1> RemoveLaneNotificationCompleted;
        
        public event System.EventHandler<AddReleaseCompletedEventArgs1> AddReleaseCompleted;
        
        public event System.EventHandler<GetReleasesCompletedEventArgs1> GetReleasesCompleted;
        
        public event System.EventHandler<DeleteReleaseCompletedEventArgs1> DeleteReleaseCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ExecuteSchedulerCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ExecuteDeletionDirectivesCompleted;
        
        public event System.EventHandler<GetAdminInfoCompletedEventArgs1> GetAdminInfoCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetRoles(string user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRoles(user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string[] MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetRoles(System.IAsyncResult result) {
            return base.Channel.EndGetRoles(result);
        }
        
        private System.IAsyncResult OnBeginGetRoles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string user = ((string)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetRoles(user, callback, asyncState);
        }
        
        private object[] OnEndGetRoles(System.IAsyncResult result) {
            string[] retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetRoles(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRolesCompleted(object state) {
            if ((this.GetRolesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRolesCompleted(this, new GetRolesCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRolesAsync(string user) {
            this.GetRolesAsync(user, null);
        }
        
        public void GetRolesAsync(string user, object userState) {
            if ((this.onBeginGetRolesDelegate == null)) {
                this.onBeginGetRolesDelegate = new BeginOperationDelegate(this.OnBeginGetRoles);
            }
            if ((this.onEndGetRolesDelegate == null)) {
                this.onEndGetRolesDelegate = new EndOperationDelegate(this.OnEndGetRoles);
            }
            if ((this.onGetRolesCompletedDelegate == null)) {
                this.onGetRolesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRolesCompleted);
            }
            base.InvokeAsync(this.onBeginGetRolesDelegate, new object[] {
                        user}, this.onEndGetRolesDelegate, this.onGetRolesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginLogin(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.LoginResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginLogin(login, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.LoginResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.LoginAsync(login, null);
        }
        
        public void LoginAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        login}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginLogout(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogout(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndLogout(System.IAsyncResult result) {
            base.Channel.EndLogout(result);
        }
        
        private System.IAsyncResult OnBeginLogout(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginLogout(login, callback, asyncState);
        }
        
        private object[] OnEndLogout(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndLogout(result);
            return null;
        }
        
        private void OnLogoutCompleted(object state) {
            if ((this.LogoutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogoutAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.LogoutAsync(login, null);
        }
        
        public void LogoutAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginLogoutDelegate == null)) {
                this.onBeginLogoutDelegate = new BeginOperationDelegate(this.OnBeginLogout);
            }
            if ((this.onEndLogoutDelegate == null)) {
                this.onEndLogoutDelegate = new EndOperationDelegate(this.OnEndLogout);
            }
            if ((this.onLogoutCompletedDelegate == null)) {
                this.onLogoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogoutCompleted);
            }
            base.InvokeAsync(this.onBeginLogoutDelegate, new object[] {
                        login}, this.onEndLogoutDelegate, this.onLogoutCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginCreateLanefile(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string filename, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateLanefile(login, lane_id, filename, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndCreateLanefile(System.IAsyncResult result) {
            base.Channel.EndCreateLanefile(result);
        }
        
        private System.IAsyncResult OnBeginCreateLanefile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            string filename = ((string)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginCreateLanefile(login, lane_id, filename, callback, asyncState);
        }
        
        private object[] OnEndCreateLanefile(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndCreateLanefile(result);
            return null;
        }
        
        private void OnCreateLanefileCompleted(object state) {
            if ((this.CreateLanefileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateLanefileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateLanefileAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string filename) {
            this.CreateLanefileAsync(login, lane_id, filename, null);
        }
        
        public void CreateLanefileAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string filename, object userState) {
            if ((this.onBeginCreateLanefileDelegate == null)) {
                this.onBeginCreateLanefileDelegate = new BeginOperationDelegate(this.OnBeginCreateLanefile);
            }
            if ((this.onEndCreateLanefileDelegate == null)) {
                this.onEndCreateLanefileDelegate = new EndOperationDelegate(this.OnEndCreateLanefile);
            }
            if ((this.onCreateLanefileCompletedDelegate == null)) {
                this.onCreateLanefileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateLanefileCompleted);
            }
            base.InvokeAsync(this.onBeginCreateLanefileDelegate, new object[] {
                        login,
                        lane_id,
                        filename}, this.onEndCreateLanefileDelegate, this.onCreateLanefileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginAttachFileToLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int lanefile_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAttachFileToLane(login, lane_id, lanefile_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndAttachFileToLane(System.IAsyncResult result) {
            base.Channel.EndAttachFileToLane(result);
        }
        
        private System.IAsyncResult OnBeginAttachFileToLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            int lanefile_id = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginAttachFileToLane(login, lane_id, lanefile_id, callback, asyncState);
        }
        
        private object[] OnEndAttachFileToLane(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndAttachFileToLane(result);
            return null;
        }
        
        private void OnAttachFileToLaneCompleted(object state) {
            if ((this.AttachFileToLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AttachFileToLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AttachFileToLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int lanefile_id) {
            this.AttachFileToLaneAsync(login, lane_id, lanefile_id, null);
        }
        
        public void AttachFileToLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int lanefile_id, object userState) {
            if ((this.onBeginAttachFileToLaneDelegate == null)) {
                this.onBeginAttachFileToLaneDelegate = new BeginOperationDelegate(this.OnBeginAttachFileToLane);
            }
            if ((this.onEndAttachFileToLaneDelegate == null)) {
                this.onEndAttachFileToLaneDelegate = new EndOperationDelegate(this.OnEndAttachFileToLane);
            }
            if ((this.onAttachFileToLaneCompletedDelegate == null)) {
                this.onAttachFileToLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAttachFileToLaneCompleted);
            }
            base.InvokeAsync(this.onBeginAttachFileToLaneDelegate, new object[] {
                        login,
                        lane_id,
                        lanefile_id}, this.onEndAttachFileToLaneDelegate, this.onAttachFileToLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginDeattachFileFromLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int lanefile_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeattachFileFromLane(login, lane_id, lanefile_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndDeattachFileFromLane(System.IAsyncResult result) {
            base.Channel.EndDeattachFileFromLane(result);
        }
        
        private System.IAsyncResult OnBeginDeattachFileFromLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            int lanefile_id = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginDeattachFileFromLane(login, lane_id, lanefile_id, callback, asyncState);
        }
        
        private object[] OnEndDeattachFileFromLane(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndDeattachFileFromLane(result);
            return null;
        }
        
        private void OnDeattachFileFromLaneCompleted(object state) {
            if ((this.DeattachFileFromLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeattachFileFromLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeattachFileFromLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int lanefile_id) {
            this.DeattachFileFromLaneAsync(login, lane_id, lanefile_id, null);
        }
        
        public void DeattachFileFromLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int lanefile_id, object userState) {
            if ((this.onBeginDeattachFileFromLaneDelegate == null)) {
                this.onBeginDeattachFileFromLaneDelegate = new BeginOperationDelegate(this.OnBeginDeattachFileFromLane);
            }
            if ((this.onEndDeattachFileFromLaneDelegate == null)) {
                this.onEndDeattachFileFromLaneDelegate = new EndOperationDelegate(this.OnEndDeattachFileFromLane);
            }
            if ((this.onDeattachFileFromLaneCompletedDelegate == null)) {
                this.onDeattachFileFromLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeattachFileFromLaneCompleted);
            }
            base.InvokeAsync(this.onBeginDeattachFileFromLaneDelegate, new object[] {
                        login,
                        lane_id,
                        lanefile_id}, this.onEndDeattachFileFromLaneDelegate, this.onDeattachFileFromLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginEditCommandFilename(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string filename, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditCommandFilename(login, command_id, filename, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndEditCommandFilename(System.IAsyncResult result) {
            base.Channel.EndEditCommandFilename(result);
        }
        
        private System.IAsyncResult OnBeginEditCommandFilename(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int command_id = ((int)(inValues[1]));
            string filename = ((string)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginEditCommandFilename(login, command_id, filename, callback, asyncState);
        }
        
        private object[] OnEndEditCommandFilename(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndEditCommandFilename(result);
            return null;
        }
        
        private void OnEditCommandFilenameCompleted(object state) {
            if ((this.EditCommandFilenameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditCommandFilenameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditCommandFilenameAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string filename) {
            this.EditCommandFilenameAsync(login, command_id, filename, null);
        }
        
        public void EditCommandFilenameAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string filename, object userState) {
            if ((this.onBeginEditCommandFilenameDelegate == null)) {
                this.onBeginEditCommandFilenameDelegate = new BeginOperationDelegate(this.OnBeginEditCommandFilename);
            }
            if ((this.onEndEditCommandFilenameDelegate == null)) {
                this.onEndEditCommandFilenameDelegate = new EndOperationDelegate(this.OnEndEditCommandFilename);
            }
            if ((this.onEditCommandFilenameCompletedDelegate == null)) {
                this.onEditCommandFilenameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditCommandFilenameCompleted);
            }
            base.InvokeAsync(this.onBeginEditCommandFilenameDelegate, new object[] {
                        login,
                        command_id,
                        filename}, this.onEndEditCommandFilenameDelegate, this.onEditCommandFilenameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginEditCommandSequence(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, int sequence, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditCommandSequence(login, command_id, sequence, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndEditCommandSequence(System.IAsyncResult result) {
            base.Channel.EndEditCommandSequence(result);
        }
        
        private System.IAsyncResult OnBeginEditCommandSequence(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int command_id = ((int)(inValues[1]));
            int sequence = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginEditCommandSequence(login, command_id, sequence, callback, asyncState);
        }
        
        private object[] OnEndEditCommandSequence(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndEditCommandSequence(result);
            return null;
        }
        
        private void OnEditCommandSequenceCompleted(object state) {
            if ((this.EditCommandSequenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditCommandSequenceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditCommandSequenceAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, int sequence) {
            this.EditCommandSequenceAsync(login, command_id, sequence, null);
        }
        
        public void EditCommandSequenceAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, int sequence, object userState) {
            if ((this.onBeginEditCommandSequenceDelegate == null)) {
                this.onBeginEditCommandSequenceDelegate = new BeginOperationDelegate(this.OnBeginEditCommandSequence);
            }
            if ((this.onEndEditCommandSequenceDelegate == null)) {
                this.onEndEditCommandSequenceDelegate = new EndOperationDelegate(this.OnEndEditCommandSequence);
            }
            if ((this.onEditCommandSequenceCompletedDelegate == null)) {
                this.onEditCommandSequenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditCommandSequenceCompleted);
            }
            base.InvokeAsync(this.onBeginEditCommandSequenceDelegate, new object[] {
                        login,
                        command_id,
                        sequence}, this.onEndEditCommandSequenceDelegate, this.onEditCommandSequenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginEditCommandArguments(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string arguments, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditCommandArguments(login, command_id, arguments, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndEditCommandArguments(System.IAsyncResult result) {
            base.Channel.EndEditCommandArguments(result);
        }
        
        private System.IAsyncResult OnBeginEditCommandArguments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int command_id = ((int)(inValues[1]));
            string arguments = ((string)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginEditCommandArguments(login, command_id, arguments, callback, asyncState);
        }
        
        private object[] OnEndEditCommandArguments(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndEditCommandArguments(result);
            return null;
        }
        
        private void OnEditCommandArgumentsCompleted(object state) {
            if ((this.EditCommandArgumentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditCommandArgumentsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditCommandArgumentsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string arguments) {
            this.EditCommandArgumentsAsync(login, command_id, arguments, null);
        }
        
        public void EditCommandArgumentsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string arguments, object userState) {
            if ((this.onBeginEditCommandArgumentsDelegate == null)) {
                this.onBeginEditCommandArgumentsDelegate = new BeginOperationDelegate(this.OnBeginEditCommandArguments);
            }
            if ((this.onEndEditCommandArgumentsDelegate == null)) {
                this.onEndEditCommandArgumentsDelegate = new EndOperationDelegate(this.OnEndEditCommandArguments);
            }
            if ((this.onEditCommandArgumentsCompletedDelegate == null)) {
                this.onEditCommandArgumentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditCommandArgumentsCompleted);
            }
            base.InvokeAsync(this.onBeginEditCommandArgumentsDelegate, new object[] {
                        login,
                        command_id,
                        arguments}, this.onEndEditCommandArgumentsDelegate, this.onEditCommandArgumentsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginEditCommandTimeout(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, int timeout, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditCommandTimeout(login, command_id, timeout, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndEditCommandTimeout(System.IAsyncResult result) {
            base.Channel.EndEditCommandTimeout(result);
        }
        
        private System.IAsyncResult OnBeginEditCommandTimeout(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int command_id = ((int)(inValues[1]));
            int timeout = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginEditCommandTimeout(login, command_id, timeout, callback, asyncState);
        }
        
        private object[] OnEndEditCommandTimeout(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndEditCommandTimeout(result);
            return null;
        }
        
        private void OnEditCommandTimeoutCompleted(object state) {
            if ((this.EditCommandTimeoutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditCommandTimeoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditCommandTimeoutAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, int timeout) {
            this.EditCommandTimeoutAsync(login, command_id, timeout, null);
        }
        
        public void EditCommandTimeoutAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, int timeout, object userState) {
            if ((this.onBeginEditCommandTimeoutDelegate == null)) {
                this.onBeginEditCommandTimeoutDelegate = new BeginOperationDelegate(this.OnBeginEditCommandTimeout);
            }
            if ((this.onEndEditCommandTimeoutDelegate == null)) {
                this.onEndEditCommandTimeoutDelegate = new EndOperationDelegate(this.OnEndEditCommandTimeout);
            }
            if ((this.onEditCommandTimeoutCompletedDelegate == null)) {
                this.onEditCommandTimeoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditCommandTimeoutCompleted);
            }
            base.InvokeAsync(this.onBeginEditCommandTimeoutDelegate, new object[] {
                        login,
                        command_id,
                        timeout}, this.onEndEditCommandTimeoutDelegate, this.onEditCommandTimeoutCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginEditCommandWorkingDirectory(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string working_directory, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditCommandWorkingDirectory(login, command_id, working_directory, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndEditCommandWorkingDirectory(System.IAsyncResult result) {
            base.Channel.EndEditCommandWorkingDirectory(result);
        }
        
        private System.IAsyncResult OnBeginEditCommandWorkingDirectory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int command_id = ((int)(inValues[1]));
            string working_directory = ((string)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginEditCommandWorkingDirectory(login, command_id, working_directory, callback, asyncState);
        }
        
        private object[] OnEndEditCommandWorkingDirectory(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndEditCommandWorkingDirectory(result);
            return null;
        }
        
        private void OnEditCommandWorkingDirectoryCompleted(object state) {
            if ((this.EditCommandWorkingDirectoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditCommandWorkingDirectoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditCommandWorkingDirectoryAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string working_directory) {
            this.EditCommandWorkingDirectoryAsync(login, command_id, working_directory, null);
        }
        
        public void EditCommandWorkingDirectoryAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string working_directory, object userState) {
            if ((this.onBeginEditCommandWorkingDirectoryDelegate == null)) {
                this.onBeginEditCommandWorkingDirectoryDelegate = new BeginOperationDelegate(this.OnBeginEditCommandWorkingDirectory);
            }
            if ((this.onEndEditCommandWorkingDirectoryDelegate == null)) {
                this.onEndEditCommandWorkingDirectoryDelegate = new EndOperationDelegate(this.OnEndEditCommandWorkingDirectory);
            }
            if ((this.onEditCommandWorkingDirectoryCompletedDelegate == null)) {
                this.onEditCommandWorkingDirectoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditCommandWorkingDirectoryCompleted);
            }
            base.InvokeAsync(this.onBeginEditCommandWorkingDirectoryDelegate, new object[] {
                        login,
                        command_id,
                        working_directory}, this.onEndEditCommandWorkingDirectoryDelegate, this.onEditCommandWorkingDirectoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginEditCommandUploadFiles(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string upload_files, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditCommandUploadFiles(login, command_id, upload_files, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndEditCommandUploadFiles(System.IAsyncResult result) {
            base.Channel.EndEditCommandUploadFiles(result);
        }
        
        private System.IAsyncResult OnBeginEditCommandUploadFiles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int command_id = ((int)(inValues[1]));
            string upload_files = ((string)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginEditCommandUploadFiles(login, command_id, upload_files, callback, asyncState);
        }
        
        private object[] OnEndEditCommandUploadFiles(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndEditCommandUploadFiles(result);
            return null;
        }
        
        private void OnEditCommandUploadFilesCompleted(object state) {
            if ((this.EditCommandUploadFilesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditCommandUploadFilesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditCommandUploadFilesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string upload_files) {
            this.EditCommandUploadFilesAsync(login, command_id, upload_files, null);
        }
        
        public void EditCommandUploadFilesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string upload_files, object userState) {
            if ((this.onBeginEditCommandUploadFilesDelegate == null)) {
                this.onBeginEditCommandUploadFilesDelegate = new BeginOperationDelegate(this.OnBeginEditCommandUploadFiles);
            }
            if ((this.onEndEditCommandUploadFilesDelegate == null)) {
                this.onEndEditCommandUploadFilesDelegate = new EndOperationDelegate(this.OnEndEditCommandUploadFiles);
            }
            if ((this.onEditCommandUploadFilesCompletedDelegate == null)) {
                this.onEditCommandUploadFilesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditCommandUploadFilesCompleted);
            }
            base.InvokeAsync(this.onBeginEditCommandUploadFilesDelegate, new object[] {
                        login,
                        command_id,
                        upload_files}, this.onEndEditCommandUploadFilesDelegate, this.onEditCommandUploadFilesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginSwitchCommandNonFatal(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSwitchCommandNonFatal(login, command_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndSwitchCommandNonFatal(System.IAsyncResult result) {
            base.Channel.EndSwitchCommandNonFatal(result);
        }
        
        private System.IAsyncResult OnBeginSwitchCommandNonFatal(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int command_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginSwitchCommandNonFatal(login, command_id, callback, asyncState);
        }
        
        private object[] OnEndSwitchCommandNonFatal(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndSwitchCommandNonFatal(result);
            return null;
        }
        
        private void OnSwitchCommandNonFatalCompleted(object state) {
            if ((this.SwitchCommandNonFatalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SwitchCommandNonFatalCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SwitchCommandNonFatalAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id) {
            this.SwitchCommandNonFatalAsync(login, command_id, null);
        }
        
        public void SwitchCommandNonFatalAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, object userState) {
            if ((this.onBeginSwitchCommandNonFatalDelegate == null)) {
                this.onBeginSwitchCommandNonFatalDelegate = new BeginOperationDelegate(this.OnBeginSwitchCommandNonFatal);
            }
            if ((this.onEndSwitchCommandNonFatalDelegate == null)) {
                this.onEndSwitchCommandNonFatalDelegate = new EndOperationDelegate(this.OnEndSwitchCommandNonFatal);
            }
            if ((this.onSwitchCommandNonFatalCompletedDelegate == null)) {
                this.onSwitchCommandNonFatalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSwitchCommandNonFatalCompleted);
            }
            base.InvokeAsync(this.onBeginSwitchCommandNonFatalDelegate, new object[] {
                        login,
                        command_id}, this.onEndSwitchCommandNonFatalDelegate, this.onSwitchCommandNonFatalCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginSwitchCommandAlwaysExecute(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSwitchCommandAlwaysExecute(login, command_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndSwitchCommandAlwaysExecute(System.IAsyncResult result) {
            base.Channel.EndSwitchCommandAlwaysExecute(result);
        }
        
        private System.IAsyncResult OnBeginSwitchCommandAlwaysExecute(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int command_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginSwitchCommandAlwaysExecute(login, command_id, callback, asyncState);
        }
        
        private object[] OnEndSwitchCommandAlwaysExecute(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndSwitchCommandAlwaysExecute(result);
            return null;
        }
        
        private void OnSwitchCommandAlwaysExecuteCompleted(object state) {
            if ((this.SwitchCommandAlwaysExecuteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SwitchCommandAlwaysExecuteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SwitchCommandAlwaysExecuteAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id) {
            this.SwitchCommandAlwaysExecuteAsync(login, command_id, null);
        }
        
        public void SwitchCommandAlwaysExecuteAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, object userState) {
            if ((this.onBeginSwitchCommandAlwaysExecuteDelegate == null)) {
                this.onBeginSwitchCommandAlwaysExecuteDelegate = new BeginOperationDelegate(this.OnBeginSwitchCommandAlwaysExecute);
            }
            if ((this.onEndSwitchCommandAlwaysExecuteDelegate == null)) {
                this.onEndSwitchCommandAlwaysExecuteDelegate = new EndOperationDelegate(this.OnEndSwitchCommandAlwaysExecute);
            }
            if ((this.onSwitchCommandAlwaysExecuteCompletedDelegate == null)) {
                this.onSwitchCommandAlwaysExecuteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSwitchCommandAlwaysExecuteCompleted);
            }
            base.InvokeAsync(this.onBeginSwitchCommandAlwaysExecuteDelegate, new object[] {
                        login,
                        command_id}, this.onEndSwitchCommandAlwaysExecuteDelegate, this.onSwitchCommandAlwaysExecuteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginSwitchCommandInternal(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSwitchCommandInternal(login, command_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndSwitchCommandInternal(System.IAsyncResult result) {
            base.Channel.EndSwitchCommandInternal(result);
        }
        
        private System.IAsyncResult OnBeginSwitchCommandInternal(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int command_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginSwitchCommandInternal(login, command_id, callback, asyncState);
        }
        
        private object[] OnEndSwitchCommandInternal(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndSwitchCommandInternal(result);
            return null;
        }
        
        private void OnSwitchCommandInternalCompleted(object state) {
            if ((this.SwitchCommandInternalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SwitchCommandInternalCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SwitchCommandInternalAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id) {
            this.SwitchCommandInternalAsync(login, command_id, null);
        }
        
        public void SwitchCommandInternalAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, object userState) {
            if ((this.onBeginSwitchCommandInternalDelegate == null)) {
                this.onBeginSwitchCommandInternalDelegate = new BeginOperationDelegate(this.OnBeginSwitchCommandInternal);
            }
            if ((this.onEndSwitchCommandInternalDelegate == null)) {
                this.onEndSwitchCommandInternalDelegate = new EndOperationDelegate(this.OnEndSwitchCommandInternal);
            }
            if ((this.onSwitchCommandInternalCompletedDelegate == null)) {
                this.onSwitchCommandInternalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSwitchCommandInternalCompleted);
            }
            base.InvokeAsync(this.onBeginSwitchCommandInternalDelegate, new object[] {
                        login,
                        command_id}, this.onEndSwitchCommandInternalDelegate, this.onSwitchCommandInternalCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginDeleteCommand(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteCommand(login, command_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndDeleteCommand(System.IAsyncResult result) {
            base.Channel.EndDeleteCommand(result);
        }
        
        private System.IAsyncResult OnBeginDeleteCommand(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int command_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginDeleteCommand(login, command_id, callback, asyncState);
        }
        
        private object[] OnEndDeleteCommand(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndDeleteCommand(result);
            return null;
        }
        
        private void OnDeleteCommandCompleted(object state) {
            if ((this.DeleteCommandCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteCommandCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteCommandAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id) {
            this.DeleteCommandAsync(login, command_id, null);
        }
        
        public void DeleteCommandAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, object userState) {
            if ((this.onBeginDeleteCommandDelegate == null)) {
                this.onBeginDeleteCommandDelegate = new BeginOperationDelegate(this.OnBeginDeleteCommand);
            }
            if ((this.onEndDeleteCommandDelegate == null)) {
                this.onEndDeleteCommandDelegate = new EndOperationDelegate(this.OnEndDeleteCommand);
            }
            if ((this.onDeleteCommandCompletedDelegate == null)) {
                this.onDeleteCommandCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteCommandCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteCommandDelegate, new object[] {
                        login,
                        command_id}, this.onEndDeleteCommandDelegate, this.onDeleteCommandCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginAddCommand(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string command, bool always_execute, bool nonfatal, int timeout, int sequence, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddCommand(login, lane_id, command, always_execute, nonfatal, timeout, sequence, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndAddCommand(System.IAsyncResult result) {
            base.Channel.EndAddCommand(result);
        }
        
        private System.IAsyncResult OnBeginAddCommand(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            string command = ((string)(inValues[2]));
            bool always_execute = ((bool)(inValues[3]));
            bool nonfatal = ((bool)(inValues[4]));
            int timeout = ((int)(inValues[5]));
            int sequence = ((int)(inValues[6]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginAddCommand(login, lane_id, command, always_execute, nonfatal, timeout, sequence, callback, asyncState);
        }
        
        private object[] OnEndAddCommand(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndAddCommand(result);
            return null;
        }
        
        private void OnAddCommandCompleted(object state) {
            if ((this.AddCommandCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddCommandCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddCommandAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string command, bool always_execute, bool nonfatal, int timeout, int sequence) {
            this.AddCommandAsync(login, lane_id, command, always_execute, nonfatal, timeout, sequence, null);
        }
        
        public void AddCommandAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string command, bool always_execute, bool nonfatal, int timeout, int sequence, object userState) {
            if ((this.onBeginAddCommandDelegate == null)) {
                this.onBeginAddCommandDelegate = new BeginOperationDelegate(this.OnBeginAddCommand);
            }
            if ((this.onEndAddCommandDelegate == null)) {
                this.onEndAddCommandDelegate = new EndOperationDelegate(this.OnEndAddCommand);
            }
            if ((this.onAddCommandCompletedDelegate == null)) {
                this.onAddCommandCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddCommandCompleted);
            }
            base.InvokeAsync(this.onBeginAddCommandDelegate, new object[] {
                        login,
                        lane_id,
                        command,
                        always_execute,
                        nonfatal,
                        timeout,
                        sequence}, this.onEndAddCommandDelegate, this.onAddCommandCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginSwitchHostEnabledForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSwitchHostEnabledForLane(login, lane_id, host_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndSwitchHostEnabledForLane(System.IAsyncResult result) {
            base.Channel.EndSwitchHostEnabledForLane(result);
        }
        
        private System.IAsyncResult OnBeginSwitchHostEnabledForLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            int host_id = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginSwitchHostEnabledForLane(login, lane_id, host_id, callback, asyncState);
        }
        
        private object[] OnEndSwitchHostEnabledForLane(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndSwitchHostEnabledForLane(result);
            return null;
        }
        
        private void OnSwitchHostEnabledForLaneCompleted(object state) {
            if ((this.SwitchHostEnabledForLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SwitchHostEnabledForLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SwitchHostEnabledForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id) {
            this.SwitchHostEnabledForLaneAsync(login, lane_id, host_id, null);
        }
        
        public void SwitchHostEnabledForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, object userState) {
            if ((this.onBeginSwitchHostEnabledForLaneDelegate == null)) {
                this.onBeginSwitchHostEnabledForLaneDelegate = new BeginOperationDelegate(this.OnBeginSwitchHostEnabledForLane);
            }
            if ((this.onEndSwitchHostEnabledForLaneDelegate == null)) {
                this.onEndSwitchHostEnabledForLaneDelegate = new EndOperationDelegate(this.OnEndSwitchHostEnabledForLane);
            }
            if ((this.onSwitchHostEnabledForLaneCompletedDelegate == null)) {
                this.onSwitchHostEnabledForLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSwitchHostEnabledForLaneCompleted);
            }
            base.InvokeAsync(this.onBeginSwitchHostEnabledForLaneDelegate, new object[] {
                        login,
                        lane_id,
                        host_id}, this.onEndSwitchHostEnabledForLaneDelegate, this.onSwitchHostEnabledForLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginRemoveHostForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveHostForLane(login, lane_id, host_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndRemoveHostForLane(System.IAsyncResult result) {
            base.Channel.EndRemoveHostForLane(result);
        }
        
        private System.IAsyncResult OnBeginRemoveHostForLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            int host_id = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginRemoveHostForLane(login, lane_id, host_id, callback, asyncState);
        }
        
        private object[] OnEndRemoveHostForLane(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndRemoveHostForLane(result);
            return null;
        }
        
        private void OnRemoveHostForLaneCompleted(object state) {
            if ((this.RemoveHostForLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveHostForLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveHostForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id) {
            this.RemoveHostForLaneAsync(login, lane_id, host_id, null);
        }
        
        public void RemoveHostForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, object userState) {
            if ((this.onBeginRemoveHostForLaneDelegate == null)) {
                this.onBeginRemoveHostForLaneDelegate = new BeginOperationDelegate(this.OnBeginRemoveHostForLane);
            }
            if ((this.onEndRemoveHostForLaneDelegate == null)) {
                this.onEndRemoveHostForLaneDelegate = new EndOperationDelegate(this.OnEndRemoveHostForLane);
            }
            if ((this.onRemoveHostForLaneCompletedDelegate == null)) {
                this.onRemoveHostForLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveHostForLaneCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveHostForLaneDelegate, new object[] {
                        login,
                        lane_id,
                        host_id}, this.onEndRemoveHostForLaneDelegate, this.onRemoveHostForLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginAddHostToLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddHostToLane(login, lane_id, host_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndAddHostToLane(System.IAsyncResult result) {
            base.Channel.EndAddHostToLane(result);
        }
        
        private System.IAsyncResult OnBeginAddHostToLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            int host_id = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginAddHostToLane(login, lane_id, host_id, callback, asyncState);
        }
        
        private object[] OnEndAddHostToLane(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndAddHostToLane(result);
            return null;
        }
        
        private void OnAddHostToLaneCompleted(object state) {
            if ((this.AddHostToLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddHostToLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddHostToLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id) {
            this.AddHostToLaneAsync(login, lane_id, host_id, null);
        }
        
        public void AddHostToLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, object userState) {
            if ((this.onBeginAddHostToLaneDelegate == null)) {
                this.onBeginAddHostToLaneDelegate = new BeginOperationDelegate(this.OnBeginAddHostToLane);
            }
            if ((this.onEndAddHostToLaneDelegate == null)) {
                this.onEndAddHostToLaneDelegate = new EndOperationDelegate(this.OnEndAddHostToLane);
            }
            if ((this.onAddHostToLaneCompletedDelegate == null)) {
                this.onAddHostToLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddHostToLaneCompleted);
            }
            base.InvokeAsync(this.onBeginAddHostToLaneDelegate, new object[] {
                        login,
                        lane_id,
                        host_id}, this.onEndAddHostToLaneDelegate, this.onAddHostToLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginAddDependencyToLane(MoonlightDrtViewer.MonkeyWrench.AddDependencyToLaneRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddDependencyToLane(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginAddDependencyToLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int dependent_lane_id, System.Nullable<int> host_id, MoonlightDrtViewer.MonkeyWrench.DBLaneDependencyCondition condition, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.AddDependencyToLaneRequest inValue = new MoonlightDrtViewer.MonkeyWrench.AddDependencyToLaneRequest();
            inValue.login = login;
            inValue.lane_id = lane_id;
            inValue.dependent_lane_id = dependent_lane_id;
            inValue.host_id = host_id;
            inValue.condition = condition;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginAddDependencyToLane(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.AddDependencyToLaneResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndAddDependencyToLane(System.IAsyncResult result) {
            return base.Channel.EndAddDependencyToLane(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private void EndAddDependencyToLane(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.AddDependencyToLaneResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndAddDependencyToLane(result);
        }
        
        private System.IAsyncResult OnBeginAddDependencyToLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            int dependent_lane_id = ((int)(inValues[2]));
            System.Nullable<int> host_id = ((System.Nullable<int>)(inValues[3]));
            MoonlightDrtViewer.MonkeyWrench.DBLaneDependencyCondition condition = ((MoonlightDrtViewer.MonkeyWrench.DBLaneDependencyCondition)(inValues[4]));
            return this.BeginAddDependencyToLane(login, lane_id, dependent_lane_id, host_id, condition, callback, asyncState);
        }
        
        private object[] OnEndAddDependencyToLane(System.IAsyncResult result) {
            this.EndAddDependencyToLane(result);
            return null;
        }
        
        private void OnAddDependencyToLaneCompleted(object state) {
            if ((this.AddDependencyToLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddDependencyToLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddDependencyToLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int dependent_lane_id, System.Nullable<int> host_id, MoonlightDrtViewer.MonkeyWrench.DBLaneDependencyCondition condition) {
            this.AddDependencyToLaneAsync(login, lane_id, dependent_lane_id, host_id, condition, null);
        }
        
        public void AddDependencyToLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int dependent_lane_id, System.Nullable<int> host_id, MoonlightDrtViewer.MonkeyWrench.DBLaneDependencyCondition condition, object userState) {
            if ((this.onBeginAddDependencyToLaneDelegate == null)) {
                this.onBeginAddDependencyToLaneDelegate = new BeginOperationDelegate(this.OnBeginAddDependencyToLane);
            }
            if ((this.onEndAddDependencyToLaneDelegate == null)) {
                this.onEndAddDependencyToLaneDelegate = new EndOperationDelegate(this.OnEndAddDependencyToLane);
            }
            if ((this.onAddDependencyToLaneCompletedDelegate == null)) {
                this.onAddDependencyToLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddDependencyToLaneCompleted);
            }
            base.InvokeAsync(this.onBeginAddDependencyToLaneDelegate, new object[] {
                        login,
                        lane_id,
                        dependent_lane_id,
                        host_id,
                        condition}, this.onEndAddDependencyToLaneDelegate, this.onAddDependencyToLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginEditLaneDependencyFilename(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, string filename, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditLaneDependencyFilename(login, lanedependency_id, filename, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndEditLaneDependencyFilename(System.IAsyncResult result) {
            base.Channel.EndEditLaneDependencyFilename(result);
        }
        
        private System.IAsyncResult OnBeginEditLaneDependencyFilename(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lanedependency_id = ((int)(inValues[1]));
            string filename = ((string)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginEditLaneDependencyFilename(login, lanedependency_id, filename, callback, asyncState);
        }
        
        private object[] OnEndEditLaneDependencyFilename(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndEditLaneDependencyFilename(result);
            return null;
        }
        
        private void OnEditLaneDependencyFilenameCompleted(object state) {
            if ((this.EditLaneDependencyFilenameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditLaneDependencyFilenameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditLaneDependencyFilenameAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, string filename) {
            this.EditLaneDependencyFilenameAsync(login, lanedependency_id, filename, null);
        }
        
        public void EditLaneDependencyFilenameAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, string filename, object userState) {
            if ((this.onBeginEditLaneDependencyFilenameDelegate == null)) {
                this.onBeginEditLaneDependencyFilenameDelegate = new BeginOperationDelegate(this.OnBeginEditLaneDependencyFilename);
            }
            if ((this.onEndEditLaneDependencyFilenameDelegate == null)) {
                this.onEndEditLaneDependencyFilenameDelegate = new EndOperationDelegate(this.OnEndEditLaneDependencyFilename);
            }
            if ((this.onEditLaneDependencyFilenameCompletedDelegate == null)) {
                this.onEditLaneDependencyFilenameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditLaneDependencyFilenameCompleted);
            }
            base.InvokeAsync(this.onBeginEditLaneDependencyFilenameDelegate, new object[] {
                        login,
                        lanedependency_id,
                        filename}, this.onEndEditLaneDependencyFilenameDelegate, this.onEditLaneDependencyFilenameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginDeleteLaneDependency(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteLaneDependency(login, lanedependency_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndDeleteLaneDependency(System.IAsyncResult result) {
            base.Channel.EndDeleteLaneDependency(result);
        }
        
        private System.IAsyncResult OnBeginDeleteLaneDependency(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lanedependency_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginDeleteLaneDependency(login, lanedependency_id, callback, asyncState);
        }
        
        private object[] OnEndDeleteLaneDependency(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndDeleteLaneDependency(result);
            return null;
        }
        
        private void OnDeleteLaneDependencyCompleted(object state) {
            if ((this.DeleteLaneDependencyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteLaneDependencyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteLaneDependencyAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id) {
            this.DeleteLaneDependencyAsync(login, lanedependency_id, null);
        }
        
        public void DeleteLaneDependencyAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, object userState) {
            if ((this.onBeginDeleteLaneDependencyDelegate == null)) {
                this.onBeginDeleteLaneDependencyDelegate = new BeginOperationDelegate(this.OnBeginDeleteLaneDependency);
            }
            if ((this.onEndDeleteLaneDependencyDelegate == null)) {
                this.onEndDeleteLaneDependencyDelegate = new EndOperationDelegate(this.OnEndDeleteLaneDependency);
            }
            if ((this.onDeleteLaneDependencyCompletedDelegate == null)) {
                this.onDeleteLaneDependencyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteLaneDependencyCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteLaneDependencyDelegate, new object[] {
                        login,
                        lanedependency_id}, this.onEndDeleteLaneDependencyDelegate, this.onDeleteLaneDependencyCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginEditLaneDependencyDownloads(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, string downloads, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditLaneDependencyDownloads(login, lanedependency_id, downloads, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndEditLaneDependencyDownloads(System.IAsyncResult result) {
            base.Channel.EndEditLaneDependencyDownloads(result);
        }
        
        private System.IAsyncResult OnBeginEditLaneDependencyDownloads(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lanedependency_id = ((int)(inValues[1]));
            string downloads = ((string)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginEditLaneDependencyDownloads(login, lanedependency_id, downloads, callback, asyncState);
        }
        
        private object[] OnEndEditLaneDependencyDownloads(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndEditLaneDependencyDownloads(result);
            return null;
        }
        
        private void OnEditLaneDependencyDownloadsCompleted(object state) {
            if ((this.EditLaneDependencyDownloadsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditLaneDependencyDownloadsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditLaneDependencyDownloadsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, string downloads) {
            this.EditLaneDependencyDownloadsAsync(login, lanedependency_id, downloads, null);
        }
        
        public void EditLaneDependencyDownloadsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, string downloads, object userState) {
            if ((this.onBeginEditLaneDependencyDownloadsDelegate == null)) {
                this.onBeginEditLaneDependencyDownloadsDelegate = new BeginOperationDelegate(this.OnBeginEditLaneDependencyDownloads);
            }
            if ((this.onEndEditLaneDependencyDownloadsDelegate == null)) {
                this.onEndEditLaneDependencyDownloadsDelegate = new EndOperationDelegate(this.OnEndEditLaneDependencyDownloads);
            }
            if ((this.onEditLaneDependencyDownloadsCompletedDelegate == null)) {
                this.onEditLaneDependencyDownloadsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditLaneDependencyDownloadsCompleted);
            }
            base.InvokeAsync(this.onBeginEditLaneDependencyDownloadsDelegate, new object[] {
                        login,
                        lanedependency_id,
                        downloads}, this.onEndEditLaneDependencyDownloadsDelegate, this.onEditLaneDependencyDownloadsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginUnlinkDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int directive_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUnlinkDeletionDirective(login, directive_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndUnlinkDeletionDirective(System.IAsyncResult result) {
            base.Channel.EndUnlinkDeletionDirective(result);
        }
        
        private System.IAsyncResult OnBeginUnlinkDeletionDirective(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int directive_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginUnlinkDeletionDirective(login, directive_id, callback, asyncState);
        }
        
        private object[] OnEndUnlinkDeletionDirective(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndUnlinkDeletionDirective(result);
            return null;
        }
        
        private void OnUnlinkDeletionDirectiveCompleted(object state) {
            if ((this.UnlinkDeletionDirectiveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UnlinkDeletionDirectiveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UnlinkDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int directive_id) {
            this.UnlinkDeletionDirectiveAsync(login, directive_id, null);
        }
        
        public void UnlinkDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int directive_id, object userState) {
            if ((this.onBeginUnlinkDeletionDirectiveDelegate == null)) {
                this.onBeginUnlinkDeletionDirectiveDelegate = new BeginOperationDelegate(this.OnBeginUnlinkDeletionDirective);
            }
            if ((this.onEndUnlinkDeletionDirectiveDelegate == null)) {
                this.onEndUnlinkDeletionDirectiveDelegate = new EndOperationDelegate(this.OnEndUnlinkDeletionDirective);
            }
            if ((this.onUnlinkDeletionDirectiveCompletedDelegate == null)) {
                this.onUnlinkDeletionDirectiveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnlinkDeletionDirectiveCompleted);
            }
            base.InvokeAsync(this.onBeginUnlinkDeletionDirectiveDelegate, new object[] {
                        login,
                        directive_id}, this.onEndUnlinkDeletionDirectiveDelegate, this.onUnlinkDeletionDirectiveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginDeleteDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_directive_id, int file_directive_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteDeletionDirective(login, lane_directive_id, file_directive_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndDeleteDeletionDirective(System.IAsyncResult result) {
            base.Channel.EndDeleteDeletionDirective(result);
        }
        
        private System.IAsyncResult OnBeginDeleteDeletionDirective(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_directive_id = ((int)(inValues[1]));
            int file_directive_id = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginDeleteDeletionDirective(login, lane_directive_id, file_directive_id, callback, asyncState);
        }
        
        private object[] OnEndDeleteDeletionDirective(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndDeleteDeletionDirective(result);
            return null;
        }
        
        private void OnDeleteDeletionDirectiveCompleted(object state) {
            if ((this.DeleteDeletionDirectiveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteDeletionDirectiveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_directive_id, int file_directive_id) {
            this.DeleteDeletionDirectiveAsync(login, lane_directive_id, file_directive_id, null);
        }
        
        public void DeleteDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_directive_id, int file_directive_id, object userState) {
            if ((this.onBeginDeleteDeletionDirectiveDelegate == null)) {
                this.onBeginDeleteDeletionDirectiveDelegate = new BeginOperationDelegate(this.OnBeginDeleteDeletionDirective);
            }
            if ((this.onEndDeleteDeletionDirectiveDelegate == null)) {
                this.onEndDeleteDeletionDirectiveDelegate = new EndOperationDelegate(this.OnEndDeleteDeletionDirective);
            }
            if ((this.onDeleteDeletionDirectiveCompletedDelegate == null)) {
                this.onDeleteDeletionDirectiveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteDeletionDirectiveCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteDeletionDirectiveDelegate, new object[] {
                        login,
                        lane_directive_id,
                        file_directive_id}, this.onEndDeleteDeletionDirectiveDelegate, this.onDeleteDeletionDirectiveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginEnableDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_deletion_directive_id, bool enabled, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEnableDeletionDirective(login, lane_deletion_directive_id, enabled, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndEnableDeletionDirective(System.IAsyncResult result) {
            base.Channel.EndEnableDeletionDirective(result);
        }
        
        private System.IAsyncResult OnBeginEnableDeletionDirective(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_deletion_directive_id = ((int)(inValues[1]));
            bool enabled = ((bool)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginEnableDeletionDirective(login, lane_deletion_directive_id, enabled, callback, asyncState);
        }
        
        private object[] OnEndEnableDeletionDirective(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndEnableDeletionDirective(result);
            return null;
        }
        
        private void OnEnableDeletionDirectiveCompleted(object state) {
            if ((this.EnableDeletionDirectiveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EnableDeletionDirectiveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EnableDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_deletion_directive_id, bool enabled) {
            this.EnableDeletionDirectiveAsync(login, lane_deletion_directive_id, enabled, null);
        }
        
        public void EnableDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_deletion_directive_id, bool enabled, object userState) {
            if ((this.onBeginEnableDeletionDirectiveDelegate == null)) {
                this.onBeginEnableDeletionDirectiveDelegate = new BeginOperationDelegate(this.OnBeginEnableDeletionDirective);
            }
            if ((this.onEndEnableDeletionDirectiveDelegate == null)) {
                this.onEndEnableDeletionDirectiveDelegate = new EndOperationDelegate(this.OnEndEnableDeletionDirective);
            }
            if ((this.onEnableDeletionDirectiveCompletedDelegate == null)) {
                this.onEnableDeletionDirectiveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEnableDeletionDirectiveCompleted);
            }
            base.InvokeAsync(this.onBeginEnableDeletionDirectiveDelegate, new object[] {
                        login,
                        lane_deletion_directive_id,
                        enabled}, this.onEndEnableDeletionDirectiveDelegate, this.onEnableDeletionDirectiveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginAddFileDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string filename, string name, MoonlightDrtViewer.MonkeyWrench.DBMatchMode match_mode, int x, MoonlightDrtViewer.MonkeyWrench.DBDeleteCondition condition, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddFileDeletionDirective(login, filename, name, match_mode, x, condition, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndAddFileDeletionDirective(System.IAsyncResult result) {
            return base.Channel.EndAddFileDeletionDirective(result);
        }
        
        private System.IAsyncResult OnBeginAddFileDeletionDirective(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            string filename = ((string)(inValues[1]));
            string name = ((string)(inValues[2]));
            MoonlightDrtViewer.MonkeyWrench.DBMatchMode match_mode = ((MoonlightDrtViewer.MonkeyWrench.DBMatchMode)(inValues[3]));
            int x = ((int)(inValues[4]));
            MoonlightDrtViewer.MonkeyWrench.DBDeleteCondition condition = ((MoonlightDrtViewer.MonkeyWrench.DBDeleteCondition)(inValues[5]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginAddFileDeletionDirective(login, filename, name, match_mode, x, condition, callback, asyncState);
        }
        
        private object[] OnEndAddFileDeletionDirective(System.IAsyncResult result) {
            int retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndAddFileDeletionDirective(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddFileDeletionDirectiveCompleted(object state) {
            if ((this.AddFileDeletionDirectiveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddFileDeletionDirectiveCompleted(this, new AddFileDeletionDirectiveCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddFileDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string filename, string name, MoonlightDrtViewer.MonkeyWrench.DBMatchMode match_mode, int x, MoonlightDrtViewer.MonkeyWrench.DBDeleteCondition condition) {
            this.AddFileDeletionDirectiveAsync(login, filename, name, match_mode, x, condition, null);
        }
        
        public void AddFileDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string filename, string name, MoonlightDrtViewer.MonkeyWrench.DBMatchMode match_mode, int x, MoonlightDrtViewer.MonkeyWrench.DBDeleteCondition condition, object userState) {
            if ((this.onBeginAddFileDeletionDirectiveDelegate == null)) {
                this.onBeginAddFileDeletionDirectiveDelegate = new BeginOperationDelegate(this.OnBeginAddFileDeletionDirective);
            }
            if ((this.onEndAddFileDeletionDirectiveDelegate == null)) {
                this.onEndAddFileDeletionDirectiveDelegate = new EndOperationDelegate(this.OnEndAddFileDeletionDirective);
            }
            if ((this.onAddFileDeletionDirectiveCompletedDelegate == null)) {
                this.onAddFileDeletionDirectiveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddFileDeletionDirectiveCompleted);
            }
            base.InvokeAsync(this.onBeginAddFileDeletionDirectiveDelegate, new object[] {
                        login,
                        filename,
                        name,
                        match_mode,
                        x,
                        condition}, this.onEndAddFileDeletionDirectiveDelegate, this.onAddFileDeletionDirectiveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginAddLaneDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int file_deletion_directive_id, int lane_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddLaneDeletionDirective(login, file_deletion_directive_id, lane_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndAddLaneDeletionDirective(System.IAsyncResult result) {
            return base.Channel.EndAddLaneDeletionDirective(result);
        }
        
        private System.IAsyncResult OnBeginAddLaneDeletionDirective(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int file_deletion_directive_id = ((int)(inValues[1]));
            int lane_id = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginAddLaneDeletionDirective(login, file_deletion_directive_id, lane_id, callback, asyncState);
        }
        
        private object[] OnEndAddLaneDeletionDirective(System.IAsyncResult result) {
            int retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndAddLaneDeletionDirective(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddLaneDeletionDirectiveCompleted(object state) {
            if ((this.AddLaneDeletionDirectiveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddLaneDeletionDirectiveCompleted(this, new AddLaneDeletionDirectiveCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddLaneDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int file_deletion_directive_id, int lane_id) {
            this.AddLaneDeletionDirectiveAsync(login, file_deletion_directive_id, lane_id, null);
        }
        
        public void AddLaneDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int file_deletion_directive_id, int lane_id, object userState) {
            if ((this.onBeginAddLaneDeletionDirectiveDelegate == null)) {
                this.onBeginAddLaneDeletionDirectiveDelegate = new BeginOperationDelegate(this.OnBeginAddLaneDeletionDirective);
            }
            if ((this.onEndAddLaneDeletionDirectiveDelegate == null)) {
                this.onEndAddLaneDeletionDirectiveDelegate = new EndOperationDelegate(this.OnEndAddLaneDeletionDirective);
            }
            if ((this.onAddLaneDeletionDirectiveCompletedDelegate == null)) {
                this.onAddLaneDeletionDirectiveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddLaneDeletionDirectiveCompleted);
            }
            base.InvokeAsync(this.onBeginAddLaneDeletionDirectiveDelegate, new object[] {
                        login,
                        file_deletion_directive_id,
                        lane_id}, this.onEndAddLaneDeletionDirectiveDelegate, this.onAddLaneDeletionDirectiveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginFindLaneDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int file_deletion_directive_id, int lane_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindLaneDeletionDirective(login, file_deletion_directive_id, lane_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.DBLaneDeletionDirectiveView MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndFindLaneDeletionDirective(System.IAsyncResult result) {
            return base.Channel.EndFindLaneDeletionDirective(result);
        }
        
        private System.IAsyncResult OnBeginFindLaneDeletionDirective(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int file_deletion_directive_id = ((int)(inValues[1]));
            int lane_id = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginFindLaneDeletionDirective(login, file_deletion_directive_id, lane_id, callback, asyncState);
        }
        
        private object[] OnEndFindLaneDeletionDirective(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.DBLaneDeletionDirectiveView retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndFindLaneDeletionDirective(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindLaneDeletionDirectiveCompleted(object state) {
            if ((this.FindLaneDeletionDirectiveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindLaneDeletionDirectiveCompleted(this, new FindLaneDeletionDirectiveCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindLaneDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int file_deletion_directive_id, int lane_id) {
            this.FindLaneDeletionDirectiveAsync(login, file_deletion_directive_id, lane_id, null);
        }
        
        public void FindLaneDeletionDirectiveAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int file_deletion_directive_id, int lane_id, object userState) {
            if ((this.onBeginFindLaneDeletionDirectiveDelegate == null)) {
                this.onBeginFindLaneDeletionDirectiveDelegate = new BeginOperationDelegate(this.OnBeginFindLaneDeletionDirective);
            }
            if ((this.onEndFindLaneDeletionDirectiveDelegate == null)) {
                this.onEndFindLaneDeletionDirectiveDelegate = new EndOperationDelegate(this.OnEndFindLaneDeletionDirective);
            }
            if ((this.onFindLaneDeletionDirectiveCompletedDelegate == null)) {
                this.onFindLaneDeletionDirectiveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindLaneDeletionDirectiveCompleted);
            }
            base.InvokeAsync(this.onBeginFindLaneDeletionDirectiveDelegate, new object[] {
                        login,
                        file_deletion_directive_id,
                        lane_id}, this.onEndFindLaneDeletionDirectiveDelegate, this.onFindLaneDeletionDirectiveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLane(login, lane_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetLaneResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetLane(System.IAsyncResult result) {
            return base.Channel.EndGetLane(result);
        }
        
        private System.IAsyncResult OnBeginGetLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetLane(login, lane_id, callback, asyncState);
        }
        
        private object[] OnEndGetLane(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetLaneResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetLane(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLaneCompleted(object state) {
            if ((this.GetLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLaneCompleted(this, new GetLaneCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id) {
            this.GetLaneAsync(login, lane_id, null);
        }
        
        public void GetLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, object userState) {
            if ((this.onBeginGetLaneDelegate == null)) {
                this.onBeginGetLaneDelegate = new BeginOperationDelegate(this.OnBeginGetLane);
            }
            if ((this.onEndGetLaneDelegate == null)) {
                this.onEndGetLaneDelegate = new EndOperationDelegate(this.OnEndGetLane);
            }
            if ((this.onGetLaneCompletedDelegate == null)) {
                this.onGetLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLaneCompleted);
            }
            base.InvokeAsync(this.onBeginGetLaneDelegate, new object[] {
                        login,
                        lane_id}, this.onEndGetLaneDelegate, this.onGetLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetWorkHostHistory(MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWorkHostHistory(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetWorkHostHistory(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> host_id, string host, int limit, int offset, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryRequest inValue = new MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryRequest();
            inValue.login = login;
            inValue.host_id = host_id;
            inValue.host = host;
            inValue.limit = limit;
            inValue.offset = offset;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetWorkHostHistory(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryResponse1 MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetWorkHostHistory(System.IAsyncResult result) {
            return base.Channel.EndGetWorkHostHistory(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryResponse EndGetWorkHostHistory(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryResponse1 retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetWorkHostHistory(result);
            return retVal.GetWorkHostHistoryResult;
        }
        
        private System.IAsyncResult OnBeginGetWorkHostHistory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> host_id = ((System.Nullable<int>)(inValues[1]));
            string host = ((string)(inValues[2]));
            int limit = ((int)(inValues[3]));
            int offset = ((int)(inValues[4]));
            return this.BeginGetWorkHostHistory(login, host_id, host, limit, offset, callback, asyncState);
        }
        
        private object[] OnEndGetWorkHostHistory(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryResponse retVal = this.EndGetWorkHostHistory(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWorkHostHistoryCompleted(object state) {
            if ((this.GetWorkHostHistoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWorkHostHistoryCompleted(this, new GetWorkHostHistoryCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWorkHostHistoryAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> host_id, string host, int limit, int offset) {
            this.GetWorkHostHistoryAsync(login, host_id, host, limit, offset, null);
        }
        
        public void GetWorkHostHistoryAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> host_id, string host, int limit, int offset, object userState) {
            if ((this.onBeginGetWorkHostHistoryDelegate == null)) {
                this.onBeginGetWorkHostHistoryDelegate = new BeginOperationDelegate(this.OnBeginGetWorkHostHistory);
            }
            if ((this.onEndGetWorkHostHistoryDelegate == null)) {
                this.onEndGetWorkHostHistoryDelegate = new EndOperationDelegate(this.OnEndGetWorkHostHistory);
            }
            if ((this.onGetWorkHostHistoryCompletedDelegate == null)) {
                this.onGetWorkHostHistoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWorkHostHistoryCompleted);
            }
            base.InvokeAsync(this.onBeginGetWorkHostHistoryDelegate, new object[] {
                        login,
                        host_id,
                        host,
                        limit,
                        offset}, this.onEndGetWorkHostHistoryDelegate, this.onGetWorkHostHistoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetHostForEdit(MoonlightDrtViewer.MonkeyWrench.GetHostForEditRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHostForEdit(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetHostForEdit(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> host_id, string host, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.GetHostForEditRequest inValue = new MoonlightDrtViewer.MonkeyWrench.GetHostForEditRequest();
            inValue.login = login;
            inValue.host_id = host_id;
            inValue.host = host;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetHostForEdit(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetHostForEditResponse1 MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetHostForEdit(System.IAsyncResult result) {
            return base.Channel.EndGetHostForEdit(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.GetHostForEditResponse EndGetHostForEdit(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetHostForEditResponse1 retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetHostForEdit(result);
            return retVal.GetHostForEditResult;
        }
        
        private System.IAsyncResult OnBeginGetHostForEdit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> host_id = ((System.Nullable<int>)(inValues[1]));
            string host = ((string)(inValues[2]));
            return this.BeginGetHostForEdit(login, host_id, host, callback, asyncState);
        }
        
        private object[] OnEndGetHostForEdit(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetHostForEditResponse retVal = this.EndGetHostForEdit(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHostForEditCompleted(object state) {
            if ((this.GetHostForEditCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHostForEditCompleted(this, new GetHostForEditCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHostForEditAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> host_id, string host) {
            this.GetHostForEditAsync(login, host_id, host, null);
        }
        
        public void GetHostForEditAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> host_id, string host, object userState) {
            if ((this.onBeginGetHostForEditDelegate == null)) {
                this.onBeginGetHostForEditDelegate = new BeginOperationDelegate(this.OnBeginGetHostForEdit);
            }
            if ((this.onEndGetHostForEditDelegate == null)) {
                this.onEndGetHostForEditDelegate = new EndOperationDelegate(this.OnEndGetHostForEdit);
            }
            if ((this.onGetHostForEditCompletedDelegate == null)) {
                this.onGetHostForEditCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHostForEditCompleted);
            }
            base.InvokeAsync(this.onBeginGetHostForEditDelegate, new object[] {
                        login,
                        host_id,
                        host}, this.onEndGetHostForEditDelegate, this.onGetHostForEditCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginAddMasterHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, int masterhost_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddMasterHost(login, host_id, masterhost_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndAddMasterHost(System.IAsyncResult result) {
            base.Channel.EndAddMasterHost(result);
        }
        
        private System.IAsyncResult OnBeginAddMasterHost(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int host_id = ((int)(inValues[1]));
            int masterhost_id = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginAddMasterHost(login, host_id, masterhost_id, callback, asyncState);
        }
        
        private object[] OnEndAddMasterHost(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndAddMasterHost(result);
            return null;
        }
        
        private void OnAddMasterHostCompleted(object state) {
            if ((this.AddMasterHostCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddMasterHostCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddMasterHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, int masterhost_id) {
            this.AddMasterHostAsync(login, host_id, masterhost_id, null);
        }
        
        public void AddMasterHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, int masterhost_id, object userState) {
            if ((this.onBeginAddMasterHostDelegate == null)) {
                this.onBeginAddMasterHostDelegate = new BeginOperationDelegate(this.OnBeginAddMasterHost);
            }
            if ((this.onEndAddMasterHostDelegate == null)) {
                this.onEndAddMasterHostDelegate = new EndOperationDelegate(this.OnEndAddMasterHost);
            }
            if ((this.onAddMasterHostCompletedDelegate == null)) {
                this.onAddMasterHostCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddMasterHostCompleted);
            }
            base.InvokeAsync(this.onBeginAddMasterHostDelegate, new object[] {
                        login,
                        host_id,
                        masterhost_id}, this.onEndAddMasterHostDelegate, this.onAddMasterHostCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginRemoveMasterHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, int masterhost_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveMasterHost(login, host_id, masterhost_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndRemoveMasterHost(System.IAsyncResult result) {
            base.Channel.EndRemoveMasterHost(result);
        }
        
        private System.IAsyncResult OnBeginRemoveMasterHost(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int host_id = ((int)(inValues[1]));
            int masterhost_id = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginRemoveMasterHost(login, host_id, masterhost_id, callback, asyncState);
        }
        
        private object[] OnEndRemoveMasterHost(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndRemoveMasterHost(result);
            return null;
        }
        
        private void OnRemoveMasterHostCompleted(object state) {
            if ((this.RemoveMasterHostCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveMasterHostCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveMasterHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, int masterhost_id) {
            this.RemoveMasterHostAsync(login, host_id, masterhost_id, null);
        }
        
        public void RemoveMasterHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, int masterhost_id, object userState) {
            if ((this.onBeginRemoveMasterHostDelegate == null)) {
                this.onBeginRemoveMasterHostDelegate = new BeginOperationDelegate(this.OnBeginRemoveMasterHost);
            }
            if ((this.onEndRemoveMasterHostDelegate == null)) {
                this.onEndRemoveMasterHostDelegate = new EndOperationDelegate(this.OnEndRemoveMasterHost);
            }
            if ((this.onRemoveMasterHostCompletedDelegate == null)) {
                this.onRemoveMasterHostCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveMasterHostCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveMasterHostDelegate, new object[] {
                        login,
                        host_id,
                        masterhost_id}, this.onEndRemoveMasterHostDelegate, this.onRemoveMasterHostCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetLaneForEdit(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string lane, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLaneForEdit(login, lane_id, lane, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetLaneForEditResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetLaneForEdit(System.IAsyncResult result) {
            return base.Channel.EndGetLaneForEdit(result);
        }
        
        private System.IAsyncResult OnBeginGetLaneForEdit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            string lane = ((string)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetLaneForEdit(login, lane_id, lane, callback, asyncState);
        }
        
        private object[] OnEndGetLaneForEdit(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetLaneForEditResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetLaneForEdit(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLaneForEditCompleted(object state) {
            if ((this.GetLaneForEditCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLaneForEditCompleted(this, new GetLaneForEditCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLaneForEditAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string lane) {
            this.GetLaneForEditAsync(login, lane_id, lane, null);
        }
        
        public void GetLaneForEditAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string lane, object userState) {
            if ((this.onBeginGetLaneForEditDelegate == null)) {
                this.onBeginGetLaneForEditDelegate = new BeginOperationDelegate(this.OnBeginGetLaneForEdit);
            }
            if ((this.onEndGetLaneForEditDelegate == null)) {
                this.onEndGetLaneForEditDelegate = new EndOperationDelegate(this.OnEndGetLaneForEdit);
            }
            if ((this.onGetLaneForEditCompletedDelegate == null)) {
                this.onGetLaneForEditCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLaneForEditCompleted);
            }
            base.InvokeAsync(this.onBeginGetLaneForEditDelegate, new object[] {
                        login,
                        lane_id,
                        lane}, this.onEndGetLaneForEditDelegate, this.onGetLaneForEditCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginFindHost(MoonlightDrtViewer.MonkeyWrench.FindHostRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindHost(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginFindHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> host_id, string host, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.FindHostRequest inValue = new MoonlightDrtViewer.MonkeyWrench.FindHostRequest();
            inValue.login = login;
            inValue.host_id = host_id;
            inValue.host = host;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginFindHost(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.FindHostResponse1 MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndFindHost(System.IAsyncResult result) {
            return base.Channel.EndFindHost(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.FindHostResponse EndFindHost(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.FindHostResponse1 retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndFindHost(result);
            return retVal.FindHostResult;
        }
        
        private System.IAsyncResult OnBeginFindHost(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> host_id = ((System.Nullable<int>)(inValues[1]));
            string host = ((string)(inValues[2]));
            return this.BeginFindHost(login, host_id, host, callback, asyncState);
        }
        
        private object[] OnEndFindHost(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.FindHostResponse retVal = this.EndFindHost(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindHostCompleted(object state) {
            if ((this.FindHostCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindHostCompleted(this, new FindHostCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> host_id, string host) {
            this.FindHostAsync(login, host_id, host, null);
        }
        
        public void FindHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> host_id, string host, object userState) {
            if ((this.onBeginFindHostDelegate == null)) {
                this.onBeginFindHostDelegate = new BeginOperationDelegate(this.OnBeginFindHost);
            }
            if ((this.onEndFindHostDelegate == null)) {
                this.onEndFindHostDelegate = new EndOperationDelegate(this.OnEndFindHost);
            }
            if ((this.onFindHostCompletedDelegate == null)) {
                this.onFindHostCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindHostCompleted);
            }
            base.InvokeAsync(this.onBeginFindHostDelegate, new object[] {
                        login,
                        host_id,
                        host}, this.onEndFindHostDelegate, this.onFindHostCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginFindRevisionForLane(MoonlightDrtViewer.MonkeyWrench.FindRevisionForLaneRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindRevisionForLane(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginFindRevisionForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> revision_id, string revision, System.Nullable<int> lane_id, string lane, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.FindRevisionForLaneRequest inValue = new MoonlightDrtViewer.MonkeyWrench.FindRevisionForLaneRequest();
            inValue.login = login;
            inValue.revision_id = revision_id;
            inValue.revision = revision;
            inValue.lane_id = lane_id;
            inValue.lane = lane;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginFindRevisionForLane(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.FindRevisionForLaneResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndFindRevisionForLane(System.IAsyncResult result) {
            return base.Channel.EndFindRevisionForLane(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse EndFindRevisionForLane(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.FindRevisionForLaneResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndFindRevisionForLane(result);
            return retVal.FindRevisionForLaneResult;
        }
        
        private System.IAsyncResult OnBeginFindRevisionForLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> revision_id = ((System.Nullable<int>)(inValues[1]));
            string revision = ((string)(inValues[2]));
            System.Nullable<int> lane_id = ((System.Nullable<int>)(inValues[3]));
            string lane = ((string)(inValues[4]));
            return this.BeginFindRevisionForLane(login, revision_id, revision, lane_id, lane, callback, asyncState);
        }
        
        private object[] OnEndFindRevisionForLane(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse retVal = this.EndFindRevisionForLane(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindRevisionForLaneCompleted(object state) {
            if ((this.FindRevisionForLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindRevisionForLaneCompleted(this, new FindRevisionForLaneCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindRevisionForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> revision_id, string revision, System.Nullable<int> lane_id, string lane) {
            this.FindRevisionForLaneAsync(login, revision_id, revision, lane_id, lane, null);
        }
        
        public void FindRevisionForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> revision_id, string revision, System.Nullable<int> lane_id, string lane, object userState) {
            if ((this.onBeginFindRevisionForLaneDelegate == null)) {
                this.onBeginFindRevisionForLaneDelegate = new BeginOperationDelegate(this.OnBeginFindRevisionForLane);
            }
            if ((this.onEndFindRevisionForLaneDelegate == null)) {
                this.onEndFindRevisionForLaneDelegate = new EndOperationDelegate(this.OnEndFindRevisionForLane);
            }
            if ((this.onFindRevisionForLaneCompletedDelegate == null)) {
                this.onFindRevisionForLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindRevisionForLaneCompleted);
            }
            base.InvokeAsync(this.onBeginFindRevisionForLaneDelegate, new object[] {
                        login,
                        revision_id,
                        revision,
                        lane_id,
                        lane}, this.onEndFindRevisionForLaneDelegate, this.onFindRevisionForLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginFindRevision(MoonlightDrtViewer.MonkeyWrench.FindRevisionRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindRevision(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginFindRevision(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> revision_id, string revision, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.FindRevisionRequest inValue = new MoonlightDrtViewer.MonkeyWrench.FindRevisionRequest();
            inValue.login = login;
            inValue.revision_id = revision_id;
            inValue.revision = revision;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginFindRevision(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse1 MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndFindRevision(System.IAsyncResult result) {
            return base.Channel.EndFindRevision(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse EndFindRevision(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse1 retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndFindRevision(result);
            return retVal.FindRevisionResult;
        }
        
        private System.IAsyncResult OnBeginFindRevision(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> revision_id = ((System.Nullable<int>)(inValues[1]));
            string revision = ((string)(inValues[2]));
            return this.BeginFindRevision(login, revision_id, revision, callback, asyncState);
        }
        
        private object[] OnEndFindRevision(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse retVal = this.EndFindRevision(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindRevisionCompleted(object state) {
            if ((this.FindRevisionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindRevisionCompleted(this, new FindRevisionCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindRevisionAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> revision_id, string revision) {
            this.FindRevisionAsync(login, revision_id, revision, null);
        }
        
        public void FindRevisionAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> revision_id, string revision, object userState) {
            if ((this.onBeginFindRevisionDelegate == null)) {
                this.onBeginFindRevisionDelegate = new BeginOperationDelegate(this.OnBeginFindRevision);
            }
            if ((this.onEndFindRevisionDelegate == null)) {
                this.onEndFindRevisionDelegate = new EndOperationDelegate(this.OnEndFindRevision);
            }
            if ((this.onFindRevisionCompletedDelegate == null)) {
                this.onFindRevisionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindRevisionCompleted);
            }
            base.InvokeAsync(this.onBeginFindRevisionDelegate, new object[] {
                        login,
                        revision_id,
                        revision}, this.onEndFindRevisionDelegate, this.onFindRevisionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginFindLane(MoonlightDrtViewer.MonkeyWrench.FindLaneRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindLane(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginFindLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.FindLaneRequest inValue = new MoonlightDrtViewer.MonkeyWrench.FindLaneRequest();
            inValue.login = login;
            inValue.lane_id = lane_id;
            inValue.lane = lane;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginFindLane(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.FindLaneResponse1 MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndFindLane(System.IAsyncResult result) {
            return base.Channel.EndFindLane(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.FindLaneResponse EndFindLane(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.FindLaneResponse1 retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndFindLane(result);
            return retVal.FindLaneResult;
        }
        
        private System.IAsyncResult OnBeginFindLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> lane_id = ((System.Nullable<int>)(inValues[1]));
            string lane = ((string)(inValues[2]));
            return this.BeginFindLane(login, lane_id, lane, callback, asyncState);
        }
        
        private object[] OnEndFindLane(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.FindLaneResponse retVal = this.EndFindLane(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindLaneCompleted(object state) {
            if ((this.FindLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindLaneCompleted(this, new FindLaneCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane) {
            this.FindLaneAsync(login, lane_id, lane, null);
        }
        
        public void FindLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, object userState) {
            if ((this.onBeginFindLaneDelegate == null)) {
                this.onBeginFindLaneDelegate = new BeginOperationDelegate(this.OnBeginFindLane);
            }
            if ((this.onEndFindLaneDelegate == null)) {
                this.onEndFindLaneDelegate = new EndOperationDelegate(this.OnEndFindLane);
            }
            if ((this.onFindLaneCompletedDelegate == null)) {
                this.onFindLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindLaneCompleted);
            }
            base.InvokeAsync(this.onBeginFindLaneDelegate, new object[] {
                        login,
                        lane_id,
                        lane}, this.onEndFindLaneDelegate, this.onFindLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginEditLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBLane lane, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditLane(login, lane, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndEditLane(System.IAsyncResult result) {
            base.Channel.EndEditLane(result);
        }
        
        private System.IAsyncResult OnBeginEditLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBLane lane = ((MoonlightDrtViewer.MonkeyWrench.DBLane)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginEditLane(login, lane, callback, asyncState);
        }
        
        private object[] OnEndEditLane(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndEditLane(result);
            return null;
        }
        
        private void OnEditLaneCompleted(object state) {
            if ((this.EditLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBLane lane) {
            this.EditLaneAsync(login, lane, null);
        }
        
        public void EditLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBLane lane, object userState) {
            if ((this.onBeginEditLaneDelegate == null)) {
                this.onBeginEditLaneDelegate = new BeginOperationDelegate(this.OnBeginEditLane);
            }
            if ((this.onEndEditLaneDelegate == null)) {
                this.onEndEditLaneDelegate = new EndOperationDelegate(this.OnEndEditLane);
            }
            if ((this.onEditLaneCompletedDelegate == null)) {
                this.onEditLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditLaneCompleted);
            }
            base.InvokeAsync(this.onBeginEditLaneDelegate, new object[] {
                        login,
                        lane}, this.onEndEditLaneDelegate, this.onEditLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginEditHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBHost host, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditHost(login, host, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndEditHost(System.IAsyncResult result) {
            base.Channel.EndEditHost(result);
        }
        
        private System.IAsyncResult OnBeginEditHost(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBHost host = ((MoonlightDrtViewer.MonkeyWrench.DBHost)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginEditHost(login, host, callback, asyncState);
        }
        
        private object[] OnEndEditHost(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndEditHost(result);
            return null;
        }
        
        private void OnEditHostCompleted(object state) {
            if ((this.EditHostCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditHostCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBHost host) {
            this.EditHostAsync(login, host, null);
        }
        
        public void EditHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBHost host, object userState) {
            if ((this.onBeginEditHostDelegate == null)) {
                this.onBeginEditHostDelegate = new BeginOperationDelegate(this.OnBeginEditHost);
            }
            if ((this.onEndEditHostDelegate == null)) {
                this.onEndEditHostDelegate = new EndOperationDelegate(this.OnEndEditHost);
            }
            if ((this.onEditHostCompletedDelegate == null)) {
                this.onEditHostCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditHostCompleted);
            }
            base.InvokeAsync(this.onBeginEditHostDelegate, new object[] {
                        login,
                        host}, this.onEndEditHostDelegate, this.onEditHostCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginEditHostWithPassword(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBHost host, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditHostWithPassword(login, host, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndEditHostWithPassword(System.IAsyncResult result) {
            base.Channel.EndEditHostWithPassword(result);
        }
        
        private System.IAsyncResult OnBeginEditHostWithPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBHost host = ((MoonlightDrtViewer.MonkeyWrench.DBHost)(inValues[1]));
            string password = ((string)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginEditHostWithPassword(login, host, password, callback, asyncState);
        }
        
        private object[] OnEndEditHostWithPassword(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndEditHostWithPassword(result);
            return null;
        }
        
        private void OnEditHostWithPasswordCompleted(object state) {
            if ((this.EditHostWithPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditHostWithPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditHostWithPasswordAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBHost host, string password) {
            this.EditHostWithPasswordAsync(login, host, password, null);
        }
        
        public void EditHostWithPasswordAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBHost host, string password, object userState) {
            if ((this.onBeginEditHostWithPasswordDelegate == null)) {
                this.onBeginEditHostWithPasswordDelegate = new BeginOperationDelegate(this.OnBeginEditHostWithPassword);
            }
            if ((this.onEndEditHostWithPasswordDelegate == null)) {
                this.onEndEditHostWithPasswordDelegate = new EndOperationDelegate(this.OnEndEditHostWithPassword);
            }
            if ((this.onEditHostWithPasswordCompletedDelegate == null)) {
                this.onEditHostWithPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditHostWithPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginEditHostWithPasswordDelegate, new object[] {
                        login,
                        host,
                        password}, this.onEndEditHostWithPasswordDelegate, this.onEditHostWithPasswordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetViewLaneData(MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetViewLaneData(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetViewLaneData(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> revision_id, string revision, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataRequest inValue = new MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataRequest();
            inValue.login = login;
            inValue.lane_id = lane_id;
            inValue.lane = lane;
            inValue.host_id = host_id;
            inValue.host = host;
            inValue.revision_id = revision_id;
            inValue.revision = revision;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetViewLaneData(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse1 MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetViewLaneData(System.IAsyncResult result) {
            return base.Channel.EndGetViewLaneData(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse EndGetViewLaneData(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse1 retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetViewLaneData(result);
            return retVal.GetViewLaneDataResult;
        }
        
        private System.IAsyncResult OnBeginGetViewLaneData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> lane_id = ((System.Nullable<int>)(inValues[1]));
            string lane = ((string)(inValues[2]));
            System.Nullable<int> host_id = ((System.Nullable<int>)(inValues[3]));
            string host = ((string)(inValues[4]));
            System.Nullable<int> revision_id = ((System.Nullable<int>)(inValues[5]));
            string revision = ((string)(inValues[6]));
            return this.BeginGetViewLaneData(login, lane_id, lane, host_id, host, revision_id, revision, callback, asyncState);
        }
        
        private object[] OnEndGetViewLaneData(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse retVal = this.EndGetViewLaneData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetViewLaneDataCompleted(object state) {
            if ((this.GetViewLaneDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetViewLaneDataCompleted(this, new GetViewLaneDataCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetViewLaneDataAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> revision_id, string revision) {
            this.GetViewLaneDataAsync(login, lane_id, lane, host_id, host, revision_id, revision, null);
        }
        
        public void GetViewLaneDataAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> revision_id, string revision, object userState) {
            if ((this.onBeginGetViewLaneDataDelegate == null)) {
                this.onBeginGetViewLaneDataDelegate = new BeginOperationDelegate(this.OnBeginGetViewLaneData);
            }
            if ((this.onEndGetViewLaneDataDelegate == null)) {
                this.onEndGetViewLaneDataDelegate = new EndOperationDelegate(this.OnEndGetViewLaneData);
            }
            if ((this.onGetViewLaneDataCompletedDelegate == null)) {
                this.onGetViewLaneDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetViewLaneDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetViewLaneDataDelegate, new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        revision_id,
                        revision}, this.onEndGetViewLaneDataDelegate, this.onGetViewLaneDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetViewLaneData2(MoonlightDrtViewer.MonkeyWrench.GetViewLaneData2Request request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetViewLaneData2(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetViewLaneData2(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> revision_id, string revision, bool include_hidden_files, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.GetViewLaneData2Request inValue = new MoonlightDrtViewer.MonkeyWrench.GetViewLaneData2Request();
            inValue.login = login;
            inValue.lane_id = lane_id;
            inValue.lane = lane;
            inValue.host_id = host_id;
            inValue.host = host;
            inValue.revision_id = revision_id;
            inValue.revision = revision;
            inValue.include_hidden_files = include_hidden_files;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetViewLaneData2(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetViewLaneData2Response MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetViewLaneData2(System.IAsyncResult result) {
            return base.Channel.EndGetViewLaneData2(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse EndGetViewLaneData2(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetViewLaneData2Response retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetViewLaneData2(result);
            return retVal.GetViewLaneData2Result;
        }
        
        private System.IAsyncResult OnBeginGetViewLaneData2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> lane_id = ((System.Nullable<int>)(inValues[1]));
            string lane = ((string)(inValues[2]));
            System.Nullable<int> host_id = ((System.Nullable<int>)(inValues[3]));
            string host = ((string)(inValues[4]));
            System.Nullable<int> revision_id = ((System.Nullable<int>)(inValues[5]));
            string revision = ((string)(inValues[6]));
            bool include_hidden_files = ((bool)(inValues[7]));
            return this.BeginGetViewLaneData2(login, lane_id, lane, host_id, host, revision_id, revision, include_hidden_files, callback, asyncState);
        }
        
        private object[] OnEndGetViewLaneData2(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse retVal = this.EndGetViewLaneData2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetViewLaneData2Completed(object state) {
            if ((this.GetViewLaneData2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetViewLaneData2Completed(this, new GetViewLaneData2CompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetViewLaneData2Async(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> revision_id, string revision, bool include_hidden_files) {
            this.GetViewLaneData2Async(login, lane_id, lane, host_id, host, revision_id, revision, include_hidden_files, null);
        }
        
        public void GetViewLaneData2Async(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> revision_id, string revision, bool include_hidden_files, object userState) {
            if ((this.onBeginGetViewLaneData2Delegate == null)) {
                this.onBeginGetViewLaneData2Delegate = new BeginOperationDelegate(this.OnBeginGetViewLaneData2);
            }
            if ((this.onEndGetViewLaneData2Delegate == null)) {
                this.onEndGetViewLaneData2Delegate = new EndOperationDelegate(this.OnEndGetViewLaneData2);
            }
            if ((this.onGetViewLaneData2CompletedDelegate == null)) {
                this.onGetViewLaneData2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetViewLaneData2Completed);
            }
            base.InvokeAsync(this.onBeginGetViewLaneData2Delegate, new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        revision_id,
                        revision,
                        include_hidden_files}, this.onEndGetViewLaneData2Delegate, this.onGetViewLaneData2CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetFrontPageData(MoonlightDrtViewer.MonkeyWrench.GetFrontPageDataRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFrontPageData(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetFrontPageData(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int limit, string lane, System.Nullable<int> lane_id, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.GetFrontPageDataRequest inValue = new MoonlightDrtViewer.MonkeyWrench.GetFrontPageDataRequest();
            inValue.login = login;
            inValue.limit = limit;
            inValue.lane = lane;
            inValue.lane_id = lane_id;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetFrontPageData(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetFrontPageDataResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetFrontPageData(System.IAsyncResult result) {
            return base.Channel.EndGetFrontPageData(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.FrontPageResponse EndGetFrontPageData(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetFrontPageDataResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetFrontPageData(result);
            return retVal.GetFrontPageDataResult;
        }
        
        private System.IAsyncResult OnBeginGetFrontPageData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int limit = ((int)(inValues[1]));
            string lane = ((string)(inValues[2]));
            System.Nullable<int> lane_id = ((System.Nullable<int>)(inValues[3]));
            return this.BeginGetFrontPageData(login, limit, lane, lane_id, callback, asyncState);
        }
        
        private object[] OnEndGetFrontPageData(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.FrontPageResponse retVal = this.EndGetFrontPageData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFrontPageDataCompleted(object state) {
            if ((this.GetFrontPageDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFrontPageDataCompleted(this, new GetFrontPageDataCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFrontPageDataAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int limit, string lane, System.Nullable<int> lane_id) {
            this.GetFrontPageDataAsync(login, limit, lane, lane_id, null);
        }
        
        public void GetFrontPageDataAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int limit, string lane, System.Nullable<int> lane_id, object userState) {
            if ((this.onBeginGetFrontPageDataDelegate == null)) {
                this.onBeginGetFrontPageDataDelegate = new BeginOperationDelegate(this.OnBeginGetFrontPageData);
            }
            if ((this.onEndGetFrontPageDataDelegate == null)) {
                this.onEndGetFrontPageDataDelegate = new EndOperationDelegate(this.OnEndGetFrontPageData);
            }
            if ((this.onGetFrontPageDataCompletedDelegate == null)) {
                this.onGetFrontPageDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFrontPageDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetFrontPageDataDelegate, new object[] {
                        login,
                        limit,
                        lane,
                        lane_id}, this.onEndGetFrontPageDataDelegate, this.onGetFrontPageDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetFrontPageData2(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int limit, string[] lanes, int[] lane_ids, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFrontPageData2(login, limit, lanes, lane_ids, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.FrontPageResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetFrontPageData2(System.IAsyncResult result) {
            return base.Channel.EndGetFrontPageData2(result);
        }
        
        private System.IAsyncResult OnBeginGetFrontPageData2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int limit = ((int)(inValues[1]));
            string[] lanes = ((string[])(inValues[2]));
            int[] lane_ids = ((int[])(inValues[3]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetFrontPageData2(login, limit, lanes, lane_ids, callback, asyncState);
        }
        
        private object[] OnEndGetFrontPageData2(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.FrontPageResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetFrontPageData2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFrontPageData2Completed(object state) {
            if ((this.GetFrontPageData2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFrontPageData2Completed(this, new GetFrontPageData2CompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFrontPageData2Async(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int limit, string[] lanes, int[] lane_ids) {
            this.GetFrontPageData2Async(login, limit, lanes, lane_ids, null);
        }
        
        public void GetFrontPageData2Async(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int limit, string[] lanes, int[] lane_ids, object userState) {
            if ((this.onBeginGetFrontPageData2Delegate == null)) {
                this.onBeginGetFrontPageData2Delegate = new BeginOperationDelegate(this.OnBeginGetFrontPageData2);
            }
            if ((this.onEndGetFrontPageData2Delegate == null)) {
                this.onEndGetFrontPageData2Delegate = new EndOperationDelegate(this.OnEndGetFrontPageData2);
            }
            if ((this.onGetFrontPageData2CompletedDelegate == null)) {
                this.onGetFrontPageData2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFrontPageData2Completed);
            }
            base.InvokeAsync(this.onBeginGetFrontPageData2Delegate, new object[] {
                        login,
                        limit,
                        lanes,
                        lane_ids}, this.onEndGetFrontPageData2Delegate, this.onGetFrontPageData2CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetLanes(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLanes(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetLanesResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetLanes(System.IAsyncResult result) {
            return base.Channel.EndGetLanes(result);
        }
        
        private System.IAsyncResult OnBeginGetLanes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetLanes(login, callback, asyncState);
        }
        
        private object[] OnEndGetLanes(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetLanesResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetLanes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLanesCompleted(object state) {
            if ((this.GetLanesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLanesCompleted(this, new GetLanesCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLanesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.GetLanesAsync(login, null);
        }
        
        public void GetLanesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginGetLanesDelegate == null)) {
                this.onBeginGetLanesDelegate = new BeginOperationDelegate(this.OnBeginGetLanes);
            }
            if ((this.onEndGetLanesDelegate == null)) {
                this.onEndGetLanesDelegate = new EndOperationDelegate(this.OnEndGetLanes);
            }
            if ((this.onGetLanesCompletedDelegate == null)) {
                this.onGetLanesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLanesCompleted);
            }
            base.InvokeAsync(this.onBeginGetLanesDelegate, new object[] {
                        login}, this.onEndGetLanesDelegate, this.onGetLanesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetHostLanes(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHostLanes(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetHostLanesResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetHostLanes(System.IAsyncResult result) {
            return base.Channel.EndGetHostLanes(result);
        }
        
        private System.IAsyncResult OnBeginGetHostLanes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetHostLanes(login, callback, asyncState);
        }
        
        private object[] OnEndGetHostLanes(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetHostLanesResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetHostLanes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHostLanesCompleted(object state) {
            if ((this.GetHostLanesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHostLanesCompleted(this, new GetHostLanesCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHostLanesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.GetHostLanesAsync(login, null);
        }
        
        public void GetHostLanesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginGetHostLanesDelegate == null)) {
                this.onBeginGetHostLanesDelegate = new BeginOperationDelegate(this.OnBeginGetHostLanes);
            }
            if ((this.onEndGetHostLanesDelegate == null)) {
                this.onEndGetHostLanesDelegate = new EndOperationDelegate(this.OnEndGetHostLanes);
            }
            if ((this.onGetHostLanesCompletedDelegate == null)) {
                this.onGetHostLanesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHostLanesCompleted);
            }
            base.InvokeAsync(this.onBeginGetHostLanesDelegate, new object[] {
                        login}, this.onEndGetHostLanesDelegate, this.onGetHostLanesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetHosts(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHosts(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetHostsResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetHosts(System.IAsyncResult result) {
            return base.Channel.EndGetHosts(result);
        }
        
        private System.IAsyncResult OnBeginGetHosts(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetHosts(login, callback, asyncState);
        }
        
        private object[] OnEndGetHosts(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetHostsResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetHosts(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHostsCompleted(object state) {
            if ((this.GetHostsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHostsCompleted(this, new GetHostsCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHostsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.GetHostsAsync(login, null);
        }
        
        public void GetHostsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginGetHostsDelegate == null)) {
                this.onBeginGetHostsDelegate = new BeginOperationDelegate(this.OnBeginGetHosts);
            }
            if ((this.onEndGetHostsDelegate == null)) {
                this.onEndGetHostsDelegate = new EndOperationDelegate(this.OnEndGetHosts);
            }
            if ((this.onGetHostsCompletedDelegate == null)) {
                this.onGetHostsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHostsCompleted);
            }
            base.InvokeAsync(this.onBeginGetHostsDelegate, new object[] {
                        login}, this.onEndGetHostsDelegate, this.onGetHostsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetRevisions(MoonlightDrtViewer.MonkeyWrench.GetRevisionsRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRevisions(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetRevisions(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, int limit, int offset, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.GetRevisionsRequest inValue = new MoonlightDrtViewer.MonkeyWrench.GetRevisionsRequest();
            inValue.login = login;
            inValue.lane_id = lane_id;
            inValue.lane = lane;
            inValue.limit = limit;
            inValue.offset = offset;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetRevisions(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetRevisionsResponse1 MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetRevisions(System.IAsyncResult result) {
            return base.Channel.EndGetRevisions(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.GetRevisionsResponse EndGetRevisions(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetRevisionsResponse1 retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetRevisions(result);
            return retVal.GetRevisionsResult;
        }
        
        private System.IAsyncResult OnBeginGetRevisions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> lane_id = ((System.Nullable<int>)(inValues[1]));
            string lane = ((string)(inValues[2]));
            int limit = ((int)(inValues[3]));
            int offset = ((int)(inValues[4]));
            return this.BeginGetRevisions(login, lane_id, lane, limit, offset, callback, asyncState);
        }
        
        private object[] OnEndGetRevisions(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetRevisionsResponse retVal = this.EndGetRevisions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRevisionsCompleted(object state) {
            if ((this.GetRevisionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRevisionsCompleted(this, new GetRevisionsCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRevisionsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, int limit, int offset) {
            this.GetRevisionsAsync(login, lane_id, lane, limit, offset, null);
        }
        
        public void GetRevisionsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, int limit, int offset, object userState) {
            if ((this.onBeginGetRevisionsDelegate == null)) {
                this.onBeginGetRevisionsDelegate = new BeginOperationDelegate(this.OnBeginGetRevisions);
            }
            if ((this.onEndGetRevisionsDelegate == null)) {
                this.onEndGetRevisionsDelegate = new EndOperationDelegate(this.OnEndGetRevisions);
            }
            if ((this.onGetRevisionsCompletedDelegate == null)) {
                this.onGetRevisionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRevisionsCompleted);
            }
            base.InvokeAsync(this.onBeginGetRevisionsDelegate, new object[] {
                        login,
                        lane_id,
                        lane,
                        limit,
                        offset}, this.onEndGetRevisionsDelegate, this.onGetRevisionsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetCommands(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCommands(login, lane_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetCommandsResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetCommands(System.IAsyncResult result) {
            return base.Channel.EndGetCommands(result);
        }
        
        private System.IAsyncResult OnBeginGetCommands(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetCommands(login, lane_id, callback, asyncState);
        }
        
        private object[] OnEndGetCommands(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetCommandsResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetCommands(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCommandsCompleted(object state) {
            if ((this.GetCommandsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCommandsCompleted(this, new GetCommandsCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCommandsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id) {
            this.GetCommandsAsync(login, lane_id, null);
        }
        
        public void GetCommandsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, object userState) {
            if ((this.onBeginGetCommandsDelegate == null)) {
                this.onBeginGetCommandsDelegate = new BeginOperationDelegate(this.OnBeginGetCommands);
            }
            if ((this.onEndGetCommandsDelegate == null)) {
                this.onEndGetCommandsDelegate = new EndOperationDelegate(this.OnEndGetCommands);
            }
            if ((this.onGetCommandsCompletedDelegate == null)) {
                this.onGetCommandsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCommandsCompleted);
            }
            base.InvokeAsync(this.onBeginGetCommandsDelegate, new object[] {
                        login,
                        lane_id}, this.onEndGetCommandsDelegate, this.onGetCommandsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginCloneLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string new_name, bool copy_files, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCloneLane(login, lane_id, new_name, copy_files, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndCloneLane(System.IAsyncResult result) {
            return base.Channel.EndCloneLane(result);
        }
        
        private System.IAsyncResult OnBeginCloneLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            string new_name = ((string)(inValues[2]));
            bool copy_files = ((bool)(inValues[3]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginCloneLane(login, lane_id, new_name, copy_files, callback, asyncState);
        }
        
        private object[] OnEndCloneLane(System.IAsyncResult result) {
            int retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndCloneLane(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCloneLaneCompleted(object state) {
            if ((this.CloneLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloneLaneCompleted(this, new CloneLaneCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloneLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string new_name, bool copy_files) {
            this.CloneLaneAsync(login, lane_id, new_name, copy_files, null);
        }
        
        public void CloneLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string new_name, bool copy_files, object userState) {
            if ((this.onBeginCloneLaneDelegate == null)) {
                this.onBeginCloneLaneDelegate = new BeginOperationDelegate(this.OnBeginCloneLane);
            }
            if ((this.onEndCloneLaneDelegate == null)) {
                this.onEndCloneLaneDelegate = new EndOperationDelegate(this.OnEndCloneLane);
            }
            if ((this.onCloneLaneCompletedDelegate == null)) {
                this.onCloneLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloneLaneCompleted);
            }
            base.InvokeAsync(this.onBeginCloneLaneDelegate, new object[] {
                        login,
                        lane_id,
                        new_name,
                        copy_files}, this.onEndCloneLaneDelegate, this.onCloneLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginDeleteLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteLane(login, lane_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndDeleteLane(System.IAsyncResult result) {
            base.Channel.EndDeleteLane(result);
        }
        
        private System.IAsyncResult OnBeginDeleteLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginDeleteLane(login, lane_id, callback, asyncState);
        }
        
        private object[] OnEndDeleteLane(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndDeleteLane(result);
            return null;
        }
        
        private void OnDeleteLaneCompleted(object state) {
            if ((this.DeleteLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteLaneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id) {
            this.DeleteLaneAsync(login, lane_id, null);
        }
        
        public void DeleteLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, object userState) {
            if ((this.onBeginDeleteLaneDelegate == null)) {
                this.onBeginDeleteLaneDelegate = new BeginOperationDelegate(this.OnBeginDeleteLane);
            }
            if ((this.onEndDeleteLaneDelegate == null)) {
                this.onEndDeleteLaneDelegate = new EndOperationDelegate(this.OnEndDeleteLane);
            }
            if ((this.onDeleteLaneCompletedDelegate == null)) {
                this.onDeleteLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteLaneCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteLaneDelegate, new object[] {
                        login,
                        lane_id}, this.onEndDeleteLaneDelegate, this.onDeleteLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginAddLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string lane, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddLane(login, lane, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndAddLane(System.IAsyncResult result) {
            return base.Channel.EndAddLane(result);
        }
        
        private System.IAsyncResult OnBeginAddLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            string lane = ((string)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginAddLane(login, lane, callback, asyncState);
        }
        
        private object[] OnEndAddLane(System.IAsyncResult result) {
            int retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndAddLane(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddLaneCompleted(object state) {
            if ((this.AddLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddLaneCompleted(this, new AddLaneCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string lane) {
            this.AddLaneAsync(login, lane, null);
        }
        
        public void AddLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string lane, object userState) {
            if ((this.onBeginAddLaneDelegate == null)) {
                this.onBeginAddLaneDelegate = new BeginOperationDelegate(this.OnBeginAddLane);
            }
            if ((this.onEndAddLaneDelegate == null)) {
                this.onEndAddLaneDelegate = new EndOperationDelegate(this.OnEndAddLane);
            }
            if ((this.onAddLaneCompletedDelegate == null)) {
                this.onAddLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddLaneCompleted);
            }
            base.InvokeAsync(this.onBeginAddLaneDelegate, new object[] {
                        login,
                        lane}, this.onEndAddLaneDelegate, this.onAddLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginDeleteHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteHost(login, host_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndDeleteHost(System.IAsyncResult result) {
            base.Channel.EndDeleteHost(result);
        }
        
        private System.IAsyncResult OnBeginDeleteHost(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int host_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginDeleteHost(login, host_id, callback, asyncState);
        }
        
        private object[] OnEndDeleteHost(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndDeleteHost(result);
            return null;
        }
        
        private void OnDeleteHostCompleted(object state) {
            if ((this.DeleteHostCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteHostCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id) {
            this.DeleteHostAsync(login, host_id, null);
        }
        
        public void DeleteHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, object userState) {
            if ((this.onBeginDeleteHostDelegate == null)) {
                this.onBeginDeleteHostDelegate = new BeginOperationDelegate(this.OnBeginDeleteHost);
            }
            if ((this.onEndDeleteHostDelegate == null)) {
                this.onEndDeleteHostDelegate = new EndOperationDelegate(this.OnEndDeleteHost);
            }
            if ((this.onDeleteHostCompletedDelegate == null)) {
                this.onDeleteHostCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteHostCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteHostDelegate, new object[] {
                        login,
                        host_id}, this.onEndDeleteHostDelegate, this.onDeleteHostCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginAddHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddHost(login, host, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndAddHost(System.IAsyncResult result) {
            return base.Channel.EndAddHost(result);
        }
        
        private System.IAsyncResult OnBeginAddHost(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            string host = ((string)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginAddHost(login, host, callback, asyncState);
        }
        
        private object[] OnEndAddHost(System.IAsyncResult result) {
            int retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndAddHost(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddHostCompleted(object state) {
            if ((this.AddHostCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddHostCompleted(this, new AddHostCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host) {
            this.AddHostAsync(login, host, null);
        }
        
        public void AddHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, object userState) {
            if ((this.onBeginAddHostDelegate == null)) {
                this.onBeginAddHostDelegate = new BeginOperationDelegate(this.OnBeginAddHost);
            }
            if ((this.onEndAddHostDelegate == null)) {
                this.onEndAddHostDelegate = new EndOperationDelegate(this.OnEndAddHost);
            }
            if ((this.onAddHostCompletedDelegate == null)) {
                this.onAddHostCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddHostCompleted);
            }
            base.InvokeAsync(this.onBeginAddHostDelegate, new object[] {
                        login,
                        host}, this.onEndAddHostDelegate, this.onAddHostCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginClearRevision(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClearRevision(login, lane_id, host_id, revision_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndClearRevision(System.IAsyncResult result) {
            base.Channel.EndClearRevision(result);
        }
        
        private System.IAsyncResult OnBeginClearRevision(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            int host_id = ((int)(inValues[2]));
            int revision_id = ((int)(inValues[3]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginClearRevision(login, lane_id, host_id, revision_id, callback, asyncState);
        }
        
        private object[] OnEndClearRevision(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndClearRevision(result);
            return null;
        }
        
        private void OnClearRevisionCompleted(object state) {
            if ((this.ClearRevisionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClearRevisionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClearRevisionAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id) {
            this.ClearRevisionAsync(login, lane_id, host_id, revision_id, null);
        }
        
        public void ClearRevisionAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, object userState) {
            if ((this.onBeginClearRevisionDelegate == null)) {
                this.onBeginClearRevisionDelegate = new BeginOperationDelegate(this.OnBeginClearRevision);
            }
            if ((this.onEndClearRevisionDelegate == null)) {
                this.onEndClearRevisionDelegate = new EndOperationDelegate(this.OnEndClearRevision);
            }
            if ((this.onClearRevisionCompletedDelegate == null)) {
                this.onClearRevisionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClearRevisionCompleted);
            }
            base.InvokeAsync(this.onBeginClearRevisionDelegate, new object[] {
                        login,
                        lane_id,
                        host_id,
                        revision_id}, this.onEndClearRevisionDelegate, this.onClearRevisionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginRescheduleRevision(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRescheduleRevision(login, lane_id, host_id, revision_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndRescheduleRevision(System.IAsyncResult result) {
            base.Channel.EndRescheduleRevision(result);
        }
        
        private System.IAsyncResult OnBeginRescheduleRevision(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            int host_id = ((int)(inValues[2]));
            int revision_id = ((int)(inValues[3]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginRescheduleRevision(login, lane_id, host_id, revision_id, callback, asyncState);
        }
        
        private object[] OnEndRescheduleRevision(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndRescheduleRevision(result);
            return null;
        }
        
        private void OnRescheduleRevisionCompleted(object state) {
            if ((this.RescheduleRevisionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RescheduleRevisionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RescheduleRevisionAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id) {
            this.RescheduleRevisionAsync(login, lane_id, host_id, revision_id, null);
        }
        
        public void RescheduleRevisionAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, object userState) {
            if ((this.onBeginRescheduleRevisionDelegate == null)) {
                this.onBeginRescheduleRevisionDelegate = new BeginOperationDelegate(this.OnBeginRescheduleRevision);
            }
            if ((this.onEndRescheduleRevisionDelegate == null)) {
                this.onEndRescheduleRevisionDelegate = new EndOperationDelegate(this.OnEndRescheduleRevision);
            }
            if ((this.onRescheduleRevisionCompletedDelegate == null)) {
                this.onRescheduleRevisionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRescheduleRevisionCompleted);
            }
            base.InvokeAsync(this.onBeginRescheduleRevisionDelegate, new object[] {
                        login,
                        lane_id,
                        host_id,
                        revision_id}, this.onEndRescheduleRevisionDelegate, this.onRescheduleRevisionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginClearAllWorkForHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClearAllWorkForHost(login, host_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndClearAllWorkForHost(System.IAsyncResult result) {
            return base.Channel.EndClearAllWorkForHost(result);
        }
        
        private System.IAsyncResult OnBeginClearAllWorkForHost(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int host_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginClearAllWorkForHost(login, host_id, callback, asyncState);
        }
        
        private object[] OnEndClearAllWorkForHost(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndClearAllWorkForHost(result);
            return new object[] {
                    retVal};
        }
        
        private void OnClearAllWorkForHostCompleted(object state) {
            if ((this.ClearAllWorkForHostCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClearAllWorkForHostCompleted(this, new ClearAllWorkForHostCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClearAllWorkForHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id) {
            this.ClearAllWorkForHostAsync(login, host_id, null);
        }
        
        public void ClearAllWorkForHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, object userState) {
            if ((this.onBeginClearAllWorkForHostDelegate == null)) {
                this.onBeginClearAllWorkForHostDelegate = new BeginOperationDelegate(this.OnBeginClearAllWorkForHost);
            }
            if ((this.onEndClearAllWorkForHostDelegate == null)) {
                this.onEndClearAllWorkForHostDelegate = new EndOperationDelegate(this.OnEndClearAllWorkForHost);
            }
            if ((this.onClearAllWorkForHostCompletedDelegate == null)) {
                this.onClearAllWorkForHostCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClearAllWorkForHostCompleted);
            }
            base.InvokeAsync(this.onBeginClearAllWorkForHostDelegate, new object[] {
                        login,
                        host_id}, this.onEndClearAllWorkForHostDelegate, this.onClearAllWorkForHostCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginClearAllWorkForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClearAllWorkForLane(login, lane_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndClearAllWorkForLane(System.IAsyncResult result) {
            return base.Channel.EndClearAllWorkForLane(result);
        }
        
        private System.IAsyncResult OnBeginClearAllWorkForLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginClearAllWorkForLane(login, lane_id, callback, asyncState);
        }
        
        private object[] OnEndClearAllWorkForLane(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndClearAllWorkForLane(result);
            return new object[] {
                    retVal};
        }
        
        private void OnClearAllWorkForLaneCompleted(object state) {
            if ((this.ClearAllWorkForLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClearAllWorkForLaneCompleted(this, new ClearAllWorkForLaneCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClearAllWorkForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id) {
            this.ClearAllWorkForLaneAsync(login, lane_id, null);
        }
        
        public void ClearAllWorkForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, object userState) {
            if ((this.onBeginClearAllWorkForLaneDelegate == null)) {
                this.onBeginClearAllWorkForLaneDelegate = new BeginOperationDelegate(this.OnBeginClearAllWorkForLane);
            }
            if ((this.onEndClearAllWorkForLaneDelegate == null)) {
                this.onEndClearAllWorkForLaneDelegate = new EndOperationDelegate(this.OnEndClearAllWorkForLane);
            }
            if ((this.onClearAllWorkForLaneCompletedDelegate == null)) {
                this.onClearAllWorkForLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClearAllWorkForLaneCompleted);
            }
            base.InvokeAsync(this.onBeginClearAllWorkForLaneDelegate, new object[] {
                        login,
                        lane_id}, this.onEndClearAllWorkForLaneDelegate, this.onClearAllWorkForLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginDeleteAllWorkForHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteAllWorkForHost(login, host_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndDeleteAllWorkForHost(System.IAsyncResult result) {
            return base.Channel.EndDeleteAllWorkForHost(result);
        }
        
        private System.IAsyncResult OnBeginDeleteAllWorkForHost(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int host_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginDeleteAllWorkForHost(login, host_id, callback, asyncState);
        }
        
        private object[] OnEndDeleteAllWorkForHost(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndDeleteAllWorkForHost(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteAllWorkForHostCompleted(object state) {
            if ((this.DeleteAllWorkForHostCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteAllWorkForHostCompleted(this, new DeleteAllWorkForHostCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteAllWorkForHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id) {
            this.DeleteAllWorkForHostAsync(login, host_id, null);
        }
        
        public void DeleteAllWorkForHostAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, object userState) {
            if ((this.onBeginDeleteAllWorkForHostDelegate == null)) {
                this.onBeginDeleteAllWorkForHostDelegate = new BeginOperationDelegate(this.OnBeginDeleteAllWorkForHost);
            }
            if ((this.onEndDeleteAllWorkForHostDelegate == null)) {
                this.onEndDeleteAllWorkForHostDelegate = new EndOperationDelegate(this.OnEndDeleteAllWorkForHost);
            }
            if ((this.onDeleteAllWorkForHostCompletedDelegate == null)) {
                this.onDeleteAllWorkForHostCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteAllWorkForHostCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteAllWorkForHostDelegate, new object[] {
                        login,
                        host_id}, this.onEndDeleteAllWorkForHostDelegate, this.onDeleteAllWorkForHostCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginDeleteAllWorkForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteAllWorkForLane(login, lane_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndDeleteAllWorkForLane(System.IAsyncResult result) {
            return base.Channel.EndDeleteAllWorkForLane(result);
        }
        
        private System.IAsyncResult OnBeginDeleteAllWorkForLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginDeleteAllWorkForLane(login, lane_id, callback, asyncState);
        }
        
        private object[] OnEndDeleteAllWorkForLane(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndDeleteAllWorkForLane(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteAllWorkForLaneCompleted(object state) {
            if ((this.DeleteAllWorkForLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteAllWorkForLaneCompleted(this, new DeleteAllWorkForLaneCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteAllWorkForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id) {
            this.DeleteAllWorkForLaneAsync(login, lane_id, null);
        }
        
        public void DeleteAllWorkForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, object userState) {
            if ((this.onBeginDeleteAllWorkForLaneDelegate == null)) {
                this.onBeginDeleteAllWorkForLaneDelegate = new BeginOperationDelegate(this.OnBeginDeleteAllWorkForLane);
            }
            if ((this.onEndDeleteAllWorkForLaneDelegate == null)) {
                this.onEndDeleteAllWorkForLaneDelegate = new EndOperationDelegate(this.OnEndDeleteAllWorkForLane);
            }
            if ((this.onDeleteAllWorkForLaneCompletedDelegate == null)) {
                this.onDeleteAllWorkForLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteAllWorkForLaneCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteAllWorkForLaneDelegate, new object[] {
                        login,
                        lane_id}, this.onEndDeleteAllWorkForLaneDelegate, this.onDeleteAllWorkForLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginDeleteAllRevisionsForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteAllRevisionsForLane(login, lane_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndDeleteAllRevisionsForLane(System.IAsyncResult result) {
            return base.Channel.EndDeleteAllRevisionsForLane(result);
        }
        
        private System.IAsyncResult OnBeginDeleteAllRevisionsForLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginDeleteAllRevisionsForLane(login, lane_id, callback, asyncState);
        }
        
        private object[] OnEndDeleteAllRevisionsForLane(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndDeleteAllRevisionsForLane(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteAllRevisionsForLaneCompleted(object state) {
            if ((this.DeleteAllRevisionsForLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteAllRevisionsForLaneCompleted(this, new DeleteAllRevisionsForLaneCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteAllRevisionsForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id) {
            this.DeleteAllRevisionsForLaneAsync(login, lane_id, null);
        }
        
        public void DeleteAllRevisionsForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, object userState) {
            if ((this.onBeginDeleteAllRevisionsForLaneDelegate == null)) {
                this.onBeginDeleteAllRevisionsForLaneDelegate = new BeginOperationDelegate(this.OnBeginDeleteAllRevisionsForLane);
            }
            if ((this.onEndDeleteAllRevisionsForLaneDelegate == null)) {
                this.onEndDeleteAllRevisionsForLaneDelegate = new EndOperationDelegate(this.OnEndDeleteAllRevisionsForLane);
            }
            if ((this.onDeleteAllRevisionsForLaneCompletedDelegate == null)) {
                this.onDeleteAllRevisionsForLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteAllRevisionsForLaneCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteAllRevisionsForLaneDelegate, new object[] {
                        login,
                        lane_id}, this.onEndDeleteAllRevisionsForLaneDelegate, this.onDeleteAllRevisionsForLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginAbortRevision(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAbortRevision(login, lane_id, host_id, revision_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndAbortRevision(System.IAsyncResult result) {
            base.Channel.EndAbortRevision(result);
        }
        
        private System.IAsyncResult OnBeginAbortRevision(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            int host_id = ((int)(inValues[2]));
            int revision_id = ((int)(inValues[3]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginAbortRevision(login, lane_id, host_id, revision_id, callback, asyncState);
        }
        
        private object[] OnEndAbortRevision(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndAbortRevision(result);
            return null;
        }
        
        private void OnAbortRevisionCompleted(object state) {
            if ((this.AbortRevisionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AbortRevisionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AbortRevisionAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id) {
            this.AbortRevisionAsync(login, lane_id, host_id, revision_id, null);
        }
        
        public void AbortRevisionAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, object userState) {
            if ((this.onBeginAbortRevisionDelegate == null)) {
                this.onBeginAbortRevisionDelegate = new BeginOperationDelegate(this.OnBeginAbortRevision);
            }
            if ((this.onEndAbortRevisionDelegate == null)) {
                this.onEndAbortRevisionDelegate = new EndOperationDelegate(this.OnEndAbortRevision);
            }
            if ((this.onAbortRevisionCompletedDelegate == null)) {
                this.onAbortRevisionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAbortRevisionCompleted);
            }
            base.InvokeAsync(this.onBeginAbortRevisionDelegate, new object[] {
                        login,
                        lane_id,
                        host_id,
                        revision_id}, this.onEndAbortRevisionDelegate, this.onAbortRevisionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginClearWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClearWork(login, work_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndClearWork(System.IAsyncResult result) {
            base.Channel.EndClearWork(result);
        }
        
        private System.IAsyncResult OnBeginClearWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int work_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginClearWork(login, work_id, callback, asyncState);
        }
        
        private object[] OnEndClearWork(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndClearWork(result);
            return null;
        }
        
        private void OnClearWorkCompleted(object state) {
            if ((this.ClearWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClearWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClearWorkAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id) {
            this.ClearWorkAsync(login, work_id, null);
        }
        
        public void ClearWorkAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, object userState) {
            if ((this.onBeginClearWorkDelegate == null)) {
                this.onBeginClearWorkDelegate = new BeginOperationDelegate(this.OnBeginClearWork);
            }
            if ((this.onEndClearWorkDelegate == null)) {
                this.onEndClearWorkDelegate = new EndOperationDelegate(this.OnEndClearWork);
            }
            if ((this.onClearWorkCompletedDelegate == null)) {
                this.onClearWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClearWorkCompleted);
            }
            base.InvokeAsync(this.onBeginClearWorkDelegate, new object[] {
                        login,
                        work_id}, this.onEndClearWorkDelegate, this.onClearWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginAbortWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAbortWork(login, work_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndAbortWork(System.IAsyncResult result) {
            base.Channel.EndAbortWork(result);
        }
        
        private System.IAsyncResult OnBeginAbortWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int work_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginAbortWork(login, work_id, callback, asyncState);
        }
        
        private object[] OnEndAbortWork(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndAbortWork(result);
            return null;
        }
        
        private void OnAbortWorkCompleted(object state) {
            if ((this.AbortWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AbortWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AbortWorkAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id) {
            this.AbortWorkAsync(login, work_id, null);
        }
        
        public void AbortWorkAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, object userState) {
            if ((this.onBeginAbortWorkDelegate == null)) {
                this.onBeginAbortWorkDelegate = new BeginOperationDelegate(this.OnBeginAbortWork);
            }
            if ((this.onEndAbortWorkDelegate == null)) {
                this.onEndAbortWorkDelegate = new EndOperationDelegate(this.OnEndAbortWork);
            }
            if ((this.onAbortWorkCompletedDelegate == null)) {
                this.onAbortWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAbortWorkCompleted);
            }
            base.InvokeAsync(this.onBeginAbortWorkDelegate, new object[] {
                        login,
                        work_id}, this.onEndAbortWorkDelegate, this.onAbortWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginPauseWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPauseWork(login, work_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndPauseWork(System.IAsyncResult result) {
            base.Channel.EndPauseWork(result);
        }
        
        private System.IAsyncResult OnBeginPauseWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int work_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginPauseWork(login, work_id, callback, asyncState);
        }
        
        private object[] OnEndPauseWork(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndPauseWork(result);
            return null;
        }
        
        private void OnPauseWorkCompleted(object state) {
            if ((this.PauseWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PauseWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PauseWorkAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id) {
            this.PauseWorkAsync(login, work_id, null);
        }
        
        public void PauseWorkAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, object userState) {
            if ((this.onBeginPauseWorkDelegate == null)) {
                this.onBeginPauseWorkDelegate = new BeginOperationDelegate(this.OnBeginPauseWork);
            }
            if ((this.onEndPauseWorkDelegate == null)) {
                this.onEndPauseWorkDelegate = new EndOperationDelegate(this.OnEndPauseWork);
            }
            if ((this.onPauseWorkCompletedDelegate == null)) {
                this.onPauseWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPauseWorkCompleted);
            }
            base.InvokeAsync(this.onBeginPauseWorkDelegate, new object[] {
                        login,
                        work_id}, this.onEndPauseWorkDelegate, this.onPauseWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginResumeWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResumeWork(login, work_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndResumeWork(System.IAsyncResult result) {
            base.Channel.EndResumeWork(result);
        }
        
        private System.IAsyncResult OnBeginResumeWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int work_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginResumeWork(login, work_id, callback, asyncState);
        }
        
        private object[] OnEndResumeWork(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndResumeWork(result);
            return null;
        }
        
        private void OnResumeWorkCompleted(object state) {
            if ((this.ResumeWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResumeWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResumeWorkAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id) {
            this.ResumeWorkAsync(login, work_id, null);
        }
        
        public void ResumeWorkAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, object userState) {
            if ((this.onBeginResumeWorkDelegate == null)) {
                this.onBeginResumeWorkDelegate = new BeginOperationDelegate(this.OnBeginResumeWork);
            }
            if ((this.onEndResumeWorkDelegate == null)) {
                this.onEndResumeWorkDelegate = new EndOperationDelegate(this.OnEndResumeWork);
            }
            if ((this.onResumeWorkCompletedDelegate == null)) {
                this.onResumeWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResumeWorkCompleted);
            }
            base.InvokeAsync(this.onBeginResumeWorkDelegate, new object[] {
                        login,
                        work_id}, this.onEndResumeWorkDelegate, this.onResumeWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetViewTableData(MoonlightDrtViewer.MonkeyWrench.GetViewTableDataRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetViewTableData(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetViewTableData(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, int page, int page_size, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.GetViewTableDataRequest inValue = new MoonlightDrtViewer.MonkeyWrench.GetViewTableDataRequest();
            inValue.login = login;
            inValue.lane_id = lane_id;
            inValue.lane = lane;
            inValue.host_id = host_id;
            inValue.host = host;
            inValue.page = page;
            inValue.page_size = page_size;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetViewTableData(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetViewTableDataResponse1 MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetViewTableData(System.IAsyncResult result) {
            return base.Channel.EndGetViewTableData(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.GetViewTableDataResponse EndGetViewTableData(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetViewTableDataResponse1 retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetViewTableData(result);
            return retVal.GetViewTableDataResult;
        }
        
        private System.IAsyncResult OnBeginGetViewTableData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> lane_id = ((System.Nullable<int>)(inValues[1]));
            string lane = ((string)(inValues[2]));
            System.Nullable<int> host_id = ((System.Nullable<int>)(inValues[3]));
            string host = ((string)(inValues[4]));
            int page = ((int)(inValues[5]));
            int page_size = ((int)(inValues[6]));
            return this.BeginGetViewTableData(login, lane_id, lane, host_id, host, page, page_size, callback, asyncState);
        }
        
        private object[] OnEndGetViewTableData(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetViewTableDataResponse retVal = this.EndGetViewTableData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetViewTableDataCompleted(object state) {
            if ((this.GetViewTableDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetViewTableDataCompleted(this, new GetViewTableDataCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetViewTableDataAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, int page, int page_size) {
            this.GetViewTableDataAsync(login, lane_id, lane, host_id, host, page, page_size, null);
        }
        
        public void GetViewTableDataAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, int page, int page_size, object userState) {
            if ((this.onBeginGetViewTableDataDelegate == null)) {
                this.onBeginGetViewTableDataDelegate = new BeginOperationDelegate(this.OnBeginGetViewTableData);
            }
            if ((this.onEndGetViewTableDataDelegate == null)) {
                this.onEndGetViewTableDataDelegate = new EndOperationDelegate(this.OnEndGetViewTableData);
            }
            if ((this.onGetViewTableDataCompletedDelegate == null)) {
                this.onGetViewTableDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetViewTableDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetViewTableDataDelegate, new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        page,
                        page_size}, this.onEndGetViewTableDataDelegate, this.onGetViewTableDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetViewWorkTableData(MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetViewWorkTableData(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetViewWorkTableData(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> command_id, string command, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataRequest inValue = new MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataRequest();
            inValue.login = login;
            inValue.lane_id = lane_id;
            inValue.lane = lane;
            inValue.host_id = host_id;
            inValue.host = host;
            inValue.command_id = command_id;
            inValue.command = command;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetViewWorkTableData(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse1 MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetViewWorkTableData(System.IAsyncResult result) {
            return base.Channel.EndGetViewWorkTableData(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse EndGetViewWorkTableData(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse1 retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetViewWorkTableData(result);
            return retVal.GetViewWorkTableDataResult;
        }
        
        private System.IAsyncResult OnBeginGetViewWorkTableData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> lane_id = ((System.Nullable<int>)(inValues[1]));
            string lane = ((string)(inValues[2]));
            System.Nullable<int> host_id = ((System.Nullable<int>)(inValues[3]));
            string host = ((string)(inValues[4]));
            System.Nullable<int> command_id = ((System.Nullable<int>)(inValues[5]));
            string command = ((string)(inValues[6]));
            return this.BeginGetViewWorkTableData(login, lane_id, lane, host_id, host, command_id, command, callback, asyncState);
        }
        
        private object[] OnEndGetViewWorkTableData(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse retVal = this.EndGetViewWorkTableData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetViewWorkTableDataCompleted(object state) {
            if ((this.GetViewWorkTableDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetViewWorkTableDataCompleted(this, new GetViewWorkTableDataCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetViewWorkTableDataAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> command_id, string command) {
            this.GetViewWorkTableDataAsync(login, lane_id, lane, host_id, host, command_id, command, null);
        }
        
        public void GetViewWorkTableDataAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> command_id, string command, object userState) {
            if ((this.onBeginGetViewWorkTableDataDelegate == null)) {
                this.onBeginGetViewWorkTableDataDelegate = new BeginOperationDelegate(this.OnBeginGetViewWorkTableData);
            }
            if ((this.onEndGetViewWorkTableDataDelegate == null)) {
                this.onEndGetViewWorkTableDataDelegate = new EndOperationDelegate(this.OnEndGetViewWorkTableData);
            }
            if ((this.onGetViewWorkTableDataCompletedDelegate == null)) {
                this.onGetViewWorkTableDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetViewWorkTableDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetViewWorkTableDataDelegate, new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        command_id,
                        command}, this.onEndGetViewWorkTableDataDelegate, this.onGetViewWorkTableDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetViewWorkTableData2(MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableData2Request request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetViewWorkTableData2(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetViewWorkTableData2(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> command_id, string command, int offset, int limit, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableData2Request inValue = new MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableData2Request();
            inValue.login = login;
            inValue.lane_id = lane_id;
            inValue.lane = lane;
            inValue.host_id = host_id;
            inValue.host = host;
            inValue.command_id = command_id;
            inValue.command = command;
            inValue.offset = offset;
            inValue.limit = limit;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetViewWorkTableData2(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableData2Response MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetViewWorkTableData2(System.IAsyncResult result) {
            return base.Channel.EndGetViewWorkTableData2(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse EndGetViewWorkTableData2(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableData2Response retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetViewWorkTableData2(result);
            return retVal.GetViewWorkTableData2Result;
        }
        
        private System.IAsyncResult OnBeginGetViewWorkTableData2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> lane_id = ((System.Nullable<int>)(inValues[1]));
            string lane = ((string)(inValues[2]));
            System.Nullable<int> host_id = ((System.Nullable<int>)(inValues[3]));
            string host = ((string)(inValues[4]));
            System.Nullable<int> command_id = ((System.Nullable<int>)(inValues[5]));
            string command = ((string)(inValues[6]));
            int offset = ((int)(inValues[7]));
            int limit = ((int)(inValues[8]));
            return this.BeginGetViewWorkTableData2(login, lane_id, lane, host_id, host, command_id, command, offset, limit, callback, asyncState);
        }
        
        private object[] OnEndGetViewWorkTableData2(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse retVal = this.EndGetViewWorkTableData2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetViewWorkTableData2Completed(object state) {
            if ((this.GetViewWorkTableData2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetViewWorkTableData2Completed(this, new GetViewWorkTableData2CompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetViewWorkTableData2Async(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> command_id, string command, int offset, int limit) {
            this.GetViewWorkTableData2Async(login, lane_id, lane, host_id, host, command_id, command, offset, limit, null);
        }
        
        public void GetViewWorkTableData2Async(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> command_id, string command, int offset, int limit, object userState) {
            if ((this.onBeginGetViewWorkTableData2Delegate == null)) {
                this.onBeginGetViewWorkTableData2Delegate = new BeginOperationDelegate(this.OnBeginGetViewWorkTableData2);
            }
            if ((this.onEndGetViewWorkTableData2Delegate == null)) {
                this.onEndGetViewWorkTableData2Delegate = new EndOperationDelegate(this.OnEndGetViewWorkTableData2);
            }
            if ((this.onGetViewWorkTableData2CompletedDelegate == null)) {
                this.onGetViewWorkTableData2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetViewWorkTableData2Completed);
            }
            base.InvokeAsync(this.onBeginGetViewWorkTableData2Delegate, new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        command_id,
                        command,
                        offset,
                        limit}, this.onEndGetViewWorkTableData2Delegate, this.onGetViewWorkTableData2CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetLaneFileForEdit(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanefile_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLaneFileForEdit(login, lanefile_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetLaneFileForEditResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetLaneFileForEdit(System.IAsyncResult result) {
            return base.Channel.EndGetLaneFileForEdit(result);
        }
        
        private System.IAsyncResult OnBeginGetLaneFileForEdit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lanefile_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetLaneFileForEdit(login, lanefile_id, callback, asyncState);
        }
        
        private object[] OnEndGetLaneFileForEdit(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetLaneFileForEditResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetLaneFileForEdit(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLaneFileForEditCompleted(object state) {
            if ((this.GetLaneFileForEditCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLaneFileForEditCompleted(this, new GetLaneFileForEditCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLaneFileForEditAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanefile_id) {
            this.GetLaneFileForEditAsync(login, lanefile_id, null);
        }
        
        public void GetLaneFileForEditAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanefile_id, object userState) {
            if ((this.onBeginGetLaneFileForEditDelegate == null)) {
                this.onBeginGetLaneFileForEditDelegate = new BeginOperationDelegate(this.OnBeginGetLaneFileForEdit);
            }
            if ((this.onEndGetLaneFileForEditDelegate == null)) {
                this.onEndGetLaneFileForEditDelegate = new EndOperationDelegate(this.OnEndGetLaneFileForEdit);
            }
            if ((this.onGetLaneFileForEditCompletedDelegate == null)) {
                this.onGetLaneFileForEditCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLaneFileForEditCompleted);
            }
            base.InvokeAsync(this.onBeginGetLaneFileForEditDelegate, new object[] {
                        login,
                        lanefile_id}, this.onEndGetLaneFileForEditDelegate, this.onGetLaneFileForEditCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginEditLaneFile(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBLanefile lanefile, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditLaneFile(login, lanefile, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndEditLaneFile(System.IAsyncResult result) {
            base.Channel.EndEditLaneFile(result);
        }
        
        private System.IAsyncResult OnBeginEditLaneFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBLanefile lanefile = ((MoonlightDrtViewer.MonkeyWrench.DBLanefile)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginEditLaneFile(login, lanefile, callback, asyncState);
        }
        
        private object[] OnEndEditLaneFile(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndEditLaneFile(result);
            return null;
        }
        
        private void OnEditLaneFileCompleted(object state) {
            if ((this.EditLaneFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditLaneFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditLaneFileAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBLanefile lanefile) {
            this.EditLaneFileAsync(login, lanefile, null);
        }
        
        public void EditLaneFileAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBLanefile lanefile, object userState) {
            if ((this.onBeginEditLaneFileDelegate == null)) {
                this.onBeginEditLaneFileDelegate = new BeginOperationDelegate(this.OnBeginEditLaneFile);
            }
            if ((this.onEndEditLaneFileDelegate == null)) {
                this.onEndEditLaneFileDelegate = new EndOperationDelegate(this.OnEndEditLaneFile);
            }
            if ((this.onEditLaneFileCompletedDelegate == null)) {
                this.onEditLaneFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditLaneFileCompleted);
            }
            base.InvokeAsync(this.onBeginEditLaneFileDelegate, new object[] {
                        login,
                        lanefile}, this.onEndEditLaneFileDelegate, this.onEditLaneFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetViewLaneFileHistoryData(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanefile_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetViewLaneFileHistoryData(login, lanefile_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetViewLaneFileHistoryDataResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetViewLaneFileHistoryData(System.IAsyncResult result) {
            return base.Channel.EndGetViewLaneFileHistoryData(result);
        }
        
        private System.IAsyncResult OnBeginGetViewLaneFileHistoryData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lanefile_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetViewLaneFileHistoryData(login, lanefile_id, callback, asyncState);
        }
        
        private object[] OnEndGetViewLaneFileHistoryData(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetViewLaneFileHistoryDataResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetViewLaneFileHistoryData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetViewLaneFileHistoryDataCompleted(object state) {
            if ((this.GetViewLaneFileHistoryDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetViewLaneFileHistoryDataCompleted(this, new GetViewLaneFileHistoryDataCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetViewLaneFileHistoryDataAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanefile_id) {
            this.GetViewLaneFileHistoryDataAsync(login, lanefile_id, null);
        }
        
        public void GetViewLaneFileHistoryDataAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanefile_id, object userState) {
            if ((this.onBeginGetViewLaneFileHistoryDataDelegate == null)) {
                this.onBeginGetViewLaneFileHistoryDataDelegate = new BeginOperationDelegate(this.OnBeginGetViewLaneFileHistoryData);
            }
            if ((this.onEndGetViewLaneFileHistoryDataDelegate == null)) {
                this.onEndGetViewLaneFileHistoryDataDelegate = new EndOperationDelegate(this.OnEndGetViewLaneFileHistoryData);
            }
            if ((this.onGetViewLaneFileHistoryDataCompletedDelegate == null)) {
                this.onGetViewLaneFileHistoryDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetViewLaneFileHistoryDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetViewLaneFileHistoryDataDelegate, new object[] {
                        login,
                        lanefile_id}, this.onEndGetViewLaneFileHistoryDataDelegate, this.onGetViewLaneFileHistoryDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetUsers(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUsers(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetUsersResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetUsers(System.IAsyncResult result) {
            return base.Channel.EndGetUsers(result);
        }
        
        private System.IAsyncResult OnBeginGetUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetUsers(login, callback, asyncState);
        }
        
        private object[] OnEndGetUsers(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetUsersResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUsersCompleted(object state) {
            if ((this.GetUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUsersCompleted(this, new GetUsersCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUsersAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.GetUsersAsync(login, null);
        }
        
        public void GetUsersAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginGetUsersDelegate == null)) {
                this.onBeginGetUsersDelegate = new BeginOperationDelegate(this.OnBeginGetUsers);
            }
            if ((this.onEndGetUsersDelegate == null)) {
                this.onEndGetUsersDelegate = new EndOperationDelegate(this.OnEndGetUsers);
            }
            if ((this.onGetUsersCompletedDelegate == null)) {
                this.onGetUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUsersCompleted);
            }
            base.InvokeAsync(this.onBeginGetUsersDelegate, new object[] {
                        login}, this.onEndGetUsersDelegate, this.onGetUsersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginDeleteUser(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteUser(login, id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndDeleteUser(System.IAsyncResult result) {
            return base.Channel.EndDeleteUser(result);
        }
        
        private System.IAsyncResult OnBeginDeleteUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginDeleteUser(login, id, callback, asyncState);
        }
        
        private object[] OnEndDeleteUser(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndDeleteUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteUserCompleted(object state) {
            if ((this.DeleteUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteUserCompleted(this, new DeleteUserCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteUserAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id) {
            this.DeleteUserAsync(login, id, null);
        }
        
        public void DeleteUserAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, object userState) {
            if ((this.onBeginDeleteUserDelegate == null)) {
                this.onBeginDeleteUserDelegate = new BeginOperationDelegate(this.OnBeginDeleteUser);
            }
            if ((this.onEndDeleteUserDelegate == null)) {
                this.onEndDeleteUserDelegate = new EndOperationDelegate(this.OnEndDeleteUser);
            }
            if ((this.onDeleteUserCompletedDelegate == null)) {
                this.onDeleteUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteUserCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteUserDelegate, new object[] {
                        login,
                        id}, this.onEndDeleteUserDelegate, this.onDeleteUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginAddUserEmail(MoonlightDrtViewer.MonkeyWrench.AddUserEmailRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddUserEmail(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginAddUserEmail(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> id, string username, string email, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.AddUserEmailRequest inValue = new MoonlightDrtViewer.MonkeyWrench.AddUserEmailRequest();
            inValue.login = login;
            inValue.id = id;
            inValue.username = username;
            inValue.email = email;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginAddUserEmail(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.AddUserEmailResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndAddUserEmail(System.IAsyncResult result) {
            return base.Channel.EndAddUserEmail(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndAddUserEmail(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.AddUserEmailResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndAddUserEmail(result);
            return retVal.AddUserEmailResult;
        }
        
        private System.IAsyncResult OnBeginAddUserEmail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> id = ((System.Nullable<int>)(inValues[1]));
            string username = ((string)(inValues[2]));
            string email = ((string)(inValues[3]));
            return this.BeginAddUserEmail(login, id, username, email, callback, asyncState);
        }
        
        private object[] OnEndAddUserEmail(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = this.EndAddUserEmail(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddUserEmailCompleted(object state) {
            if ((this.AddUserEmailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddUserEmailCompleted(this, new AddUserEmailCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddUserEmailAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> id, string username, string email) {
            this.AddUserEmailAsync(login, id, username, email, null);
        }
        
        public void AddUserEmailAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> id, string username, string email, object userState) {
            if ((this.onBeginAddUserEmailDelegate == null)) {
                this.onBeginAddUserEmailDelegate = new BeginOperationDelegate(this.OnBeginAddUserEmail);
            }
            if ((this.onEndAddUserEmailDelegate == null)) {
                this.onEndAddUserEmailDelegate = new EndOperationDelegate(this.OnEndAddUserEmail);
            }
            if ((this.onAddUserEmailCompletedDelegate == null)) {
                this.onAddUserEmailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddUserEmailCompleted);
            }
            base.InvokeAsync(this.onBeginAddUserEmailDelegate, new object[] {
                        login,
                        id,
                        username,
                        email}, this.onEndAddUserEmailDelegate, this.onAddUserEmailCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginRemoveUserEmail(MoonlightDrtViewer.MonkeyWrench.RemoveUserEmailRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveUserEmail(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginRemoveUserEmail(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> id, string username, string email, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.RemoveUserEmailRequest inValue = new MoonlightDrtViewer.MonkeyWrench.RemoveUserEmailRequest();
            inValue.login = login;
            inValue.id = id;
            inValue.username = username;
            inValue.email = email;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginRemoveUserEmail(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.RemoveUserEmailResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndRemoveUserEmail(System.IAsyncResult result) {
            return base.Channel.EndRemoveUserEmail(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndRemoveUserEmail(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.RemoveUserEmailResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndRemoveUserEmail(result);
            return retVal.RemoveUserEmailResult;
        }
        
        private System.IAsyncResult OnBeginRemoveUserEmail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> id = ((System.Nullable<int>)(inValues[1]));
            string username = ((string)(inValues[2]));
            string email = ((string)(inValues[3]));
            return this.BeginRemoveUserEmail(login, id, username, email, callback, asyncState);
        }
        
        private object[] OnEndRemoveUserEmail(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = this.EndRemoveUserEmail(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveUserEmailCompleted(object state) {
            if ((this.RemoveUserEmailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveUserEmailCompleted(this, new RemoveUserEmailCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveUserEmailAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> id, string username, string email) {
            this.RemoveUserEmailAsync(login, id, username, email, null);
        }
        
        public void RemoveUserEmailAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> id, string username, string email, object userState) {
            if ((this.onBeginRemoveUserEmailDelegate == null)) {
                this.onBeginRemoveUserEmailDelegate = new BeginOperationDelegate(this.OnBeginRemoveUserEmail);
            }
            if ((this.onEndRemoveUserEmailDelegate == null)) {
                this.onEndRemoveUserEmailDelegate = new EndOperationDelegate(this.OnEndRemoveUserEmail);
            }
            if ((this.onRemoveUserEmailCompletedDelegate == null)) {
                this.onRemoveUserEmailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveUserEmailCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveUserEmailDelegate, new object[] {
                        login,
                        id,
                        username,
                        email}, this.onEndRemoveUserEmailDelegate, this.onRemoveUserEmailCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginEditUser(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBPerson user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditUser(login, user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndEditUser(System.IAsyncResult result) {
            return base.Channel.EndEditUser(result);
        }
        
        private System.IAsyncResult OnBeginEditUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBPerson user = ((MoonlightDrtViewer.MonkeyWrench.DBPerson)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginEditUser(login, user, callback, asyncState);
        }
        
        private object[] OnEndEditUser(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndEditUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditUserCompleted(object state) {
            if ((this.EditUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditUserCompleted(this, new EditUserCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditUserAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBPerson user) {
            this.EditUserAsync(login, user, null);
        }
        
        public void EditUserAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBPerson user, object userState) {
            if ((this.onBeginEditUserDelegate == null)) {
                this.onBeginEditUserDelegate = new BeginOperationDelegate(this.OnBeginEditUser);
            }
            if ((this.onEndEditUserDelegate == null)) {
                this.onEndEditUserDelegate = new EndOperationDelegate(this.OnEndEditUser);
            }
            if ((this.onEditUserCompletedDelegate == null)) {
                this.onEditUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditUserCompleted);
            }
            base.InvokeAsync(this.onBeginEditUserDelegate, new object[] {
                        login,
                        user}, this.onEndEditUserDelegate, this.onEditUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetUser(MoonlightDrtViewer.MonkeyWrench.GetUserRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUser(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetUser(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> id, string username, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.GetUserRequest inValue = new MoonlightDrtViewer.MonkeyWrench.GetUserRequest();
            inValue.login = login;
            inValue.id = id;
            inValue.username = username;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetUser(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetUserResponse1 MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetUser(System.IAsyncResult result) {
            return base.Channel.EndGetUser(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.GetUserResponse EndGetUser(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetUserResponse1 retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetUser(result);
            return retVal.GetUserResult;
        }
        
        private System.IAsyncResult OnBeginGetUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> id = ((System.Nullable<int>)(inValues[1]));
            string username = ((string)(inValues[2]));
            return this.BeginGetUser(login, id, username, callback, asyncState);
        }
        
        private object[] OnEndGetUser(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetUserResponse retVal = this.EndGetUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserCompleted(object state) {
            if ((this.GetUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserCompleted(this, new GetUserCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> id, string username) {
            this.GetUserAsync(login, id, username, null);
        }
        
        public void GetUserAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> id, string username, object userState) {
            if ((this.onBeginGetUserDelegate == null)) {
                this.onBeginGetUserDelegate = new BeginOperationDelegate(this.OnBeginGetUser);
            }
            if ((this.onEndGetUserDelegate == null)) {
                this.onEndGetUserDelegate = new EndOperationDelegate(this.OnEndGetUser);
            }
            if ((this.onGetUserCompletedDelegate == null)) {
                this.onGetUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserDelegate, new object[] {
                        login,
                        id,
                        username}, this.onEndGetUserDelegate, this.onGetUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetUploadPort(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUploadPort(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetUploadPort(System.IAsyncResult result) {
            return base.Channel.EndGetUploadPort(result);
        }
        
        private System.IAsyncResult OnBeginGetUploadPort(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetUploadPort(callback, asyncState);
        }
        
        private object[] OnEndGetUploadPort(System.IAsyncResult result) {
            int retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetUploadPort(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUploadPortCompleted(object state) {
            if ((this.GetUploadPortCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUploadPortCompleted(this, new GetUploadPortCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUploadPortAsync() {
            this.GetUploadPortAsync(null);
        }
        
        public void GetUploadPortAsync(object userState) {
            if ((this.onBeginGetUploadPortDelegate == null)) {
                this.onBeginGetUploadPortDelegate = new BeginOperationDelegate(this.OnBeginGetUploadPort);
            }
            if ((this.onEndGetUploadPortDelegate == null)) {
                this.onEndGetUploadPortDelegate = new EndOperationDelegate(this.OnEndGetUploadPort);
            }
            if ((this.onGetUploadPortCompletedDelegate == null)) {
                this.onGetUploadPortCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUploadPortCompleted);
            }
            base.InvokeAsync(this.onBeginGetUploadPortDelegate, null, this.onEndGetUploadPortDelegate, this.onGetUploadPortCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginAddEnvironmentVariable(MoonlightDrtViewer.MonkeyWrench.AddEnvironmentVariableRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddEnvironmentVariable(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginAddEnvironmentVariable(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, System.Nullable<int> host_id, string name, string value, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.AddEnvironmentVariableRequest inValue = new MoonlightDrtViewer.MonkeyWrench.AddEnvironmentVariableRequest();
            inValue.login = login;
            inValue.lane_id = lane_id;
            inValue.host_id = host_id;
            inValue.name = name;
            inValue.value = value;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginAddEnvironmentVariable(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.AddEnvironmentVariableResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndAddEnvironmentVariable(System.IAsyncResult result) {
            return base.Channel.EndAddEnvironmentVariable(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private int EndAddEnvironmentVariable(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.AddEnvironmentVariableResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndAddEnvironmentVariable(result);
            return retVal.AddEnvironmentVariableResult;
        }
        
        private System.IAsyncResult OnBeginAddEnvironmentVariable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> lane_id = ((System.Nullable<int>)(inValues[1]));
            System.Nullable<int> host_id = ((System.Nullable<int>)(inValues[2]));
            string name = ((string)(inValues[3]));
            string value = ((string)(inValues[4]));
            return this.BeginAddEnvironmentVariable(login, lane_id, host_id, name, value, callback, asyncState);
        }
        
        private object[] OnEndAddEnvironmentVariable(System.IAsyncResult result) {
            int retVal = this.EndAddEnvironmentVariable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddEnvironmentVariableCompleted(object state) {
            if ((this.AddEnvironmentVariableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddEnvironmentVariableCompleted(this, new AddEnvironmentVariableCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddEnvironmentVariableAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, System.Nullable<int> host_id, string name, string value) {
            this.AddEnvironmentVariableAsync(login, lane_id, host_id, name, value, null);
        }
        
        public void AddEnvironmentVariableAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, System.Nullable<int> host_id, string name, string value, object userState) {
            if ((this.onBeginAddEnvironmentVariableDelegate == null)) {
                this.onBeginAddEnvironmentVariableDelegate = new BeginOperationDelegate(this.OnBeginAddEnvironmentVariable);
            }
            if ((this.onEndAddEnvironmentVariableDelegate == null)) {
                this.onEndAddEnvironmentVariableDelegate = new EndOperationDelegate(this.OnEndAddEnvironmentVariable);
            }
            if ((this.onAddEnvironmentVariableCompletedDelegate == null)) {
                this.onAddEnvironmentVariableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddEnvironmentVariableCompleted);
            }
            base.InvokeAsync(this.onBeginAddEnvironmentVariableDelegate, new object[] {
                        login,
                        lane_id,
                        host_id,
                        name,
                        value}, this.onEndAddEnvironmentVariableDelegate, this.onAddEnvironmentVariableCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginEditEnvironmentVariable(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBEnvironmentVariable variable, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditEnvironmentVariable(login, variable, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndEditEnvironmentVariable(System.IAsyncResult result) {
            base.Channel.EndEditEnvironmentVariable(result);
        }
        
        private System.IAsyncResult OnBeginEditEnvironmentVariable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBEnvironmentVariable variable = ((MoonlightDrtViewer.MonkeyWrench.DBEnvironmentVariable)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginEditEnvironmentVariable(login, variable, callback, asyncState);
        }
        
        private object[] OnEndEditEnvironmentVariable(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndEditEnvironmentVariable(result);
            return null;
        }
        
        private void OnEditEnvironmentVariableCompleted(object state) {
            if ((this.EditEnvironmentVariableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditEnvironmentVariableCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditEnvironmentVariableAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBEnvironmentVariable variable) {
            this.EditEnvironmentVariableAsync(login, variable, null);
        }
        
        public void EditEnvironmentVariableAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBEnvironmentVariable variable, object userState) {
            if ((this.onBeginEditEnvironmentVariableDelegate == null)) {
                this.onBeginEditEnvironmentVariableDelegate = new BeginOperationDelegate(this.OnBeginEditEnvironmentVariable);
            }
            if ((this.onEndEditEnvironmentVariableDelegate == null)) {
                this.onEndEditEnvironmentVariableDelegate = new EndOperationDelegate(this.OnEndEditEnvironmentVariable);
            }
            if ((this.onEditEnvironmentVariableCompletedDelegate == null)) {
                this.onEditEnvironmentVariableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditEnvironmentVariableCompleted);
            }
            base.InvokeAsync(this.onBeginEditEnvironmentVariableDelegate, new object[] {
                        login,
                        variable}, this.onEndEditEnvironmentVariableDelegate, this.onEditEnvironmentVariableCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginDeleteEnvironmentVariable(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int variable_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteEnvironmentVariable(login, variable_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndDeleteEnvironmentVariable(System.IAsyncResult result) {
            base.Channel.EndDeleteEnvironmentVariable(result);
        }
        
        private System.IAsyncResult OnBeginDeleteEnvironmentVariable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int variable_id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginDeleteEnvironmentVariable(login, variable_id, callback, asyncState);
        }
        
        private object[] OnEndDeleteEnvironmentVariable(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndDeleteEnvironmentVariable(result);
            return null;
        }
        
        private void OnDeleteEnvironmentVariableCompleted(object state) {
            if ((this.DeleteEnvironmentVariableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteEnvironmentVariableCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteEnvironmentVariableAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int variable_id) {
            this.DeleteEnvironmentVariableAsync(login, variable_id, null);
        }
        
        public void DeleteEnvironmentVariableAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int variable_id, object userState) {
            if ((this.onBeginDeleteEnvironmentVariableDelegate == null)) {
                this.onBeginDeleteEnvironmentVariableDelegate = new BeginOperationDelegate(this.OnBeginDeleteEnvironmentVariable);
            }
            if ((this.onEndDeleteEnvironmentVariableDelegate == null)) {
                this.onEndDeleteEnvironmentVariableDelegate = new EndOperationDelegate(this.OnEndDeleteEnvironmentVariable);
            }
            if ((this.onDeleteEnvironmentVariableCompletedDelegate == null)) {
                this.onDeleteEnvironmentVariableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteEnvironmentVariableCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteEnvironmentVariableDelegate, new object[] {
                        login,
                        variable_id}, this.onEndDeleteEnvironmentVariableDelegate, this.onDeleteEnvironmentVariableCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginUploadCompressedFile(MoonlightDrtViewer.MonkeyWrench.UploadCompressedFileRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadCompressedFile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginUploadCompressedFile(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, string filename, byte[] contents, bool hidden, string compressed_mime, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.UploadCompressedFileRequest inValue = new MoonlightDrtViewer.MonkeyWrench.UploadCompressedFileRequest();
            inValue.login = login;
            inValue.work = work;
            inValue.filename = filename;
            inValue.contents = contents;
            inValue.hidden = hidden;
            inValue.compressed_mime = compressed_mime;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginUploadCompressedFile(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.UploadCompressedFileResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndUploadCompressedFile(System.IAsyncResult result) {
            return base.Channel.EndUploadCompressedFile(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private void EndUploadCompressedFile(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.UploadCompressedFileResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndUploadCompressedFile(result);
        }
        
        private System.IAsyncResult OnBeginUploadCompressedFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBWork work = ((MoonlightDrtViewer.MonkeyWrench.DBWork)(inValues[1]));
            string filename = ((string)(inValues[2]));
            byte[] contents = ((byte[])(inValues[3]));
            bool hidden = ((bool)(inValues[4]));
            string compressed_mime = ((string)(inValues[5]));
            return this.BeginUploadCompressedFile(login, work, filename, contents, hidden, compressed_mime, callback, asyncState);
        }
        
        private object[] OnEndUploadCompressedFile(System.IAsyncResult result) {
            this.EndUploadCompressedFile(result);
            return null;
        }
        
        private void OnUploadCompressedFileCompleted(object state) {
            if ((this.UploadCompressedFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadCompressedFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadCompressedFileAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, string filename, byte[] contents, bool hidden, string compressed_mime) {
            this.UploadCompressedFileAsync(login, work, filename, contents, hidden, compressed_mime, null);
        }
        
        public void UploadCompressedFileAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, string filename, byte[] contents, bool hidden, string compressed_mime, object userState) {
            if ((this.onBeginUploadCompressedFileDelegate == null)) {
                this.onBeginUploadCompressedFileDelegate = new BeginOperationDelegate(this.OnBeginUploadCompressedFile);
            }
            if ((this.onEndUploadCompressedFileDelegate == null)) {
                this.onEndUploadCompressedFileDelegate = new EndOperationDelegate(this.OnEndUploadCompressedFile);
            }
            if ((this.onUploadCompressedFileCompletedDelegate == null)) {
                this.onUploadCompressedFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadCompressedFileCompleted);
            }
            base.InvokeAsync(this.onBeginUploadCompressedFileDelegate, new object[] {
                        login,
                        work,
                        filename,
                        contents,
                        hidden,
                        compressed_mime}, this.onEndUploadCompressedFileDelegate, this.onUploadCompressedFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginUploadFile(MoonlightDrtViewer.MonkeyWrench.UploadFileRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadFile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginUploadFile(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, string filename, byte[] contents, bool hidden, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.UploadFileRequest inValue = new MoonlightDrtViewer.MonkeyWrench.UploadFileRequest();
            inValue.login = login;
            inValue.work = work;
            inValue.filename = filename;
            inValue.contents = contents;
            inValue.hidden = hidden;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginUploadFile(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.UploadFileResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndUploadFile(System.IAsyncResult result) {
            return base.Channel.EndUploadFile(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private void EndUploadFile(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.UploadFileResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndUploadFile(result);
        }
        
        private System.IAsyncResult OnBeginUploadFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBWork work = ((MoonlightDrtViewer.MonkeyWrench.DBWork)(inValues[1]));
            string filename = ((string)(inValues[2]));
            byte[] contents = ((byte[])(inValues[3]));
            bool hidden = ((bool)(inValues[4]));
            return this.BeginUploadFile(login, work, filename, contents, hidden, callback, asyncState);
        }
        
        private object[] OnEndUploadFile(System.IAsyncResult result) {
            this.EndUploadFile(result);
            return null;
        }
        
        private void OnUploadFileCompleted(object state) {
            if ((this.UploadFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadFileAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, string filename, byte[] contents, bool hidden) {
            this.UploadFileAsync(login, work, filename, contents, hidden, null);
        }
        
        public void UploadFileAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, string filename, byte[] contents, bool hidden, object userState) {
            if ((this.onBeginUploadFileDelegate == null)) {
                this.onBeginUploadFileDelegate = new BeginOperationDelegate(this.OnBeginUploadFile);
            }
            if ((this.onEndUploadFileDelegate == null)) {
                this.onEndUploadFileDelegate = new EndOperationDelegate(this.OnEndUploadFile);
            }
            if ((this.onUploadFileCompletedDelegate == null)) {
                this.onUploadFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadFileCompleted);
            }
            base.InvokeAsync(this.onBeginUploadFileDelegate, new object[] {
                        login,
                        work,
                        filename,
                        contents,
                        hidden}, this.onEndUploadFileDelegate, this.onUploadFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetWorkState(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWorkState(login, work, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.DBState MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetWorkState(System.IAsyncResult result) {
            return base.Channel.EndGetWorkState(result);
        }
        
        private System.IAsyncResult OnBeginGetWorkState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBWork work = ((MoonlightDrtViewer.MonkeyWrench.DBWork)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetWorkState(login, work, callback, asyncState);
        }
        
        private object[] OnEndGetWorkState(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.DBState retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetWorkState(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWorkStateCompleted(object state) {
            if ((this.GetWorkStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWorkStateCompleted(this, new GetWorkStateCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWorkStateAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work) {
            this.GetWorkStateAsync(login, work, null);
        }
        
        public void GetWorkStateAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, object userState) {
            if ((this.onBeginGetWorkStateDelegate == null)) {
                this.onBeginGetWorkStateDelegate = new BeginOperationDelegate(this.OnBeginGetWorkState);
            }
            if ((this.onEndGetWorkStateDelegate == null)) {
                this.onEndGetWorkStateDelegate = new EndOperationDelegate(this.OnEndGetWorkState);
            }
            if ((this.onGetWorkStateCompletedDelegate == null)) {
                this.onGetWorkStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWorkStateCompleted);
            }
            base.InvokeAsync(this.onBeginGetWorkStateDelegate, new object[] {
                        login,
                        work}, this.onEndGetWorkStateDelegate, this.onGetWorkStateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetFilesForWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int revisionwork_id, int command_id, string filename, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFilesForWork(login, revisionwork_id, command_id, filename, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetFilesForWorkResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetFilesForWork(System.IAsyncResult result) {
            return base.Channel.EndGetFilesForWork(result);
        }
        
        private System.IAsyncResult OnBeginGetFilesForWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int revisionwork_id = ((int)(inValues[1]));
            int command_id = ((int)(inValues[2]));
            string filename = ((string)(inValues[3]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetFilesForWork(login, revisionwork_id, command_id, filename, callback, asyncState);
        }
        
        private object[] OnEndGetFilesForWork(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetFilesForWorkResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetFilesForWork(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFilesForWorkCompleted(object state) {
            if ((this.GetFilesForWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFilesForWorkCompleted(this, new GetFilesForWorkCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFilesForWorkAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int revisionwork_id, int command_id, string filename) {
            this.GetFilesForWorkAsync(login, revisionwork_id, command_id, filename, null);
        }
        
        public void GetFilesForWorkAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int revisionwork_id, int command_id, string filename, object userState) {
            if ((this.onBeginGetFilesForWorkDelegate == null)) {
                this.onBeginGetFilesForWorkDelegate = new BeginOperationDelegate(this.OnBeginGetFilesForWork);
            }
            if ((this.onEndGetFilesForWorkDelegate == null)) {
                this.onEndGetFilesForWorkDelegate = new EndOperationDelegate(this.OnEndGetFilesForWork);
            }
            if ((this.onGetFilesForWorkCompletedDelegate == null)) {
                this.onGetFilesForWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFilesForWorkCompleted);
            }
            base.InvokeAsync(this.onBeginGetFilesForWorkDelegate, new object[] {
                        login,
                        revisionwork_id,
                        command_id,
                        filename}, this.onEndGetFilesForWorkDelegate, this.onGetFilesForWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginReportBuildState(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReportBuildState(login, work, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.ReportBuildStateResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndReportBuildState(System.IAsyncResult result) {
            return base.Channel.EndReportBuildState(result);
        }
        
        private System.IAsyncResult OnBeginReportBuildState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBWork work = ((MoonlightDrtViewer.MonkeyWrench.DBWork)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginReportBuildState(login, work, callback, asyncState);
        }
        
        private object[] OnEndReportBuildState(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.ReportBuildStateResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndReportBuildState(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReportBuildStateCompleted(object state) {
            if ((this.ReportBuildStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReportBuildStateCompleted(this, new ReportBuildStateCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReportBuildStateAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work) {
            this.ReportBuildStateAsync(login, work, null);
        }
        
        public void ReportBuildStateAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, object userState) {
            if ((this.onBeginReportBuildStateDelegate == null)) {
                this.onBeginReportBuildStateDelegate = new BeginOperationDelegate(this.OnBeginReportBuildState);
            }
            if ((this.onEndReportBuildStateDelegate == null)) {
                this.onEndReportBuildStateDelegate = new EndOperationDelegate(this.OnEndReportBuildState);
            }
            if ((this.onReportBuildStateCompletedDelegate == null)) {
                this.onReportBuildStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReportBuildStateCompleted);
            }
            base.InvokeAsync(this.onBeginReportBuildStateDelegate, new object[] {
                        login,
                        work}, this.onEndReportBuildStateDelegate, this.onReportBuildStateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetRevisionWorkForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int revision_id, int host_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRevisionWorkForLane(login, lane_id, revision_id, host_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetRevisionWorkForLaneResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetRevisionWorkForLane(System.IAsyncResult result) {
            return base.Channel.EndGetRevisionWorkForLane(result);
        }
        
        private System.IAsyncResult OnBeginGetRevisionWorkForLane(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            int revision_id = ((int)(inValues[2]));
            int host_id = ((int)(inValues[3]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetRevisionWorkForLane(login, lane_id, revision_id, host_id, callback, asyncState);
        }
        
        private object[] OnEndGetRevisionWorkForLane(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetRevisionWorkForLaneResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetRevisionWorkForLane(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRevisionWorkForLaneCompleted(object state) {
            if ((this.GetRevisionWorkForLaneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRevisionWorkForLaneCompleted(this, new GetRevisionWorkForLaneCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRevisionWorkForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int revision_id, int host_id) {
            this.GetRevisionWorkForLaneAsync(login, lane_id, revision_id, host_id, null);
        }
        
        public void GetRevisionWorkForLaneAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int revision_id, int host_id, object userState) {
            if ((this.onBeginGetRevisionWorkForLaneDelegate == null)) {
                this.onBeginGetRevisionWorkForLaneDelegate = new BeginOperationDelegate(this.OnBeginGetRevisionWorkForLane);
            }
            if ((this.onEndGetRevisionWorkForLaneDelegate == null)) {
                this.onEndGetRevisionWorkForLaneDelegate = new EndOperationDelegate(this.OnEndGetRevisionWorkForLane);
            }
            if ((this.onGetRevisionWorkForLaneCompletedDelegate == null)) {
                this.onGetRevisionWorkForLaneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRevisionWorkForLaneCompleted);
            }
            base.InvokeAsync(this.onBeginGetRevisionWorkForLaneDelegate, new object[] {
                        login,
                        lane_id,
                        revision_id,
                        host_id}, this.onEndGetRevisionWorkForLaneDelegate, this.onGetRevisionWorkForLaneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginReportBuildBotStatus(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.BuildBotStatus status, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReportBuildBotStatus(login, status, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.ReportBuildBotStatusResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndReportBuildBotStatus(System.IAsyncResult result) {
            return base.Channel.EndReportBuildBotStatus(result);
        }
        
        private System.IAsyncResult OnBeginReportBuildBotStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.BuildBotStatus status = ((MoonlightDrtViewer.MonkeyWrench.BuildBotStatus)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginReportBuildBotStatus(login, status, callback, asyncState);
        }
        
        private object[] OnEndReportBuildBotStatus(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.ReportBuildBotStatusResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndReportBuildBotStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReportBuildBotStatusCompleted(object state) {
            if ((this.ReportBuildBotStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReportBuildBotStatusCompleted(this, new ReportBuildBotStatusCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReportBuildBotStatusAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.BuildBotStatus status) {
            this.ReportBuildBotStatusAsync(login, status, null);
        }
        
        public void ReportBuildBotStatusAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.BuildBotStatus status, object userState) {
            if ((this.onBeginReportBuildBotStatusDelegate == null)) {
                this.onBeginReportBuildBotStatusDelegate = new BeginOperationDelegate(this.OnBeginReportBuildBotStatus);
            }
            if ((this.onEndReportBuildBotStatusDelegate == null)) {
                this.onEndReportBuildBotStatusDelegate = new EndOperationDelegate(this.OnEndReportBuildBotStatus);
            }
            if ((this.onReportBuildBotStatusCompletedDelegate == null)) {
                this.onReportBuildBotStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReportBuildBotStatusCompleted);
            }
            base.InvokeAsync(this.onBeginReportBuildBotStatusDelegate, new object[] {
                        login,
                        status}, this.onEndReportBuildBotStatusDelegate, this.onReportBuildBotStatusCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetBuildBotStatus(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBuildBotStatus(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetBuildBotStatusResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetBuildBotStatus(System.IAsyncResult result) {
            return base.Channel.EndGetBuildBotStatus(result);
        }
        
        private System.IAsyncResult OnBeginGetBuildBotStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetBuildBotStatus(login, callback, asyncState);
        }
        
        private object[] OnEndGetBuildBotStatus(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetBuildBotStatusResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetBuildBotStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBuildBotStatusCompleted(object state) {
            if ((this.GetBuildBotStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBuildBotStatusCompleted(this, new GetBuildBotStatusCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBuildBotStatusAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.GetBuildBotStatusAsync(login, null);
        }
        
        public void GetBuildBotStatusAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginGetBuildBotStatusDelegate == null)) {
                this.onBeginGetBuildBotStatusDelegate = new BeginOperationDelegate(this.OnBeginGetBuildBotStatus);
            }
            if ((this.onEndGetBuildBotStatusDelegate == null)) {
                this.onEndGetBuildBotStatusDelegate = new EndOperationDelegate(this.OnEndGetBuildBotStatus);
            }
            if ((this.onGetBuildBotStatusCompletedDelegate == null)) {
                this.onGetBuildBotStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBuildBotStatusCompleted);
            }
            base.InvokeAsync(this.onBeginGetBuildBotStatusDelegate, new object[] {
                        login}, this.onEndGetBuildBotStatusDelegate, this.onGetBuildBotStatusCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetBuildInfo(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBuildInfo(login, host, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetBuildInfo(System.IAsyncResult result) {
            return base.Channel.EndGetBuildInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetBuildInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            string host = ((string)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetBuildInfo(login, host, callback, asyncState);
        }
        
        private object[] OnEndGetBuildInfo(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetBuildInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBuildInfoCompleted(object state) {
            if ((this.GetBuildInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBuildInfoCompleted(this, new GetBuildInfoCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBuildInfoAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host) {
            this.GetBuildInfoAsync(login, host, null);
        }
        
        public void GetBuildInfoAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, object userState) {
            if ((this.onBeginGetBuildInfoDelegate == null)) {
                this.onBeginGetBuildInfoDelegate = new BeginOperationDelegate(this.OnBeginGetBuildInfo);
            }
            if ((this.onEndGetBuildInfoDelegate == null)) {
                this.onEndGetBuildInfoDelegate = new EndOperationDelegate(this.OnEndGetBuildInfo);
            }
            if ((this.onGetBuildInfoCompletedDelegate == null)) {
                this.onGetBuildInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBuildInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetBuildInfoDelegate, new object[] {
                        login,
                        host}, this.onEndGetBuildInfoDelegate, this.onGetBuildInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetBuildInfoMultiple(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, bool multiple_work, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBuildInfoMultiple(login, host, multiple_work, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetBuildInfoMultiple(System.IAsyncResult result) {
            return base.Channel.EndGetBuildInfoMultiple(result);
        }
        
        private System.IAsyncResult OnBeginGetBuildInfoMultiple(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            string host = ((string)(inValues[1]));
            bool multiple_work = ((bool)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetBuildInfoMultiple(login, host, multiple_work, callback, asyncState);
        }
        
        private object[] OnEndGetBuildInfoMultiple(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetBuildInfoMultiple(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBuildInfoMultipleCompleted(object state) {
            if ((this.GetBuildInfoMultipleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBuildInfoMultipleCompleted(this, new GetBuildInfoMultipleCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBuildInfoMultipleAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, bool multiple_work) {
            this.GetBuildInfoMultipleAsync(login, host, multiple_work, null);
        }
        
        public void GetBuildInfoMultipleAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, bool multiple_work, object userState) {
            if ((this.onBeginGetBuildInfoMultipleDelegate == null)) {
                this.onBeginGetBuildInfoMultipleDelegate = new BeginOperationDelegate(this.OnBeginGetBuildInfoMultiple);
            }
            if ((this.onEndGetBuildInfoMultipleDelegate == null)) {
                this.onEndGetBuildInfoMultipleDelegate = new EndOperationDelegate(this.OnEndGetBuildInfoMultiple);
            }
            if ((this.onGetBuildInfoMultipleCompletedDelegate == null)) {
                this.onGetBuildInfoMultipleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBuildInfoMultipleCompleted);
            }
            base.InvokeAsync(this.onBeginGetBuildInfoMultipleDelegate, new object[] {
                        login,
                        host,
                        multiple_work}, this.onEndGetBuildInfoMultipleDelegate, this.onGetBuildInfoMultipleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginFindLatestWorkFileId(MoonlightDrtViewer.MonkeyWrench.FindLatestWorkFileIdRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindLatestWorkFileId(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginFindLatestWorkFileId(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, string filename, bool completed, bool successful, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.FindLatestWorkFileIdRequest inValue = new MoonlightDrtViewer.MonkeyWrench.FindLatestWorkFileIdRequest();
            inValue.login = login;
            inValue.lane_id = lane_id;
            inValue.lane = lane;
            inValue.filename = filename;
            inValue.completed = completed;
            inValue.successful = successful;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginFindLatestWorkFileId(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.FindLatestWorkFileIdResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndFindLatestWorkFileId(System.IAsyncResult result) {
            return base.Channel.EndFindLatestWorkFileId(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.Nullable<int> EndFindLatestWorkFileId(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.FindLatestWorkFileIdResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndFindLatestWorkFileId(result);
            return retVal.FindLatestWorkFileIdResult;
        }
        
        private System.IAsyncResult OnBeginFindLatestWorkFileId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> lane_id = ((System.Nullable<int>)(inValues[1]));
            string lane = ((string)(inValues[2]));
            string filename = ((string)(inValues[3]));
            bool completed = ((bool)(inValues[4]));
            bool successful = ((bool)(inValues[5]));
            return this.BeginFindLatestWorkFileId(login, lane_id, lane, filename, completed, successful, callback, asyncState);
        }
        
        private object[] OnEndFindLatestWorkFileId(System.IAsyncResult result) {
            System.Nullable<int> retVal = this.EndFindLatestWorkFileId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindLatestWorkFileIdCompleted(object state) {
            if ((this.FindLatestWorkFileIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindLatestWorkFileIdCompleted(this, new FindLatestWorkFileIdCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindLatestWorkFileIdAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, string filename, bool completed, bool successful) {
            this.FindLatestWorkFileIdAsync(login, lane_id, lane, filename, completed, successful, null);
        }
        
        public void FindLatestWorkFileIdAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> lane_id, string lane, string filename, bool completed, bool successful, object userState) {
            if ((this.onBeginFindLatestWorkFileIdDelegate == null)) {
                this.onBeginFindLatestWorkFileIdDelegate = new BeginOperationDelegate(this.OnBeginFindLatestWorkFileId);
            }
            if ((this.onEndFindLatestWorkFileIdDelegate == null)) {
                this.onEndFindLatestWorkFileIdDelegate = new EndOperationDelegate(this.OnEndFindLatestWorkFileId);
            }
            if ((this.onFindLatestWorkFileIdCompletedDelegate == null)) {
                this.onFindLatestWorkFileIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindLatestWorkFileIdCompleted);
            }
            base.InvokeAsync(this.onBeginFindLatestWorkFileIdDelegate, new object[] {
                        login,
                        lane_id,
                        lane,
                        filename,
                        completed,
                        successful}, this.onEndFindLatestWorkFileIdDelegate, this.onFindLatestWorkFileIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetTestResults(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string[] revisions, string filename, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTestResults(login, revisions, filename, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetTestResultsResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetTestResults(System.IAsyncResult result) {
            return base.Channel.EndGetTestResults(result);
        }
        
        private System.IAsyncResult OnBeginGetTestResults(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            string[] revisions = ((string[])(inValues[1]));
            string filename = ((string)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetTestResults(login, revisions, filename, callback, asyncState);
        }
        
        private object[] OnEndGetTestResults(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetTestResultsResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetTestResults(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTestResultsCompleted(object state) {
            if ((this.GetTestResultsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTestResultsCompleted(this, new GetTestResultsCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTestResultsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string[] revisions, string filename) {
            this.GetTestResultsAsync(login, revisions, filename, null);
        }
        
        public void GetTestResultsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string[] revisions, string filename, object userState) {
            if ((this.onBeginGetTestResultsDelegate == null)) {
                this.onBeginGetTestResultsDelegate = new BeginOperationDelegate(this.OnBeginGetTestResults);
            }
            if ((this.onEndGetTestResultsDelegate == null)) {
                this.onEndGetTestResultsDelegate = new EndOperationDelegate(this.OnEndGetTestResults);
            }
            if ((this.onGetTestResultsCompletedDelegate == null)) {
                this.onGetTestResultsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTestResultsCompleted);
            }
            base.InvokeAsync(this.onBeginGetTestResultsDelegate, new object[] {
                        login,
                        revisions,
                        filename}, this.onEndGetTestResultsDelegate, this.onGetTestResultsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginEditIdentity(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBIrcIdentity irc_identity, MoonlightDrtViewer.MonkeyWrench.DBEmailIdentity email_identity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditIdentity(login, irc_identity, email_identity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndEditIdentity(System.IAsyncResult result) {
            return base.Channel.EndEditIdentity(result);
        }
        
        private System.IAsyncResult OnBeginEditIdentity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBIrcIdentity irc_identity = ((MoonlightDrtViewer.MonkeyWrench.DBIrcIdentity)(inValues[1]));
            MoonlightDrtViewer.MonkeyWrench.DBEmailIdentity email_identity = ((MoonlightDrtViewer.MonkeyWrench.DBEmailIdentity)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginEditIdentity(login, irc_identity, email_identity, callback, asyncState);
        }
        
        private object[] OnEndEditIdentity(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndEditIdentity(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditIdentityCompleted(object state) {
            if ((this.EditIdentityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditIdentityCompleted(this, new EditIdentityCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditIdentityAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBIrcIdentity irc_identity, MoonlightDrtViewer.MonkeyWrench.DBEmailIdentity email_identity) {
            this.EditIdentityAsync(login, irc_identity, email_identity, null);
        }
        
        public void EditIdentityAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBIrcIdentity irc_identity, MoonlightDrtViewer.MonkeyWrench.DBEmailIdentity email_identity, object userState) {
            if ((this.onBeginEditIdentityDelegate == null)) {
                this.onBeginEditIdentityDelegate = new BeginOperationDelegate(this.OnBeginEditIdentity);
            }
            if ((this.onEndEditIdentityDelegate == null)) {
                this.onEndEditIdentityDelegate = new EndOperationDelegate(this.OnEndEditIdentity);
            }
            if ((this.onEditIdentityCompletedDelegate == null)) {
                this.onEditIdentityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditIdentityCompleted);
            }
            base.InvokeAsync(this.onBeginEditIdentityDelegate, new object[] {
                        login,
                        irc_identity,
                        email_identity}, this.onEndEditIdentityDelegate, this.onEditIdentityCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginRemoveIdentity(MoonlightDrtViewer.MonkeyWrench.RemoveIdentityRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveIdentity(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginRemoveIdentity(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> irc_identity, System.Nullable<int> email_identity, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.RemoveIdentityRequest inValue = new MoonlightDrtViewer.MonkeyWrench.RemoveIdentityRequest();
            inValue.login = login;
            inValue.irc_identity = irc_identity;
            inValue.email_identity = email_identity;
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginRemoveIdentity(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.RemoveIdentityResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndRemoveIdentity(System.IAsyncResult result) {
            return base.Channel.EndRemoveIdentity(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndRemoveIdentity(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.RemoveIdentityResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndRemoveIdentity(result);
            return retVal.RemoveIdentityResult;
        }
        
        private System.IAsyncResult OnBeginRemoveIdentity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            System.Nullable<int> irc_identity = ((System.Nullable<int>)(inValues[1]));
            System.Nullable<int> email_identity = ((System.Nullable<int>)(inValues[2]));
            return this.BeginRemoveIdentity(login, irc_identity, email_identity, callback, asyncState);
        }
        
        private object[] OnEndRemoveIdentity(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = this.EndRemoveIdentity(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveIdentityCompleted(object state) {
            if ((this.RemoveIdentityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveIdentityCompleted(this, new RemoveIdentityCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveIdentityAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> irc_identity, System.Nullable<int> email_identity) {
            this.RemoveIdentityAsync(login, irc_identity, email_identity, null);
        }
        
        public void RemoveIdentityAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.Nullable<int> irc_identity, System.Nullable<int> email_identity, object userState) {
            if ((this.onBeginRemoveIdentityDelegate == null)) {
                this.onBeginRemoveIdentityDelegate = new BeginOperationDelegate(this.OnBeginRemoveIdentity);
            }
            if ((this.onEndRemoveIdentityDelegate == null)) {
                this.onEndRemoveIdentityDelegate = new EndOperationDelegate(this.OnEndRemoveIdentity);
            }
            if ((this.onRemoveIdentityCompletedDelegate == null)) {
                this.onRemoveIdentityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveIdentityCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveIdentityDelegate, new object[] {
                        login,
                        irc_identity,
                        email_identity}, this.onEndRemoveIdentityDelegate, this.onRemoveIdentityCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetIdentities(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetIdentities(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetIdentitiesResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetIdentities(System.IAsyncResult result) {
            return base.Channel.EndGetIdentities(result);
        }
        
        private System.IAsyncResult OnBeginGetIdentities(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetIdentities(login, callback, asyncState);
        }
        
        private object[] OnEndGetIdentities(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetIdentitiesResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetIdentities(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetIdentitiesCompleted(object state) {
            if ((this.GetIdentitiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetIdentitiesCompleted(this, new GetIdentitiesCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetIdentitiesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.GetIdentitiesAsync(login, null);
        }
        
        public void GetIdentitiesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginGetIdentitiesDelegate == null)) {
                this.onBeginGetIdentitiesDelegate = new BeginOperationDelegate(this.OnBeginGetIdentities);
            }
            if ((this.onEndGetIdentitiesDelegate == null)) {
                this.onEndGetIdentitiesDelegate = new EndOperationDelegate(this.OnEndGetIdentities);
            }
            if ((this.onGetIdentitiesCompletedDelegate == null)) {
                this.onGetIdentitiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetIdentitiesCompleted);
            }
            base.InvokeAsync(this.onBeginGetIdentitiesDelegate, new object[] {
                        login}, this.onEndGetIdentitiesDelegate, this.onGetIdentitiesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginEditNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBNotification notification, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditNotification(login, notification, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndEditNotification(System.IAsyncResult result) {
            return base.Channel.EndEditNotification(result);
        }
        
        private System.IAsyncResult OnBeginEditNotification(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBNotification notification = ((MoonlightDrtViewer.MonkeyWrench.DBNotification)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginEditNotification(login, notification, callback, asyncState);
        }
        
        private object[] OnEndEditNotification(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndEditNotification(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditNotificationCompleted(object state) {
            if ((this.EditNotificationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditNotificationCompleted(this, new EditNotificationCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditNotificationAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBNotification notification) {
            this.EditNotificationAsync(login, notification, null);
        }
        
        public void EditNotificationAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBNotification notification, object userState) {
            if ((this.onBeginEditNotificationDelegate == null)) {
                this.onBeginEditNotificationDelegate = new BeginOperationDelegate(this.OnBeginEditNotification);
            }
            if ((this.onEndEditNotificationDelegate == null)) {
                this.onEndEditNotificationDelegate = new EndOperationDelegate(this.OnEndEditNotification);
            }
            if ((this.onEditNotificationCompletedDelegate == null)) {
                this.onEditNotificationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditNotificationCompleted);
            }
            base.InvokeAsync(this.onBeginEditNotificationDelegate, new object[] {
                        login,
                        notification}, this.onEndEditNotificationDelegate, this.onEditNotificationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginRemoveNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveNotification(login, id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndRemoveNotification(System.IAsyncResult result) {
            return base.Channel.EndRemoveNotification(result);
        }
        
        private System.IAsyncResult OnBeginRemoveNotification(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginRemoveNotification(login, id, callback, asyncState);
        }
        
        private object[] OnEndRemoveNotification(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndRemoveNotification(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveNotificationCompleted(object state) {
            if ((this.RemoveNotificationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveNotificationCompleted(this, new RemoveNotificationCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveNotificationAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id) {
            this.RemoveNotificationAsync(login, id, null);
        }
        
        public void RemoveNotificationAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, object userState) {
            if ((this.onBeginRemoveNotificationDelegate == null)) {
                this.onBeginRemoveNotificationDelegate = new BeginOperationDelegate(this.OnBeginRemoveNotification);
            }
            if ((this.onEndRemoveNotificationDelegate == null)) {
                this.onEndRemoveNotificationDelegate = new EndOperationDelegate(this.OnEndRemoveNotification);
            }
            if ((this.onRemoveNotificationCompletedDelegate == null)) {
                this.onRemoveNotificationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveNotificationCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveNotificationDelegate, new object[] {
                        login,
                        id}, this.onEndRemoveNotificationDelegate, this.onRemoveNotificationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetNotifications(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNotifications(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetNotificationsResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetNotifications(System.IAsyncResult result) {
            return base.Channel.EndGetNotifications(result);
        }
        
        private System.IAsyncResult OnBeginGetNotifications(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetNotifications(login, callback, asyncState);
        }
        
        private object[] OnEndGetNotifications(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetNotificationsResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetNotifications(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNotificationsCompleted(object state) {
            if ((this.GetNotificationsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNotificationsCompleted(this, new GetNotificationsCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNotificationsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.GetNotificationsAsync(login, null);
        }
        
        public void GetNotificationsAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginGetNotificationsDelegate == null)) {
                this.onBeginGetNotificationsDelegate = new BeginOperationDelegate(this.OnBeginGetNotifications);
            }
            if ((this.onEndGetNotificationsDelegate == null)) {
                this.onEndGetNotificationsDelegate = new EndOperationDelegate(this.OnEndGetNotifications);
            }
            if ((this.onGetNotificationsCompletedDelegate == null)) {
                this.onGetNotificationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNotificationsCompleted);
            }
            base.InvokeAsync(this.onBeginGetNotificationsDelegate, new object[] {
                        login}, this.onEndGetNotificationsDelegate, this.onGetNotificationsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginAddLaneNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int notification_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddLaneNotification(login, lane_id, notification_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndAddLaneNotification(System.IAsyncResult result) {
            return base.Channel.EndAddLaneNotification(result);
        }
        
        private System.IAsyncResult OnBeginAddLaneNotification(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int lane_id = ((int)(inValues[1]));
            int notification_id = ((int)(inValues[2]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginAddLaneNotification(login, lane_id, notification_id, callback, asyncState);
        }
        
        private object[] OnEndAddLaneNotification(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndAddLaneNotification(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddLaneNotificationCompleted(object state) {
            if ((this.AddLaneNotificationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddLaneNotificationCompleted(this, new AddLaneNotificationCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddLaneNotificationAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int notification_id) {
            this.AddLaneNotificationAsync(login, lane_id, notification_id, null);
        }
        
        public void AddLaneNotificationAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int notification_id, object userState) {
            if ((this.onBeginAddLaneNotificationDelegate == null)) {
                this.onBeginAddLaneNotificationDelegate = new BeginOperationDelegate(this.OnBeginAddLaneNotification);
            }
            if ((this.onEndAddLaneNotificationDelegate == null)) {
                this.onEndAddLaneNotificationDelegate = new EndOperationDelegate(this.OnEndAddLaneNotification);
            }
            if ((this.onAddLaneNotificationCompletedDelegate == null)) {
                this.onAddLaneNotificationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddLaneNotificationCompleted);
            }
            base.InvokeAsync(this.onBeginAddLaneNotificationDelegate, new object[] {
                        login,
                        lane_id,
                        notification_id}, this.onEndAddLaneNotificationDelegate, this.onAddLaneNotificationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginRemoveLaneNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveLaneNotification(login, id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndRemoveLaneNotification(System.IAsyncResult result) {
            return base.Channel.EndRemoveLaneNotification(result);
        }
        
        private System.IAsyncResult OnBeginRemoveLaneNotification(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginRemoveLaneNotification(login, id, callback, asyncState);
        }
        
        private object[] OnEndRemoveLaneNotification(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndRemoveLaneNotification(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveLaneNotificationCompleted(object state) {
            if ((this.RemoveLaneNotificationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveLaneNotificationCompleted(this, new RemoveLaneNotificationCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveLaneNotificationAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id) {
            this.RemoveLaneNotificationAsync(login, id, null);
        }
        
        public void RemoveLaneNotificationAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, object userState) {
            if ((this.onBeginRemoveLaneNotificationDelegate == null)) {
                this.onBeginRemoveLaneNotificationDelegate = new BeginOperationDelegate(this.OnBeginRemoveLaneNotification);
            }
            if ((this.onEndRemoveLaneNotificationDelegate == null)) {
                this.onEndRemoveLaneNotificationDelegate = new EndOperationDelegate(this.OnEndRemoveLaneNotification);
            }
            if ((this.onRemoveLaneNotificationCompletedDelegate == null)) {
                this.onRemoveLaneNotificationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveLaneNotificationCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveLaneNotificationDelegate, new object[] {
                        login,
                        id}, this.onEndRemoveLaneNotificationDelegate, this.onRemoveLaneNotificationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginAddRelease(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBRelease release, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddRelease(login, release, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndAddRelease(System.IAsyncResult result) {
            return base.Channel.EndAddRelease(result);
        }
        
        private System.IAsyncResult OnBeginAddRelease(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            MoonlightDrtViewer.MonkeyWrench.DBRelease release = ((MoonlightDrtViewer.MonkeyWrench.DBRelease)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginAddRelease(login, release, callback, asyncState);
        }
        
        private object[] OnEndAddRelease(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndAddRelease(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddReleaseCompleted(object state) {
            if ((this.AddReleaseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddReleaseCompleted(this, new AddReleaseCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddReleaseAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBRelease release) {
            this.AddReleaseAsync(login, release, null);
        }
        
        public void AddReleaseAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBRelease release, object userState) {
            if ((this.onBeginAddReleaseDelegate == null)) {
                this.onBeginAddReleaseDelegate = new BeginOperationDelegate(this.OnBeginAddRelease);
            }
            if ((this.onEndAddReleaseDelegate == null)) {
                this.onEndAddReleaseDelegate = new EndOperationDelegate(this.OnEndAddRelease);
            }
            if ((this.onAddReleaseCompletedDelegate == null)) {
                this.onAddReleaseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddReleaseCompleted);
            }
            base.InvokeAsync(this.onBeginAddReleaseDelegate, new object[] {
                        login,
                        release}, this.onEndAddReleaseDelegate, this.onAddReleaseCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetReleases(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetReleases(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetReleasesResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetReleases(System.IAsyncResult result) {
            return base.Channel.EndGetReleases(result);
        }
        
        private System.IAsyncResult OnBeginGetReleases(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetReleases(login, callback, asyncState);
        }
        
        private object[] OnEndGetReleases(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetReleasesResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetReleases(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetReleasesCompleted(object state) {
            if ((this.GetReleasesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetReleasesCompleted(this, new GetReleasesCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetReleasesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.GetReleasesAsync(login, null);
        }
        
        public void GetReleasesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginGetReleasesDelegate == null)) {
                this.onBeginGetReleasesDelegate = new BeginOperationDelegate(this.OnBeginGetReleases);
            }
            if ((this.onEndGetReleasesDelegate == null)) {
                this.onEndGetReleasesDelegate = new EndOperationDelegate(this.OnEndGetReleases);
            }
            if ((this.onGetReleasesCompletedDelegate == null)) {
                this.onGetReleasesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetReleasesCompleted);
            }
            base.InvokeAsync(this.onBeginGetReleasesDelegate, new object[] {
                        login}, this.onEndGetReleasesDelegate, this.onGetReleasesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginDeleteRelease(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteRelease(login, id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.WebServiceResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndDeleteRelease(System.IAsyncResult result) {
            return base.Channel.EndDeleteRelease(result);
        }
        
        private System.IAsyncResult OnBeginDeleteRelease(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            int id = ((int)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginDeleteRelease(login, id, callback, asyncState);
        }
        
        private object[] OnEndDeleteRelease(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndDeleteRelease(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteReleaseCompleted(object state) {
            if ((this.DeleteReleaseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteReleaseCompleted(this, new DeleteReleaseCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteReleaseAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id) {
            this.DeleteReleaseAsync(login, id, null);
        }
        
        public void DeleteReleaseAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, object userState) {
            if ((this.onBeginDeleteReleaseDelegate == null)) {
                this.onBeginDeleteReleaseDelegate = new BeginOperationDelegate(this.OnBeginDeleteRelease);
            }
            if ((this.onEndDeleteReleaseDelegate == null)) {
                this.onEndDeleteReleaseDelegate = new EndOperationDelegate(this.OnEndDeleteRelease);
            }
            if ((this.onDeleteReleaseCompletedDelegate == null)) {
                this.onDeleteReleaseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteReleaseCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteReleaseDelegate, new object[] {
                        login,
                        id}, this.onEndDeleteReleaseDelegate, this.onDeleteReleaseCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginExecuteScheduler(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, bool forcefullupdate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecuteScheduler(login, forcefullupdate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndExecuteScheduler(System.IAsyncResult result) {
            base.Channel.EndExecuteScheduler(result);
        }
        
        private System.IAsyncResult OnBeginExecuteScheduler(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            bool forcefullupdate = ((bool)(inValues[1]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginExecuteScheduler(login, forcefullupdate, callback, asyncState);
        }
        
        private object[] OnEndExecuteScheduler(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndExecuteScheduler(result);
            return null;
        }
        
        private void OnExecuteSchedulerCompleted(object state) {
            if ((this.ExecuteSchedulerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecuteSchedulerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecuteSchedulerAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, bool forcefullupdate) {
            this.ExecuteSchedulerAsync(login, forcefullupdate, null);
        }
        
        public void ExecuteSchedulerAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, bool forcefullupdate, object userState) {
            if ((this.onBeginExecuteSchedulerDelegate == null)) {
                this.onBeginExecuteSchedulerDelegate = new BeginOperationDelegate(this.OnBeginExecuteScheduler);
            }
            if ((this.onEndExecuteSchedulerDelegate == null)) {
                this.onEndExecuteSchedulerDelegate = new EndOperationDelegate(this.OnEndExecuteScheduler);
            }
            if ((this.onExecuteSchedulerCompletedDelegate == null)) {
                this.onExecuteSchedulerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecuteSchedulerCompleted);
            }
            base.InvokeAsync(this.onBeginExecuteSchedulerDelegate, new object[] {
                        login,
                        forcefullupdate}, this.onEndExecuteSchedulerDelegate, this.onExecuteSchedulerCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginExecuteDeletionDirectives(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecuteDeletionDirectives(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndExecuteDeletionDirectives(System.IAsyncResult result) {
            base.Channel.EndExecuteDeletionDirectives(result);
        }
        
        private System.IAsyncResult OnBeginExecuteDeletionDirectives(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginExecuteDeletionDirectives(login, callback, asyncState);
        }
        
        private object[] OnEndExecuteDeletionDirectives(System.IAsyncResult result) {
            ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndExecuteDeletionDirectives(result);
            return null;
        }
        
        private void OnExecuteDeletionDirectivesCompleted(object state) {
            if ((this.ExecuteDeletionDirectivesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecuteDeletionDirectivesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecuteDeletionDirectivesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.ExecuteDeletionDirectivesAsync(login, null);
        }
        
        public void ExecuteDeletionDirectivesAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginExecuteDeletionDirectivesDelegate == null)) {
                this.onBeginExecuteDeletionDirectivesDelegate = new BeginOperationDelegate(this.OnBeginExecuteDeletionDirectives);
            }
            if ((this.onEndExecuteDeletionDirectivesDelegate == null)) {
                this.onEndExecuteDeletionDirectivesDelegate = new EndOperationDelegate(this.OnEndExecuteDeletionDirectives);
            }
            if ((this.onExecuteDeletionDirectivesCompletedDelegate == null)) {
                this.onExecuteDeletionDirectivesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecuteDeletionDirectivesCompleted);
            }
            base.InvokeAsync(this.onBeginExecuteDeletionDirectivesDelegate, new object[] {
                        login}, this.onEndExecuteDeletionDirectivesDelegate, this.onExecuteDeletionDirectivesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.BeginGetAdminInfo(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAdminInfo(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MoonlightDrtViewer.MonkeyWrench.GetAdminInfoResponse MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12.EndGetAdminInfo(System.IAsyncResult result) {
            return base.Channel.EndGetAdminInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetAdminInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login = ((MoonlightDrtViewer.MonkeyWrench.WebServiceLogin)(inValues[0]));
            return ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).BeginGetAdminInfo(login, callback, asyncState);
        }
        
        private object[] OnEndGetAdminInfo(System.IAsyncResult result) {
            MoonlightDrtViewer.MonkeyWrench.GetAdminInfoResponse retVal = ((MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12)(this)).EndGetAdminInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAdminInfoCompleted(object state) {
            if ((this.GetAdminInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAdminInfoCompleted(this, new GetAdminInfoCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAdminInfoAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login) {
            this.GetAdminInfoAsync(login, null);
        }
        
        public void GetAdminInfoAsync(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, object userState) {
            if ((this.onBeginGetAdminInfoDelegate == null)) {
                this.onBeginGetAdminInfoDelegate = new BeginOperationDelegate(this.OnBeginGetAdminInfo);
            }
            if ((this.onEndGetAdminInfoDelegate == null)) {
                this.onEndGetAdminInfoDelegate = new EndOperationDelegate(this.OnEndGetAdminInfo);
            }
            if ((this.onGetAdminInfoCompletedDelegate == null)) {
                this.onGetAdminInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAdminInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetAdminInfoDelegate, new object[] {
                        login}, this.onEndGetAdminInfoDelegate, this.onGetAdminInfoCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12 CreateChannel() {
            return new WebServicesSoap12ClientChannel(this);
        }
        
        private class WebServicesSoap12ClientChannel : ChannelBase<MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12>, MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12 {
            
            public WebServicesSoap12ClientChannel(System.ServiceModel.ClientBase<MoonlightDrtViewer.MonkeyWrench.WebServicesSoap12> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetRoles(string user, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = user;
                System.IAsyncResult _result = base.BeginInvoke("GetRoles", _args, callback, asyncState);
                return _result;
            }
            
            public string[] EndGetRoles(System.IAsyncResult result) {
                object[] _args = new object[0];
                string[] _result = ((string[])(base.EndInvoke("GetRoles", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogin(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("Login", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.LoginResponse EndLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.LoginResponse _result = ((MoonlightDrtViewer.MonkeyWrench.LoginResponse)(base.EndInvoke("Login", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogout(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("Logout", _args, callback, asyncState);
                return _result;
            }
            
            public void EndLogout(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Logout", _args, result);
            }
            
            public System.IAsyncResult BeginCreateLanefile(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string filename, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = filename;
                System.IAsyncResult _result = base.BeginInvoke("CreateLanefile", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCreateLanefile(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CreateLanefile", _args, result);
            }
            
            public System.IAsyncResult BeginAttachFileToLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int lanefile_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = lanefile_id;
                System.IAsyncResult _result = base.BeginInvoke("AttachFileToLane", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAttachFileToLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AttachFileToLane", _args, result);
            }
            
            public System.IAsyncResult BeginDeattachFileFromLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int lanefile_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = lanefile_id;
                System.IAsyncResult _result = base.BeginInvoke("DeattachFileFromLane", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeattachFileFromLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeattachFileFromLane", _args, result);
            }
            
            public System.IAsyncResult BeginEditCommandFilename(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string filename, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = command_id;
                _args[2] = filename;
                System.IAsyncResult _result = base.BeginInvoke("EditCommandFilename", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditCommandFilename(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditCommandFilename", _args, result);
            }
            
            public System.IAsyncResult BeginEditCommandSequence(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, int sequence, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = command_id;
                _args[2] = sequence;
                System.IAsyncResult _result = base.BeginInvoke("EditCommandSequence", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditCommandSequence(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditCommandSequence", _args, result);
            }
            
            public System.IAsyncResult BeginEditCommandArguments(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string arguments, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = command_id;
                _args[2] = arguments;
                System.IAsyncResult _result = base.BeginInvoke("EditCommandArguments", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditCommandArguments(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditCommandArguments", _args, result);
            }
            
            public System.IAsyncResult BeginEditCommandTimeout(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, int timeout, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = command_id;
                _args[2] = timeout;
                System.IAsyncResult _result = base.BeginInvoke("EditCommandTimeout", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditCommandTimeout(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditCommandTimeout", _args, result);
            }
            
            public System.IAsyncResult BeginEditCommandWorkingDirectory(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string working_directory, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = command_id;
                _args[2] = working_directory;
                System.IAsyncResult _result = base.BeginInvoke("EditCommandWorkingDirectory", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditCommandWorkingDirectory(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditCommandWorkingDirectory", _args, result);
            }
            
            public System.IAsyncResult BeginEditCommandUploadFiles(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, string upload_files, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = command_id;
                _args[2] = upload_files;
                System.IAsyncResult _result = base.BeginInvoke("EditCommandUploadFiles", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditCommandUploadFiles(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditCommandUploadFiles", _args, result);
            }
            
            public System.IAsyncResult BeginSwitchCommandNonFatal(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = command_id;
                System.IAsyncResult _result = base.BeginInvoke("SwitchCommandNonFatal", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSwitchCommandNonFatal(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SwitchCommandNonFatal", _args, result);
            }
            
            public System.IAsyncResult BeginSwitchCommandAlwaysExecute(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = command_id;
                System.IAsyncResult _result = base.BeginInvoke("SwitchCommandAlwaysExecute", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSwitchCommandAlwaysExecute(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SwitchCommandAlwaysExecute", _args, result);
            }
            
            public System.IAsyncResult BeginSwitchCommandInternal(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = command_id;
                System.IAsyncResult _result = base.BeginInvoke("SwitchCommandInternal", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSwitchCommandInternal(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SwitchCommandInternal", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteCommand(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = command_id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteCommand", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteCommand(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteCommand", _args, result);
            }
            
            public System.IAsyncResult BeginAddCommand(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string command, bool always_execute, bool nonfatal, int timeout, int sequence, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = command;
                _args[3] = always_execute;
                _args[4] = nonfatal;
                _args[5] = timeout;
                _args[6] = sequence;
                System.IAsyncResult _result = base.BeginInvoke("AddCommand", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddCommand(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddCommand", _args, result);
            }
            
            public System.IAsyncResult BeginSwitchHostEnabledForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = host_id;
                System.IAsyncResult _result = base.BeginInvoke("SwitchHostEnabledForLane", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSwitchHostEnabledForLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SwitchHostEnabledForLane", _args, result);
            }
            
            public System.IAsyncResult BeginRemoveHostForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = host_id;
                System.IAsyncResult _result = base.BeginInvoke("RemoveHostForLane", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemoveHostForLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RemoveHostForLane", _args, result);
            }
            
            public System.IAsyncResult BeginAddHostToLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = host_id;
                System.IAsyncResult _result = base.BeginInvoke("AddHostToLane", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddHostToLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddHostToLane", _args, result);
            }
            
            public System.IAsyncResult BeginAddDependencyToLane(MoonlightDrtViewer.MonkeyWrench.AddDependencyToLaneRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("AddDependencyToLane", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.AddDependencyToLaneResponse EndAddDependencyToLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.AddDependencyToLaneResponse _result = ((MoonlightDrtViewer.MonkeyWrench.AddDependencyToLaneResponse)(base.EndInvoke("AddDependencyToLane", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditLaneDependencyFilename(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, string filename, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lanedependency_id;
                _args[2] = filename;
                System.IAsyncResult _result = base.BeginInvoke("EditLaneDependencyFilename", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditLaneDependencyFilename(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditLaneDependencyFilename", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteLaneDependency(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lanedependency_id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteLaneDependency", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteLaneDependency(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteLaneDependency", _args, result);
            }
            
            public System.IAsyncResult BeginEditLaneDependencyDownloads(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanedependency_id, string downloads, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lanedependency_id;
                _args[2] = downloads;
                System.IAsyncResult _result = base.BeginInvoke("EditLaneDependencyDownloads", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditLaneDependencyDownloads(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditLaneDependencyDownloads", _args, result);
            }
            
            public System.IAsyncResult BeginUnlinkDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int directive_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = directive_id;
                System.IAsyncResult _result = base.BeginInvoke("UnlinkDeletionDirective", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUnlinkDeletionDirective(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UnlinkDeletionDirective", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_directive_id, int file_directive_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lane_directive_id;
                _args[2] = file_directive_id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteDeletionDirective", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteDeletionDirective(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteDeletionDirective", _args, result);
            }
            
            public System.IAsyncResult BeginEnableDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_deletion_directive_id, bool enabled, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lane_deletion_directive_id;
                _args[2] = enabled;
                System.IAsyncResult _result = base.BeginInvoke("EnableDeletionDirective", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEnableDeletionDirective(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EnableDeletionDirective", _args, result);
            }
            
            public System.IAsyncResult BeginAddFileDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string filename, string name, MoonlightDrtViewer.MonkeyWrench.DBMatchMode match_mode, int x, MoonlightDrtViewer.MonkeyWrench.DBDeleteCondition condition, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = login;
                _args[1] = filename;
                _args[2] = name;
                _args[3] = match_mode;
                _args[4] = x;
                _args[5] = condition;
                System.IAsyncResult _result = base.BeginInvoke("AddFileDeletionDirective", _args, callback, asyncState);
                return _result;
            }
            
            public int EndAddFileDeletionDirective(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("AddFileDeletionDirective", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddLaneDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int file_deletion_directive_id, int lane_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = file_deletion_directive_id;
                _args[2] = lane_id;
                System.IAsyncResult _result = base.BeginInvoke("AddLaneDeletionDirective", _args, callback, asyncState);
                return _result;
            }
            
            public int EndAddLaneDeletionDirective(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("AddLaneDeletionDirective", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFindLaneDeletionDirective(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int file_deletion_directive_id, int lane_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = file_deletion_directive_id;
                _args[2] = lane_id;
                System.IAsyncResult _result = base.BeginInvoke("FindLaneDeletionDirective", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.DBLaneDeletionDirectiveView EndFindLaneDeletionDirective(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.DBLaneDeletionDirectiveView _result = ((MoonlightDrtViewer.MonkeyWrench.DBLaneDeletionDirectiveView)(base.EndInvoke("FindLaneDeletionDirective", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lane_id;
                System.IAsyncResult _result = base.BeginInvoke("GetLane", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetLaneResponse EndGetLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetLaneResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetLaneResponse)(base.EndInvoke("GetLane", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWorkHostHistory(MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetWorkHostHistory", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryResponse1 EndGetWorkHostHistory(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryResponse1 _result = ((MoonlightDrtViewer.MonkeyWrench.GetWorkHostHistoryResponse1)(base.EndInvoke("GetWorkHostHistory", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetHostForEdit(MoonlightDrtViewer.MonkeyWrench.GetHostForEditRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetHostForEdit", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetHostForEditResponse1 EndGetHostForEdit(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetHostForEditResponse1 _result = ((MoonlightDrtViewer.MonkeyWrench.GetHostForEditResponse1)(base.EndInvoke("GetHostForEdit", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddMasterHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, int masterhost_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = host_id;
                _args[2] = masterhost_id;
                System.IAsyncResult _result = base.BeginInvoke("AddMasterHost", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddMasterHost(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddMasterHost", _args, result);
            }
            
            public System.IAsyncResult BeginRemoveMasterHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, int masterhost_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = host_id;
                _args[2] = masterhost_id;
                System.IAsyncResult _result = base.BeginInvoke("RemoveMasterHost", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemoveMasterHost(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RemoveMasterHost", _args, result);
            }
            
            public System.IAsyncResult BeginGetLaneForEdit(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string lane, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = lane;
                System.IAsyncResult _result = base.BeginInvoke("GetLaneForEdit", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetLaneForEditResponse EndGetLaneForEdit(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetLaneForEditResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetLaneForEditResponse)(base.EndInvoke("GetLaneForEdit", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFindHost(MoonlightDrtViewer.MonkeyWrench.FindHostRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("FindHost", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.FindHostResponse1 EndFindHost(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.FindHostResponse1 _result = ((MoonlightDrtViewer.MonkeyWrench.FindHostResponse1)(base.EndInvoke("FindHost", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFindRevisionForLane(MoonlightDrtViewer.MonkeyWrench.FindRevisionForLaneRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("FindRevisionForLane", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.FindRevisionForLaneResponse EndFindRevisionForLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.FindRevisionForLaneResponse _result = ((MoonlightDrtViewer.MonkeyWrench.FindRevisionForLaneResponse)(base.EndInvoke("FindRevisionForLane", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFindRevision(MoonlightDrtViewer.MonkeyWrench.FindRevisionRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("FindRevision", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse1 EndFindRevision(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse1 _result = ((MoonlightDrtViewer.MonkeyWrench.FindRevisionResponse1)(base.EndInvoke("FindRevision", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFindLane(MoonlightDrtViewer.MonkeyWrench.FindLaneRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("FindLane", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.FindLaneResponse1 EndFindLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.FindLaneResponse1 _result = ((MoonlightDrtViewer.MonkeyWrench.FindLaneResponse1)(base.EndInvoke("FindLane", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBLane lane, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lane;
                System.IAsyncResult _result = base.BeginInvoke("EditLane", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditLane", _args, result);
            }
            
            public System.IAsyncResult BeginEditHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBHost host, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = host;
                System.IAsyncResult _result = base.BeginInvoke("EditHost", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditHost(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditHost", _args, result);
            }
            
            public System.IAsyncResult BeginEditHostWithPassword(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBHost host, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = host;
                _args[2] = password;
                System.IAsyncResult _result = base.BeginInvoke("EditHostWithPassword", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditHostWithPassword(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditHostWithPassword", _args, result);
            }
            
            public System.IAsyncResult BeginGetViewLaneData(MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetViewLaneData", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse1 EndGetViewLaneData(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse1 _result = ((MoonlightDrtViewer.MonkeyWrench.GetViewLaneDataResponse1)(base.EndInvoke("GetViewLaneData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetViewLaneData2(MoonlightDrtViewer.MonkeyWrench.GetViewLaneData2Request request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetViewLaneData2", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetViewLaneData2Response EndGetViewLaneData2(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetViewLaneData2Response _result = ((MoonlightDrtViewer.MonkeyWrench.GetViewLaneData2Response)(base.EndInvoke("GetViewLaneData2", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFrontPageData(MoonlightDrtViewer.MonkeyWrench.GetFrontPageDataRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetFrontPageData", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetFrontPageDataResponse EndGetFrontPageData(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetFrontPageDataResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetFrontPageDataResponse)(base.EndInvoke("GetFrontPageData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFrontPageData2(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int limit, string[] lanes, int[] lane_ids, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = login;
                _args[1] = limit;
                _args[2] = lanes;
                _args[3] = lane_ids;
                System.IAsyncResult _result = base.BeginInvoke("GetFrontPageData2", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.FrontPageResponse EndGetFrontPageData2(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.FrontPageResponse _result = ((MoonlightDrtViewer.MonkeyWrench.FrontPageResponse)(base.EndInvoke("GetFrontPageData2", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLanes(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("GetLanes", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetLanesResponse EndGetLanes(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetLanesResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetLanesResponse)(base.EndInvoke("GetLanes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetHostLanes(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("GetHostLanes", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetHostLanesResponse EndGetHostLanes(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetHostLanesResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetHostLanesResponse)(base.EndInvoke("GetHostLanes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetHosts(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("GetHosts", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetHostsResponse EndGetHosts(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetHostsResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetHostsResponse)(base.EndInvoke("GetHosts", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRevisions(MoonlightDrtViewer.MonkeyWrench.GetRevisionsRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetRevisions", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetRevisionsResponse1 EndGetRevisions(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetRevisionsResponse1 _result = ((MoonlightDrtViewer.MonkeyWrench.GetRevisionsResponse1)(base.EndInvoke("GetRevisions", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCommands(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lane_id;
                System.IAsyncResult _result = base.BeginInvoke("GetCommands", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetCommandsResponse EndGetCommands(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetCommandsResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetCommandsResponse)(base.EndInvoke("GetCommands", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCloneLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, string new_name, bool copy_files, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = new_name;
                _args[3] = copy_files;
                System.IAsyncResult _result = base.BeginInvoke("CloneLane", _args, callback, asyncState);
                return _result;
            }
            
            public int EndCloneLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("CloneLane", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lane_id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteLane", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteLane", _args, result);
            }
            
            public System.IAsyncResult BeginAddLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string lane, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lane;
                System.IAsyncResult _result = base.BeginInvoke("AddLane", _args, callback, asyncState);
                return _result;
            }
            
            public int EndAddLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("AddLane", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = host_id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteHost", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteHost(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteHost", _args, result);
            }
            
            public System.IAsyncResult BeginAddHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = host;
                System.IAsyncResult _result = base.BeginInvoke("AddHost", _args, callback, asyncState);
                return _result;
            }
            
            public int EndAddHost(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("AddHost", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginClearRevision(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = host_id;
                _args[3] = revision_id;
                System.IAsyncResult _result = base.BeginInvoke("ClearRevision", _args, callback, asyncState);
                return _result;
            }
            
            public void EndClearRevision(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ClearRevision", _args, result);
            }
            
            public System.IAsyncResult BeginRescheduleRevision(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = host_id;
                _args[3] = revision_id;
                System.IAsyncResult _result = base.BeginInvoke("RescheduleRevision", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRescheduleRevision(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RescheduleRevision", _args, result);
            }
            
            public System.IAsyncResult BeginClearAllWorkForHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = host_id;
                System.IAsyncResult _result = base.BeginInvoke("ClearAllWorkForHost", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndClearAllWorkForHost(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("ClearAllWorkForHost", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginClearAllWorkForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lane_id;
                System.IAsyncResult _result = base.BeginInvoke("ClearAllWorkForLane", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndClearAllWorkForLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("ClearAllWorkForLane", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteAllWorkForHost(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int host_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = host_id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteAllWorkForHost", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndDeleteAllWorkForHost(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("DeleteAllWorkForHost", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteAllWorkForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lane_id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteAllWorkForLane", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndDeleteAllWorkForLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("DeleteAllWorkForLane", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteAllRevisionsForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lane_id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteAllRevisionsForLane", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndDeleteAllRevisionsForLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("DeleteAllRevisionsForLane", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAbortRevision(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int host_id, int revision_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = host_id;
                _args[3] = revision_id;
                System.IAsyncResult _result = base.BeginInvoke("AbortRevision", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAbortRevision(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AbortRevision", _args, result);
            }
            
            public System.IAsyncResult BeginClearWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = work_id;
                System.IAsyncResult _result = base.BeginInvoke("ClearWork", _args, callback, asyncState);
                return _result;
            }
            
            public void EndClearWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ClearWork", _args, result);
            }
            
            public System.IAsyncResult BeginAbortWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = work_id;
                System.IAsyncResult _result = base.BeginInvoke("AbortWork", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAbortWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AbortWork", _args, result);
            }
            
            public System.IAsyncResult BeginPauseWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = work_id;
                System.IAsyncResult _result = base.BeginInvoke("PauseWork", _args, callback, asyncState);
                return _result;
            }
            
            public void EndPauseWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("PauseWork", _args, result);
            }
            
            public System.IAsyncResult BeginResumeWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = work_id;
                System.IAsyncResult _result = base.BeginInvoke("ResumeWork", _args, callback, asyncState);
                return _result;
            }
            
            public void EndResumeWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ResumeWork", _args, result);
            }
            
            public System.IAsyncResult BeginGetViewTableData(MoonlightDrtViewer.MonkeyWrench.GetViewTableDataRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetViewTableData", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetViewTableDataResponse1 EndGetViewTableData(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetViewTableDataResponse1 _result = ((MoonlightDrtViewer.MonkeyWrench.GetViewTableDataResponse1)(base.EndInvoke("GetViewTableData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetViewWorkTableData(MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetViewWorkTableData", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse1 EndGetViewWorkTableData(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse1 _result = ((MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableDataResponse1)(base.EndInvoke("GetViewWorkTableData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetViewWorkTableData2(MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableData2Request request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetViewWorkTableData2", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableData2Response EndGetViewWorkTableData2(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableData2Response _result = ((MoonlightDrtViewer.MonkeyWrench.GetViewWorkTableData2Response)(base.EndInvoke("GetViewWorkTableData2", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLaneFileForEdit(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanefile_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lanefile_id;
                System.IAsyncResult _result = base.BeginInvoke("GetLaneFileForEdit", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetLaneFileForEditResponse EndGetLaneFileForEdit(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetLaneFileForEditResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetLaneFileForEditResponse)(base.EndInvoke("GetLaneFileForEdit", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditLaneFile(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBLanefile lanefile, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lanefile;
                System.IAsyncResult _result = base.BeginInvoke("EditLaneFile", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditLaneFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditLaneFile", _args, result);
            }
            
            public System.IAsyncResult BeginGetViewLaneFileHistoryData(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lanefile_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = lanefile_id;
                System.IAsyncResult _result = base.BeginInvoke("GetViewLaneFileHistoryData", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetViewLaneFileHistoryDataResponse EndGetViewLaneFileHistoryData(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetViewLaneFileHistoryDataResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetViewLaneFileHistoryDataResponse)(base.EndInvoke("GetViewLaneFileHistoryData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUsers(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("GetUsers", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetUsersResponse EndGetUsers(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetUsersResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetUsersResponse)(base.EndInvoke("GetUsers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteUser(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteUser", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndDeleteUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("DeleteUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddUserEmail(MoonlightDrtViewer.MonkeyWrench.AddUserEmailRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("AddUserEmail", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.AddUserEmailResponse EndAddUserEmail(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.AddUserEmailResponse _result = ((MoonlightDrtViewer.MonkeyWrench.AddUserEmailResponse)(base.EndInvoke("AddUserEmail", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveUserEmail(MoonlightDrtViewer.MonkeyWrench.RemoveUserEmailRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("RemoveUserEmail", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.RemoveUserEmailResponse EndRemoveUserEmail(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.RemoveUserEmailResponse _result = ((MoonlightDrtViewer.MonkeyWrench.RemoveUserEmailResponse)(base.EndInvoke("RemoveUserEmail", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditUser(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBPerson user, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = user;
                System.IAsyncResult _result = base.BeginInvoke("EditUser", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndEditUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("EditUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUser(MoonlightDrtViewer.MonkeyWrench.GetUserRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetUser", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetUserResponse1 EndGetUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetUserResponse1 _result = ((MoonlightDrtViewer.MonkeyWrench.GetUserResponse1)(base.EndInvoke("GetUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUploadPort(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetUploadPort", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetUploadPort(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetUploadPort", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddEnvironmentVariable(MoonlightDrtViewer.MonkeyWrench.AddEnvironmentVariableRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("AddEnvironmentVariable", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.AddEnvironmentVariableResponse EndAddEnvironmentVariable(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.AddEnvironmentVariableResponse _result = ((MoonlightDrtViewer.MonkeyWrench.AddEnvironmentVariableResponse)(base.EndInvoke("AddEnvironmentVariable", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditEnvironmentVariable(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBEnvironmentVariable variable, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = variable;
                System.IAsyncResult _result = base.BeginInvoke("EditEnvironmentVariable", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditEnvironmentVariable(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditEnvironmentVariable", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteEnvironmentVariable(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int variable_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = variable_id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteEnvironmentVariable", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteEnvironmentVariable(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteEnvironmentVariable", _args, result);
            }
            
            public System.IAsyncResult BeginUploadCompressedFile(MoonlightDrtViewer.MonkeyWrench.UploadCompressedFileRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("UploadCompressedFile", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.UploadCompressedFileResponse EndUploadCompressedFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.UploadCompressedFileResponse _result = ((MoonlightDrtViewer.MonkeyWrench.UploadCompressedFileResponse)(base.EndInvoke("UploadCompressedFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUploadFile(MoonlightDrtViewer.MonkeyWrench.UploadFileRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("UploadFile", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.UploadFileResponse EndUploadFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.UploadFileResponse _result = ((MoonlightDrtViewer.MonkeyWrench.UploadFileResponse)(base.EndInvoke("UploadFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWorkState(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = work;
                System.IAsyncResult _result = base.BeginInvoke("GetWorkState", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.DBState EndGetWorkState(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.DBState _result = ((MoonlightDrtViewer.MonkeyWrench.DBState)(base.EndInvoke("GetWorkState", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFilesForWork(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int revisionwork_id, int command_id, string filename, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = login;
                _args[1] = revisionwork_id;
                _args[2] = command_id;
                _args[3] = filename;
                System.IAsyncResult _result = base.BeginInvoke("GetFilesForWork", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetFilesForWorkResponse EndGetFilesForWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetFilesForWorkResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetFilesForWorkResponse)(base.EndInvoke("GetFilesForWork", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginReportBuildState(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBWork work, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = work;
                System.IAsyncResult _result = base.BeginInvoke("ReportBuildState", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.ReportBuildStateResponse EndReportBuildState(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.ReportBuildStateResponse _result = ((MoonlightDrtViewer.MonkeyWrench.ReportBuildStateResponse)(base.EndInvoke("ReportBuildState", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRevisionWorkForLane(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int revision_id, int host_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = revision_id;
                _args[3] = host_id;
                System.IAsyncResult _result = base.BeginInvoke("GetRevisionWorkForLane", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetRevisionWorkForLaneResponse EndGetRevisionWorkForLane(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetRevisionWorkForLaneResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetRevisionWorkForLaneResponse)(base.EndInvoke("GetRevisionWorkForLane", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginReportBuildBotStatus(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.BuildBotStatus status, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = status;
                System.IAsyncResult _result = base.BeginInvoke("ReportBuildBotStatus", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.ReportBuildBotStatusResponse EndReportBuildBotStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.ReportBuildBotStatusResponse _result = ((MoonlightDrtViewer.MonkeyWrench.ReportBuildBotStatusResponse)(base.EndInvoke("ReportBuildBotStatus", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetBuildBotStatus(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("GetBuildBotStatus", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetBuildBotStatusResponse EndGetBuildBotStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetBuildBotStatusResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetBuildBotStatusResponse)(base.EndInvoke("GetBuildBotStatus", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetBuildInfo(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = host;
                System.IAsyncResult _result = base.BeginInvoke("GetBuildInfo", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse EndGetBuildInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse)(base.EndInvoke("GetBuildInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetBuildInfoMultiple(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string host, bool multiple_work, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = host;
                _args[2] = multiple_work;
                System.IAsyncResult _result = base.BeginInvoke("GetBuildInfoMultiple", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse EndGetBuildInfoMultiple(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetBuildInfoResponse)(base.EndInvoke("GetBuildInfoMultiple", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFindLatestWorkFileId(MoonlightDrtViewer.MonkeyWrench.FindLatestWorkFileIdRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("FindLatestWorkFileId", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.FindLatestWorkFileIdResponse EndFindLatestWorkFileId(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.FindLatestWorkFileIdResponse _result = ((MoonlightDrtViewer.MonkeyWrench.FindLatestWorkFileIdResponse)(base.EndInvoke("FindLatestWorkFileId", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTestResults(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, string[] revisions, string filename, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = revisions;
                _args[2] = filename;
                System.IAsyncResult _result = base.BeginInvoke("GetTestResults", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetTestResultsResponse EndGetTestResults(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetTestResultsResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetTestResultsResponse)(base.EndInvoke("GetTestResults", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditIdentity(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBIrcIdentity irc_identity, MoonlightDrtViewer.MonkeyWrench.DBEmailIdentity email_identity, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = irc_identity;
                _args[2] = email_identity;
                System.IAsyncResult _result = base.BeginInvoke("EditIdentity", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndEditIdentity(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("EditIdentity", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveIdentity(MoonlightDrtViewer.MonkeyWrench.RemoveIdentityRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("RemoveIdentity", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.RemoveIdentityResponse EndRemoveIdentity(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.RemoveIdentityResponse _result = ((MoonlightDrtViewer.MonkeyWrench.RemoveIdentityResponse)(base.EndInvoke("RemoveIdentity", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetIdentities(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("GetIdentities", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetIdentitiesResponse EndGetIdentities(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetIdentitiesResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetIdentitiesResponse)(base.EndInvoke("GetIdentities", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBNotification notification, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = notification;
                System.IAsyncResult _result = base.BeginInvoke("EditNotification", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndEditNotification(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("EditNotification", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = id;
                System.IAsyncResult _result = base.BeginInvoke("RemoveNotification", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndRemoveNotification(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("RemoveNotification", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNotifications(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("GetNotifications", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetNotificationsResponse EndGetNotifications(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetNotificationsResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetNotificationsResponse)(base.EndInvoke("GetNotifications", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddLaneNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int lane_id, int notification_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = login;
                _args[1] = lane_id;
                _args[2] = notification_id;
                System.IAsyncResult _result = base.BeginInvoke("AddLaneNotification", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndAddLaneNotification(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("AddLaneNotification", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveLaneNotification(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = id;
                System.IAsyncResult _result = base.BeginInvoke("RemoveLaneNotification", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndRemoveLaneNotification(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("RemoveLaneNotification", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddRelease(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, MoonlightDrtViewer.MonkeyWrench.DBRelease release, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = release;
                System.IAsyncResult _result = base.BeginInvoke("AddRelease", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndAddRelease(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("AddRelease", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetReleases(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("GetReleases", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetReleasesResponse EndGetReleases(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetReleasesResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetReleasesResponse)(base.EndInvoke("GetReleases", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteRelease(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteRelease", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.WebServiceResponse EndDeleteRelease(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.WebServiceResponse _result = ((MoonlightDrtViewer.MonkeyWrench.WebServiceResponse)(base.EndInvoke("DeleteRelease", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginExecuteScheduler(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, bool forcefullupdate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = forcefullupdate;
                System.IAsyncResult _result = base.BeginInvoke("ExecuteScheduler", _args, callback, asyncState);
                return _result;
            }
            
            public void EndExecuteScheduler(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ExecuteScheduler", _args, result);
            }
            
            public System.IAsyncResult BeginExecuteDeletionDirectives(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("ExecuteDeletionDirectives", _args, callback, asyncState);
                return _result;
            }
            
            public void EndExecuteDeletionDirectives(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ExecuteDeletionDirectives", _args, result);
            }
            
            public System.IAsyncResult BeginGetAdminInfo(MoonlightDrtViewer.MonkeyWrench.WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("GetAdminInfo", _args, callback, asyncState);
                return _result;
            }
            
            public MoonlightDrtViewer.MonkeyWrench.GetAdminInfoResponse EndGetAdminInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                MoonlightDrtViewer.MonkeyWrench.GetAdminInfoResponse _result = ((MoonlightDrtViewer.MonkeyWrench.GetAdminInfoResponse)(base.EndInvoke("GetAdminInfo", _args, result)));
                return _result;
            }
        }
    }
}
